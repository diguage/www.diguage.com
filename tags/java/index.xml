<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on "地瓜哥"博客网</title><link>https://www.diguage.com/tags/java/</link><description>Recent content in Java on "地瓜哥"博客网</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Tue, 08 Jul 2025 09:29:43 +0800</lastBuildDate><atom:link href="https://www.diguage.com/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Boot 启动流程概述</title><link>https://www.diguage.com/post/spring-boot-startup-process-overview/</link><pubDate>Tue, 08 Jul 2025 09:23:05 +0800</pubDate><guid>https://www.diguage.com/post/spring-boot-startup-process-overview/</guid><description>&lt;div class="paragraph">
&lt;p>在 &lt;a href="https://www.diguage.com/post/spring-startup-process-overview/" target="_blank" rel="noopener">Spring 启动流程概述&lt;/a> 中，D瓜哥简要介绍了一下 Spring 的启动流程概述。前段时间查看了一下 Spring Boot 的启动流程，画了个时序图，分享一下。&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/spring-boot/SpringApplication-run.svg" alt="Spring Boot 启动流程" width="95%"/>
&lt;/div>
&lt;div class="title">图 1. Spring Boot 启动流程&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>结合这张时序图，再加上 &lt;a href="https://www.diguage.com/post/spring-startup-process-overview/" target="_blank" rel="noopener">Spring 启动流程概述&lt;/a> 中的 Spring 启动时序图，就可以看到 Spring Boot 和 Spring 启动的全貌了。&lt;/p>
&lt;/div></description></item><item><title>基于 Docker 搭建开发环境（三）：链路追踪</title><link>https://www.diguage.com/post/building-a-develop-environment-based-on-docker-3/</link><pubDate>Sun, 20 Oct 2024 16:50:11 +0800</pubDate><guid>https://www.diguage.com/post/building-a-develop-environment-based-on-docker-3/</guid><description>&lt;div class="paragraph">
&lt;p>&lt;strong>基于 Docker 搭建开发环境系列&lt;/strong>:&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-1/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（一）：数据库+监控&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-2/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（二）：EFK 日志套件&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-3/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（三）：链路追踪&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在上一篇文章 &lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-1/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（一）：数据库+监控&lt;/a> 和 &lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-2/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（二）：EFK 日志套件&lt;/a> 两篇文章中，分别介绍了“数据库+监控”和“EFK 日志套件”。这篇文章给大家分享一下如何在本地搭建起一套简单的分布式链路追踪。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在 AI 的帮助下，如同砍瓜切菜一样，非常迅速地就完成了 &lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-2/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（二）：EFK 日志套件&lt;/a> 的搭建。原以为搞这个也会分分钟的问题，结果应用的追踪数据一致无法正常发送到 Jaeger 中，各种改端口号都不行。后来，无意间看了 OpenTelemetry 的配置文档，增加了一个协议配置，全部流程竟然通了，非常神奇！&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>站在更高的视角去看，链路追踪其实是可观测性的一部分，包括上篇文章的日志，也是可观测性的一部分。日志、追踪、度量，三者是相辅相成的。&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/it/observability.png" alt="可观测性" width="95%"/>
&lt;/div>
&lt;div class="title">图 1. 可观测性&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在 OpenTelemetry 出现之前，日志、追踪、度量是分离的，三者各各自为战。而 OpenTelemetry 的出现，则是试图将三者统一。目前 OpenTelemetry 是云原生架构中，最炙手可热的分布式链路追踪解决方案，它提供了一套相关标准，各个厂商可以在这套标准之上进行各种各样的组件开发，大家可以根据自己的需要，选择不同的组件，进行可插拔式的安装。&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/it/opentelemetry-collection.webp" alt="OpenTelemetry 的野心" width="95%"/>
&lt;/div>
&lt;div class="title">图 2. OpenTelemetry 的野心&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在这篇文章中，链路追踪的解决方案选择的是 OpenTelemetry + OpenTelemetry Collector + Jaeger。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_opentelemetry">OpenTelemetry&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>OpenTelemetry 并不需要在 Docker 中启动或者配置什么。在目前的架构中，Jaeger 是作为 OpenTelemetry 的一个实现来出现的。 OpenTelemetry 需要做的就是下载一个 Java Agent，执行 &lt;code>docker/config/opentelemetry/download-opentelemetry-agent.sh&lt;/code> 脚本即可下载最新版的 Java Agent。在业务应用启动时，增加如下 JVM 参数：&lt;/p>
&lt;/div></description></item><item><title>基于 Docker 搭建开发环境（二）：EFK 日志套件</title><link>https://www.diguage.com/post/building-a-develop-environment-based-on-docker-2/</link><pubDate>Thu, 17 Oct 2024 22:42:11 +0800</pubDate><guid>https://www.diguage.com/post/building-a-develop-environment-based-on-docker-2/</guid><description>&lt;div class="paragraph">
&lt;p>&lt;strong>基于 Docker 搭建开发环境系列&lt;/strong>:&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-1/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（一）：数据库+监控&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-2/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（二）：EFK 日志套件&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-3/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（三）：链路追踪&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在上一篇文章 &lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-1/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（一）：数据库+监控&lt;/a> 中，介绍了一下如何使用 Docker 搭建起 MySQL + NACOS + Prometheus + Grafana 集成数据库、注册中心+配置管理、监控的开发环境。这篇文章来介绍一下如何在原来的基础上接入 Elasticsearch + Fluentd + Kibana 套件，并且将 NACOS 的日志接入到 Elasticsearch 里。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_elasticsearch">Elasticsearch&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>由于 Elasticsearch 8+ 的版本修改了安全策略，不允许 Kibana 使用超级管理员 &lt;code>elastic&lt;/code> 连接 Elasticsearch，这里选用 7.x 版本做演示。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>还有一点需要提醒，在设置 Elasticsearch 的超级管理员 &lt;code>elastic&lt;/code> 的账户密码时，如果密码是全部的阿拉伯数字，那么需要用双引号或者单引号括起来。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在测试中，还遇到一个磁盘过载导致的只读问题。解决方式如下：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;code>curl -X GET &amp;#34;localhost:9200/_cat/allocation?v&amp;amp;pretty&amp;#34;&lt;/code> 查看磁盘使用情况&lt;/p>
&lt;/li>
&lt;li>
&lt;p>解除只读状态&lt;/p>
&lt;div class="openblock">
&lt;div class="content">
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">&lt;span class="nv">$ &lt;/span>curl &lt;span class="nt">-X&lt;/span> PUT &lt;span class="s2">&amp;#34;localhost:9200/test/_settings&amp;#34;&lt;/span> &lt;span class="nt">-H&lt;/span> &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> &lt;span class="nt">-d&lt;/span>&lt;span class="s1">&amp;#39;
{
 &amp;#34;index.blocks.read_only_allow_delete&amp;#34;: null
}
&amp;#39;&lt;/span>&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>基于 Docker 搭建开发环境（一）：数据库+监控</title><link>https://www.diguage.com/post/building-a-develop-environment-based-on-docker-1/</link><pubDate>Wed, 16 Oct 2024 21:48:11 +0800</pubDate><guid>https://www.diguage.com/post/building-a-develop-environment-based-on-docker-1/</guid><description>&lt;div class="paragraph">
&lt;p>&lt;strong>基于 Docker 搭建开发环境系列&lt;/strong>:&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-1/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（一）：数据库+监控&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-2/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（二）：EFK 日志套件&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-3/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（三）：链路追踪&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="paragraph">
&lt;p>去年，很多同事要换 Mac 本，所以，写了 &lt;a href="https://www.diguage.com/post/install-software-for-new-mac/" target="_blank" rel="noopener">新 Mac 安装软件脚本&lt;/a>，方便大家一键换机。最近想玩一下 Spring Cloud 以及相关周边的部署、监控等开源解决方案。由于组件众多及为了便于迁移和共享，计划基于 Docker 及 Docker Compose 搭建一套相关的开发环境。记录一下，方便有相同需求的朋友借鉴。&lt;/p>
&lt;/div>
&lt;div class="admonitionblock tip">
&lt;table>
&lt;tbody>&lt;tr>
&lt;td class="icon">
&lt;i class="fa icon-tip" title="Tip">&lt;/i>
&lt;/td>
&lt;td class="content">
最新版的 Docker 在下载镜像时，会先访问一下 Docker 的官方站点。由于国内众所周知的网络情况，访问 Docker 官方站点总失败。所以，即使配置了国内 Docker 镜像站点也会失败。只需要将 Docker 软件回滚到 4.30.0 即可。（Mac 下验证有效，其他操作系统待进一步验证。）
&lt;/td>
&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_mysql">MySQL&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>开发中，最常用的应该就是数据库了。所以，先来搞 MySQL 数据库。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>创建如下目录结构，并添加相关相关文件：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">&lt;span class="nv">$ &lt;/span>tree
&lt;span class="nb">.&lt;/span>
├── README.adoc
├── clean.sh
├── data
│ └── mysql
│ └── .gitkeep
├── docker
│ ├── config
│ │ └── mysql
│ │ └── init.sql
│ ├── &lt;span class="nb">env&lt;/span>
│ │ └── mysql.env
│ └── images
│ └── mysql.dockerfile
└── docker-compose.yml&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>深入研究 BeanFactoryPostProcessor</title><link>https://www.diguage.com/post/dive-into-beanfactorypostprocessor/</link><pubDate>Sat, 01 Jun 2024 16:18:55 +0800</pubDate><guid>https://www.diguage.com/post/dive-into-beanfactorypostprocessor/</guid><description>&lt;div class="paragraph">
&lt;p>D瓜哥在 &lt;a href="https://www.diguage.com/post/spring-extensions-overview/" target="_blank" rel="noopener">Spring 扩展点概览及实践&lt;/a> 中概要性地介绍了一下 Spring 的核心扩展点。里面也提到了 &lt;code>BeanFactoryPostProcessor&lt;/code> 和 &lt;code>BeanDefinitionRegistryPostProcessor&lt;/code>，但仅仅提了一句，没有深入研究。在 &lt;a href="https://www.diguage.com/post/spring-extensions-and-mybatis/" target="_blank" rel="noopener">Spring 扩展点实践：整合 MyBATIS&lt;/a> 中，由于 &lt;code>MapperScannerConfigurer&lt;/code> 实现了 &lt;code>BeanDefinitionRegistryPostProcessor&lt;/code> 接口，也只是简单介绍了一些作用，又一次没有深入研究。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>最近，在开发一个插件时，遇到了一个问题：&lt;strong>利用 &lt;code>BeanFactoryPostProcessor&lt;/code> 对一些特定 &lt;code>BeanDefinition&lt;/code> 设置属性，但生成的 Bean 却没有相关的属性值。&lt;/strong>由此，对 &lt;code>BeanFactoryPostProcessor&lt;/code> 做了一些研究。记录一下，以备不时之需。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_spring_启动流程简介">Spring 启动流程简介&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>在 &lt;a href="https://www.diguage.com/post/spring-startup-process-overview/" target="_blank" rel="noopener">Spring 启动流程概述&lt;/a> 中，D瓜哥对 Spring 的启动流程做了比较详细的介绍。同时画了一张启动流程图，如下：&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/spring-framework/AbstractApplicationContext-refresh.svg" alt="AbstractApplicationContext.refresh — 重塑容器" width="95%"/>
&lt;/div>
&lt;div class="title">图 1. AbstractApplicationContext.refresh — 重塑容器&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>从该图中可以明显看到，如果需要对 Spring 的 &lt;code>BeanDefinition&lt;/code> 做些修改，那么，就需要通过实现 &lt;code>BeanFactoryPostProcessor&lt;/code> 接口，来对 Spring 做些扩展。坦白讲，为了上述流程图只展示了一个非常概要性的流程。如果深入一下 &lt;code>invokeBeanFactoryPostProcessors&lt;/code> 方法的细节，会发现这又是一番天地。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_beanfactorypostprocessor_调用详解">&lt;code>BeanFactoryPostProcessor&lt;/code> 调用详解&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>D瓜哥把 &lt;code>invokeBeanFactoryPostProcessors&lt;/code> 方法的流程图也画了出来，细节如下：&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/spring-framework/AbstractApplicationContext-invokeBeanFactoryPostProcessors.svg" alt="BeanDefinitionRegistryPostProcessor &amp;amp; BeanFactoryPostProcessor 调用过程" width="95%"/>
&lt;/div>
&lt;div class="title">图 2. BeanDefinitionRegistryPostProcessor &amp;amp; BeanFactoryPostProcessor 调用过程&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>从这张流程图上可以看出 &lt;code>BeanFactoryPostProcessor&lt;/code> 的调用过程，比在 &lt;a href="https://www.diguage.com/post/spring-startup-process-overview/" target="_blank" rel="noopener">Spring 启动流程概述&lt;/a> 中介绍的要复杂很多：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>首先，执行 &lt;code>BeanDefinitionRegistryPostProcessor#postProcessBeanDefinitionRegistry&lt;/code> 方法，顺序如下：&lt;/p>
&lt;div class="paragraph">
&lt;p>关于 &lt;code>BeanDefinitionRegistryPostProcessor&lt;/code> 的处理流程，D瓜哥在 &lt;a href="https://www.diguage.com/post/spring-extensions-overview/#bean-factory-post-processor" target="_blank" rel="noopener">Spring 扩展点概览及实践：BeanDefinitionRegistryPostProcessor&lt;/a> 中有更详细的描述，不了解的朋友请参考那篇文章的介绍。&lt;/p>
&lt;/div></description></item><item><title>生产环境中 Java 21 启动参数</title><link>https://www.diguage.com/post/java-21-boot-parameters-in-the-production/</link><pubDate>Mon, 13 May 2024 17:04:11 +0800</pubDate><guid>https://www.diguage.com/post/java-21-boot-parameters-in-the-production/</guid><description>&lt;div class="paragraph">
&lt;p>在 &lt;a href="https://www.diguage.com/post/upgrade-to-openjdk21/" target="_blank" rel="noopener">OpenJDK 21 升级指南&lt;/a> 中，给大家分享了一下升级到 OpenJDK 21 中遇到的一些问题。文末留了一个小问题：生产环境的 Java 21 启动参数怎么配置？这篇文章将给出 D瓜哥的答案。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>先说明一下生产环境的机器配置：4C8G，四个内核，8G 内存。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_启动参数">启动参数&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>鉴于 &lt;a href="https://www.diguage.com/post/gc-performance-incremental-qps/" target="_blank" rel="noopener">JVM GC 性能测试（二）：递增流量&lt;/a> 和 &lt;a href="https://www.diguage.com/post/gc-performance-real-qps/" target="_blank" rel="noopener">JVM GC 性能测试（三）：真实流量&lt;/a> 中，G1 GC 的惊艳表现，这里分别提供 Gen ZGC 和 G1 GC 两个配置。&lt;/p>
&lt;/div>
&lt;div class="admonitionblock tip">
&lt;table>
&lt;tbody>&lt;tr>
&lt;td class="icon">
&lt;i class="fa icon-tip" title="Tip">&lt;/i>
&lt;/td>
&lt;td class="content">
两个配置差距级小，为了方便复制粘贴，还是分两个来展示。
&lt;/td>
&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;/div>
&lt;div class="sect2">
&lt;h3 id="_gen_zgc_配置">Gen ZGC 配置&lt;/h3>
&lt;div class="paragraph">
&lt;p>追求极致低延迟，就上 GenZGC，它通过牺牲大约 10% 的吞吐量，换来无与伦比的低延时。&lt;/p>
&lt;/div>
&lt;div class="admonitionblock tip">
&lt;table>
&lt;tbody>&lt;tr>
&lt;td class="icon">
&lt;i class="fa icon-tip" title="Tip">&lt;/i>
&lt;/td>
&lt;td class="content">
注意：使用时，请修改日志目录！
&lt;/td>
&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">&lt;span class="c">## 变量配置 #######################################################################&lt;/span>
&lt;span class="c"># java -XshowSettings:all --展示所有配置项（测试发现也不全）&lt;/span>
&lt;span class="nt">-Dfile&lt;/span>.encoding&lt;span class="o">=&lt;/span>UTF-8

&lt;span class="c"># &lt;a href="https://zhuanlan.zhihu.com/p/455313866" target="_blank">https://zhuanlan.zhihu.com/p/455313866&lt;/a>&lt;/span>
&lt;span class="c"># &lt;a href="https://zhuanlan.zhihu.com/p/455746995" target="_blank">https://zhuanlan.zhihu.com/p/455746995&lt;/a>&lt;/span>
&lt;span class="c"># &lt;a href="https://blog.csdn.net/u014149685/article/details/83002405" target="_blank">https://blog.csdn.net/u014149685/article/details/83002405&lt;/a>&lt;/span>
&lt;span class="c"># 随机数来源&lt;/span>
&lt;span class="nt">-Djava&lt;/span>.security.egd&lt;span class="o">=&lt;/span>file:/dev/./urandom
&lt;span class="nt">-Djava&lt;/span>.security&lt;span class="o">=&lt;/span>file:/dev/./urandom

&lt;span class="c"># &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/net/doc-files/net-properties.html" target="_blank">https://docs.oracle.com/javase/8/docs/api/java/net/doc-files/net-properties.html&lt;/a>&lt;/span>
&lt;span class="c"># &lt;a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/net/doc-files/net-properties.html" target="_blank">https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/net/doc-files/net-properties.html&lt;/a>&lt;/span>
&lt;span class="c"># DNS 过期时间&lt;/span>
&lt;span class="nt">-Dnetworkaddress&lt;/span>.cache.ttl&lt;span class="o">=&lt;/span>10
&lt;span class="c">#&lt;/span>
&lt;span class="nt">-Dsun&lt;/span>.net.client.defaultConnectTimeout&lt;span class="o">=&lt;/span>60000
&lt;span class="nt">-Dsun&lt;/span>.net.client.defaultReadTimeout&lt;span class="o">=&lt;/span>60000
&lt;span class="c">#-Dsun.net.inetaddr.ttl=300&lt;/span>

&lt;span class="c"># &lt;a href="https://mdnice.com/writing/47e729bbf8e44431a396a481ed173dae" target="_blank">https://mdnice.com/writing/47e729bbf8e44431a396a481ed173dae&lt;/a>&lt;/span>
&lt;span class="nt">-Djava&lt;/span>.awt.headless&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>
&lt;span class="c"># &lt;a href="https://blog.csdn.net/maverick0/article/details/8282472" target="_blank">https://blog.csdn.net/maverick0/article/details/8282472&lt;/a>&lt;/span>
&lt;span class="nt">-Djmagick&lt;/span>.systemclassloader&lt;span class="o">=&lt;/span>no

&lt;span class="c"># From Cassandra&lt;/span>
&lt;span class="c"># On Java &amp;gt;= 9 Netty requires the io.netty.tryReflectionSetAccessible system property&lt;/span>
&lt;span class="c"># to be set to true to enable creation of direct buffers using Unsafe. Without it,&lt;/span>
&lt;span class="c"># this falls back to ByteBuffer.allocateDirect which has inferior performance and&lt;/span>
&lt;span class="c"># risks exceeding MaxDirectMemory&lt;/span>
&lt;span class="c"># &lt;a href="https://blog.csdn.net/jdcdev_/article/details/132843927" target="_blank">https://blog.csdn.net/jdcdev_/article/details/132843927&lt;/a>&lt;/span>
&lt;span class="nt">-Dio&lt;/span>.netty.tryReflectionSetAccessible&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>
&lt;span class="c"># 内部中间件&lt;/span>
&lt;span class="c"># 注意：一些中间件会内嵌 Netty，这里建议同步修改其相关参数配置。&lt;/span>
&lt;span class="nt">-Dump&lt;/span>.profiler.shade.io.netty.tryReflectionSetAccessible&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>
&lt;span class="nt">-Dtitan&lt;/span>.profiler.shade.io.netty.tryReflectionSetAccessible&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>

&lt;span class="c"># Revert changes in defaults introduced in &lt;a href="https://netty.io/news/2022/03/10/4-1-75-Final.html" target="_blank">https://netty.io/news/2022/03/10/4-1-75-Final.html&lt;/a>&lt;/span>
&lt;span class="nt">-Dio&lt;/span>.netty.allocator.useCacheForAllThreads&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>
&lt;span class="nt">-Dio&lt;/span>.netty.allocator.maxOrder&lt;span class="o">=&lt;/span>11

&lt;span class="c"># 内部中间件&lt;/span>
&lt;span class="c"># 理由上面已讲&lt;/span>
&lt;span class="nt">-Dump&lt;/span>.profiler.shade.io.netty.allocator.useCacheForAllThreads&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>
&lt;span class="nt">-Dump&lt;/span>.profiler.shade.io.netty.allocator.maxOrder&lt;span class="o">=&lt;/span>11

&lt;span class="c"># Byte Buddy 支持21&lt;/span>
&lt;span class="nt">-Dnet&lt;/span>.bytebuddy.experimental&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>
&lt;span class="nt">-Dpfinder&lt;/span>.shade.net.bytebuddy.experimental&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>



&lt;span class="c">## 参数配置 #####################################################################&lt;/span>

&lt;span class="c"># &lt;a href="https://jacoline.dev/inspect" target="_blank">https://jacoline.dev/inspect&lt;/a> -- JVM 参数诊断&lt;/span>
&lt;span class="c"># &lt;a href="https://chriswhocodes.com/corretto_jdk21_options.html" target="_blank">https://chriswhocodes.com/corretto_jdk21_options.html&lt;/a>&lt;/span>
&lt;span class="c"># &lt;a href="https://docs.oracle.com/en/java/javase/21/docs/specs/man/java.html" target="_blank">https://docs.oracle.com/en/java/javase/21/docs/specs/man/java.html&lt;/a>&lt;/span>

&lt;span class="c"># &lt;a href="https://blog.csdn.net/wxb880114/article/details/119888587" target="_blank">https://blog.csdn.net/wxb880114/article/details/119888587&lt;/a>&lt;/span>
&lt;span class="c"># &lt;a href="https://www.cnblogs.com/three-fighter/p/14644152.html" target="_blank">https://www.cnblogs.com/three-fighter/p/14644152.html&lt;/a>&lt;/span>
&lt;span class="c">#- &lt;a href="https://www.skjava.com/article/2134434173" target="_blank">https://www.skjava.com/article/2134434173&lt;/a>&lt;/span>

&lt;span class="c"># 解锁诊断参数&lt;/span>
&lt;span class="nt">-XX&lt;/span>:+UnlockDiagnosticVMOptions

&lt;span class="c"># 解锁试验参数&lt;/span>
&lt;span class="nt">-XX&lt;/span>:+UnlockExperimentalVMOptions

&lt;span class="c"># 启用 ZGC&lt;/span>
&lt;span class="nt">-XX&lt;/span>:+UseZGC
&lt;span class="c"># 启用分代ZGC&lt;/span>
&lt;span class="nt">-XX&lt;/span>:+ZGenerational

&lt;span class="c"># &lt;a href="https://tech.meituan.com/2020/08/06/new-zgc-practice-in-meituan.html" target="_blank">https://tech.meituan.com/2020/08/06/new-zgc-practice-in-meituan.html&lt;/a>&lt;/span>
&lt;span class="c"># 加快 GC 的时间和能力&lt;/span>
&lt;span class="nt">-XX&lt;/span>:ZAllocationSpikeTolerance&lt;span class="o">=&lt;/span>5
&lt;span class="nt">-XX&lt;/span>:ConcGCThreads&lt;span class="o">=&lt;/span>2
&lt;span class="nt">-XX&lt;/span>:ParallelGCThreads&lt;span class="o">=&lt;/span>4

&lt;span class="c"># G1 GC&lt;/span>
&lt;span class="c">#-XX:+UseG1GC&lt;/span>
&lt;span class="c">#-XX:MaxGCPauseMillis=50&lt;/span>

&lt;span class="c"># 初始堆大小，等价于 -XX:InitialHeapSize&lt;/span>
&lt;span class="nt">-Xms4608m&lt;/span>

&lt;span class="c"># 弱最大堆，尽量保持，但是可以突破&lt;/span>
&lt;span class="c">#-XX:SoftMaxHeapSize=3g&lt;/span>

&lt;span class="c"># 最大堆大小，等价于 -XX:MaxHeapSize&lt;/span>
&lt;span class="nt">-Xmx4608m&lt;/span>

&lt;span class="c"># 归还未使用的内存&lt;/span>
&lt;span class="c">#-XX:+ZUncommit&lt;/span>

&lt;span class="c"># 设置每个线程的堆栈大小，等价于 -XX:ThreadStackSize=512k&lt;/span>
&lt;span class="nt">-Xss512k&lt;/span>

&lt;span class="c"># &lt;a href="https://cloud.tencent.com/developer/article/1408384" target="_blank">https://cloud.tencent.com/developer/article/1408384&lt;/a>&lt;/span>
&lt;span class="c"># 本地内存大小&lt;/span>
&lt;span class="nt">-XX&lt;/span>:MaxDirectMemorySize&lt;span class="o">=&lt;/span>512m

&lt;span class="c"># &lt;a href="https://cloud.tencent.com/developer/article/2277327" target="_blank">https://cloud.tencent.com/developer/article/2277327&lt;/a>&lt;/span>
&lt;span class="c"># &lt;a href="https://cloud.tencent.com/developer/article/2277328" target="_blank">https://cloud.tencent.com/developer/article/2277328&lt;/a>&lt;/span>
&lt;span class="c"># &lt;a href="https://cloud.tencent.com/developer/article/2277329" target="_blank">https://cloud.tencent.com/developer/article/2277329&lt;/a>&lt;/span>
&lt;span class="c"># 元空间&lt;/span>
&lt;span class="c"># 设置为 256m 时，发生过一次频繁 GC 导致应用无法相应的问题&lt;/span>
&lt;span class="nt">-XX&lt;/span>:MetaspaceSize&lt;span class="o">=&lt;/span>512m
&lt;span class="c"># 最大元空间&lt;/span>
&lt;span class="nt">-XX&lt;/span>:MaxMetaspaceSize&lt;span class="o">=&lt;/span>512m

&lt;span class="c"># &lt;a href="https://cloud.tencent.com/developer/article/1408773" target="_blank">https://cloud.tencent.com/developer/article/1408773&lt;/a>&lt;/span>
&lt;span class="c"># &lt;a href="https://blog.csdn.net/lidf1992/article/details/75050219" target="_blank">https://blog.csdn.net/lidf1992/article/details/75050219&lt;/a>&lt;/span>
&lt;span class="c"># 编译代码缓存空间&lt;/span>
&lt;span class="nt">-XX&lt;/span>:ReservedCodeCacheSize&lt;span class="o">=&lt;/span>256m

&lt;span class="c"># &lt;a href="https://cloud.tencent.com/developer/article/1408827" target="_blank">https://cloud.tencent.com/developer/article/1408827&lt;/a>&lt;/span>
&lt;span class="c"># &lt;a href="https://malloc.se/blog/zgc-jdk15" target="_blank">https://malloc.se/blog/zgc-jdk15&lt;/a>&lt;/span>
&lt;span class="c"># &lt;a href="https://tinyzzh.github.io/java/jvm/2022/04/24/JVM_CompressedOops.html" target="_blank">https://tinyzzh.github.io/java/jvm/2022/04/24/JVM_CompressedOops.html&lt;/a>&lt;/span>
&lt;span class="c"># &lt;a href="https://www.cnblogs.com/star95/p/17512212.html" target="_blank">https://www.cnblogs.com/star95/p/17512212.html&lt;/a> -- 由于从 JDK15 开始，&lt;/span>
&lt;span class="c"># -XX:+UseCompressedClassPointers 与 -XX:-UseCompressedOops 之间的强&lt;/span>
&lt;span class="c"># 关联被打破，文章里关于上述这种搭配是不正确的。 TODO 可以从新测试验证一线。&lt;/span>
&lt;span class="c"># TODO 如果开启 -XX:+UseCompressedClassPointers，不确定 32M 是否够用？&lt;/span>
&lt;span class="c"># &lt;a href="https://www.zhihu.com/question/268392125" target="_blank">https://www.zhihu.com/question/268392125&lt;/a>&lt;/span>
&lt;span class="nt">-XX&lt;/span>:+UseCompressedClassPointers
&lt;span class="nt">-XX&lt;/span>:CompressedClassSpaceSize&lt;span class="o">=&lt;/span>48M

&lt;span class="c"># 关闭热度衰减&lt;/span>
&lt;span class="nt">-XX&lt;/span>:-UseCounterDecay

&lt;span class="c"># 内存占座&lt;/span>
&lt;span class="nt">-XX&lt;/span>:+AlwaysPreTouch

&lt;span class="c"># 禁止代码中显示调用GC&lt;/span>
&lt;span class="nt">-XX&lt;/span>:+DisableExplicitGC

&lt;span class="c"># 关闭安全点间隔&lt;/span>
&lt;span class="nt">-XX&lt;/span>:GuaranteedSafepointInterval&lt;span class="o">=&lt;/span>0

&lt;span class="c"># 避免循环无法进入安全点的问题&lt;/span>
&lt;span class="nt">-XX&lt;/span>:+UseCountedLoopSafepoints
&lt;span class="c"># &lt;a href="https://blog.csdn.net/m0_46596655/article/details/123606813" target="_blank">https://blog.csdn.net/m0_46596655/article/details/123606813&lt;/a>&lt;/span>
&lt;span class="nt">-XX&lt;/span>:LoopStripMiningIter&lt;span class="o">=&lt;/span>1000

&lt;span class="c"># 打印命令行参数&lt;/span>
&lt;span class="nt">-XX&lt;/span>:+PrintCommandLineFlags

&lt;span class="c"># 显式地并发处理 GC 调用&lt;/span>
&lt;span class="nt">-XX&lt;/span>:+ExplicitGCInvokesConcurrent

&lt;span class="c"># &lt;a href="https://panlw.github.io/15320998566522.html" target="_blank">https://panlw.github.io/15320998566522.html&lt;/a>&lt;/span>
&lt;span class="nt">-XX&lt;/span>:AutoBoxCacheMax&lt;span class="o">=&lt;/span>20000

&lt;span class="c"># &lt;a href="https://blog.csdn.net/zshake/article/details/88796414" target="_blank">https://blog.csdn.net/zshake/article/details/88796414&lt;/a>&lt;/span>
&lt;span class="c"># 省略异常栈信息从而快速抛出&lt;/span>
&lt;span class="nt">-XX&lt;/span>:-OmitStackTraceInFastThrow

&lt;span class="c"># &lt;a href="https://www.jianshu.com/p/c9259953ca38" target="_blank">https://www.jianshu.com/p/c9259953ca38&lt;/a>&lt;/span>
&lt;span class="c"># 致命错误日志文件&lt;/span>
&lt;span class="nt">-XX&lt;/span>:ErrorFile&lt;span class="o">=&lt;/span>/path/to/log/jvm/hs_err_%p.log

&lt;span class="c"># &lt;a href="https://blog.csdn.net/lusa1314/article/details/84134458" target="_blank">https://blog.csdn.net/lusa1314/article/details/84134458&lt;/a>&lt;/span>
&lt;span class="c"># &lt;a href="https://juejin.cn/post/7127557371932442632" target="_blank">https://juejin.cn/post/7127557371932442632&lt;/a>&lt;/span>
&lt;span class="c"># 当JVM发生OOM时，自动生成DUMP文件。&lt;/span>
&lt;span class="nt">-XX&lt;/span>:+HeapDumpOnOutOfMemoryError
&lt;span class="c"># 设置上述DUMP文件路径&lt;/span>
&lt;span class="nt">-XX&lt;/span>:HeapDumpPath&lt;span class="o">=&lt;/span>/path/to/log/jvm/

&lt;span class="c"># &lt;a href="https://juejin.cn/post/6959405798556434440" target="_blank">https://juejin.cn/post/6959405798556434440&lt;/a>&lt;/span>
&lt;span class="c"># 设置 JFR 相关参数&lt;/span>
&lt;span class="c"># TODO 感觉这里不全乎，似乎需要 -XX:+FlightRecorder 来启用&lt;/span>
&lt;span class="c"># TODO 似乎可以设置文件，例如： -XX:StartFlightRecording=duration=200s,filename=flight.jfr&lt;/span>
&lt;span class="c"># 不确定文件名是否可以这样配置，测试一下_%p-%t&lt;/span>
&lt;span class="c"># Amazon Corretto JDK OK；Eclipse Temurin 不识别，并且监控报错&lt;/span>
&lt;span class="c">#-XX:StartFlightRecording=delay=5s,disk=true,dumponexit=true,duration=24h,maxage=5d,maxsize=2g,filename=/path/to/log/jvm/jfr_%p-%t.jfr.log&lt;/span>
&lt;span class="c">#-XX:FlightRecorderOptions=maxchunksize=128m&lt;/span>

&lt;span class="c">#-XX:StringDeduplicationAgeThreshold=threshold? TODO 测试之后才可以定&lt;/span>

&lt;span class="c"># &lt;a href="https://zhuanlan.zhihu.com/p/111886882" target="_blank">https://zhuanlan.zhihu.com/p/111886882&lt;/a>&lt;/span>
&lt;span class="c"># &lt;a href="https://github.com/apache/cassandra/tree/trunk/conf" target="_blank">https://github.com/apache/cassandra/tree/trunk/conf&lt;/a>&lt;/span>
&lt;span class="c"># &lt;a href="https://github.com/elastic/elasticsearch/blob/main/distribution/src/config/jvm.options" target="_blank">https://github.com/elastic/elasticsearch/blob/main/distribution/src/config/jvm.options&lt;/a>&lt;/span>
&lt;span class="c"># java -Xlog:help&lt;/span>
&lt;span class="c"># 日志配置&lt;/span>
&lt;span class="nt">-Xlog&lt;/span>:gc&lt;span class="k">*&lt;/span>&lt;span class="o">=&lt;/span>debug,stringdedup&lt;span class="k">*&lt;/span>&lt;span class="o">=&lt;/span>debug,heap&lt;span class="k">*&lt;/span>&lt;span class="o">=&lt;/span>trace,age&lt;span class="k">*&lt;/span>&lt;span class="o">=&lt;/span>debug,promotion&lt;span class="k">*&lt;/span>&lt;span class="o">=&lt;/span>trace,jit&lt;span class="k">*&lt;/span>&lt;span class="o">=&lt;/span>info,safepoint&lt;span class="k">*&lt;/span>&lt;span class="o">=&lt;/span>debug:file&lt;span class="o">=&lt;/span>/path/to/log/jvm/gc_%p-%t.log:time,pid,tid,level,tags:filecount&lt;span class="o">=&lt;/span>10,filesize&lt;span class="o">=&lt;/span>500M
&lt;span class="c"># 分开设置可用，使用分开的配置&lt;/span>
&lt;span class="c">#-Xlog:gc*=debug,stringdedup*=debug,heap*=trace,age*=debug,promotion*=trace:file=/path/to/log/jvm/gc-%t.log:utctime,level,tags:filecount=10,filesize=200M&lt;/span>
&lt;span class="c">#-Xlog:jit*=info:file=/path/to/log/jvm/jit_compile-%t.log:utctime,level,tags:filecount=10,filesize=50M&lt;/span>
&lt;span class="c">#-Xlog:safepoint*=debug:file=/path/to/log/jvm/safepoint-%t.log:utctime,level,tags:filecount=10,filesize=50M&lt;/span>


&lt;span class="c"># &lt;a href="https://stackoverflow.com/a/44059335" target="_blank">https://stackoverflow.com/a/44059335&lt;/a>&lt;/span>
&lt;span class="c"># &lt;a href="https://openjdk.org/jeps/261" target="_blank">https://openjdk.org/jeps/261&lt;/a>&lt;/span>
&lt;span class="c"># &lt;a href="https://www.diguage.com/post/upgrade-to-openjdk21/" target="_blank">https://www.diguage.com/post/upgrade-to-openjdk21/&lt;/a> -- 内有详细介绍&lt;/span>
&lt;span class="c"># 开启模块权限：下面是D瓜哥需要的模块，请根据自己实际需求来调整。&lt;/span>
&lt;span class="nt">--add-exports&lt;/span> java.base/sun.security.action&lt;span class="o">=&lt;/span>ALL-UNNAMED
&lt;span class="nt">--add-opens&lt;/span> java.base/java.io&lt;span class="o">=&lt;/span>ALL-UNNAMED
&lt;span class="nt">--add-opens&lt;/span> java.base/java.lang.reflect&lt;span class="o">=&lt;/span>ALL-UNNAMED
&lt;span class="nt">--add-opens&lt;/span> java.base/java.lang&lt;span class="o">=&lt;/span>ALL-UNNAMED
&lt;span class="nt">--add-opens&lt;/span> java.base/java.math&lt;span class="o">=&lt;/span>ALL-UNNAMED
&lt;span class="nt">--add-opens&lt;/span> java.base/java.net&lt;span class="o">=&lt;/span>ALL-UNNAMED
&lt;span class="nt">--add-opens&lt;/span> java.base/java.security&lt;span class="o">=&lt;/span>ALL-UNNAMED
&lt;span class="nt">--add-opens&lt;/span> java.base/java.time&lt;span class="o">=&lt;/span>ALL-UNNAMED
&lt;span class="nt">--add-opens&lt;/span> java.base/java.util.concurrent.locks&lt;span class="o">=&lt;/span>ALL-UNNAMED
&lt;span class="nt">--add-opens&lt;/span> java.base/java.util.concurrent&lt;span class="o">=&lt;/span>ALL-UNNAMED
&lt;span class="nt">--add-opens&lt;/span> java.base/java.util&lt;span class="o">=&lt;/span>ALL-UNNAMED
&lt;span class="nt">--add-opens&lt;/span> java.base/jdk.internal.loader&lt;span class="o">=&lt;/span>ALL-UNNAMED
&lt;span class="c"># Netty 内部需要 &lt;a href="https://stackoverflow.com/a/57892679" target="_blank">https://stackoverflow.com/a/57892679&lt;/a>&lt;/span>
&lt;span class="c"># &lt;a href="https://github.com/netty/netty/issues/7769" target="_blank">https://github.com/netty/netty/issues/7769&lt;/a>&lt;/span>
&lt;span class="c"># &lt;a href="https://blog.csdn.net/thewindkee/article/details/123618476" target="_blank">https://blog.csdn.net/thewindkee/article/details/123618476&lt;/a>&lt;/span>
&lt;span class="nt">--add-opens&lt;/span> java.base/jdk.internal.misc&lt;span class="o">=&lt;/span>ALL-UNNAMED
&lt;span class="nt">--add-opens&lt;/span> java.base/sun.net.util&lt;span class="o">=&lt;/span>ALL-UNNAMED
&lt;span class="c"># 设置 -Dio.netty.tryReflectionSetAccessible=true 后，不设置该值也会报错&lt;/span>
&lt;span class="nt">--add-opens&lt;/span> java.base/java.nio&lt;span class="o">=&lt;/span>ALL-UNNAMED
&lt;span class="nt">--add-opens&lt;/span> java.base/sun.nio.ch&lt;span class="o">=&lt;/span>ALL-UNNAMED
&lt;span class="nt">--add-opens&lt;/span> java.base/sun.reflect.generics.reflectiveObjects&lt;span class="o">=&lt;/span>ALL-UNNAMED
&lt;span class="nt">--add-opens&lt;/span> java.base/sun.util.calendar&lt;span class="o">=&lt;/span>ALL-UNNAMED
&lt;span class="nt">--add-opens&lt;/span> java.management/com.sun.jmx.mbeanserver&lt;span class="o">=&lt;/span>ALL-UNNAMED
&lt;span class="nt">--add-opens&lt;/span> java.management/java.lang.management&lt;span class="o">=&lt;/span>ALL-UNNAMED
&lt;span class="nt">--add-opens&lt;/span> java.management/sun.management&lt;span class="o">=&lt;/span>ALL-UNNAMED
&lt;span class="nt">--add-opens&lt;/span> jdk.management/com.sun.management.internal&lt;span class="o">=&lt;/span>ALL-UNNAMED&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>使用 OpenRewrite 优化代码</title><link>https://www.diguage.com/post/optimize-code-using-openrewrite/</link><pubDate>Tue, 07 May 2024 17:48:49 +0800</pubDate><guid>https://www.diguage.com/post/optimize-code-using-openrewrite/</guid><description>&lt;div class="paragraph">
&lt;p>在 &lt;a href="https://www.diguage.com/post/upgrade-to-openjdk21/" target="_blank" rel="noopener">OpenJDK 21 升级指南&lt;/a> 中提到， OpenRewrite 可以帮忙解决一些升级 OpenJDK 中发现的问题。随着不断的探索，D瓜哥发现，OpenRewrite 的功能远远不止这些。下面就挑选一些重要的功能来给大家做一些讲解。&lt;/p>
&lt;/div>
&lt;div class="admonitionblock tip">
&lt;table>
&lt;tbody>&lt;tr>
&lt;td class="icon">
&lt;i class="fa icon-tip" title="Tip">&lt;/i>
&lt;/td>
&lt;td class="content">
为了方便查看改动点，建议将代码交给版本管理工具，比如 Git，来管理。
&lt;/td>
&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_快速入门">快速入门&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>OpenRewrite 是一套对源码做重构的大型生态系统，可以帮助开发人员减少技术债。所以，它提供了一套的相关工具。对于大多数开发人员来说，最方便的也许就是基于 Maven 插件的相关工具。这里以对 Java 的 &lt;code>import&lt;/code> 语句排序来为示例展示一下 OpenRewrite 的使用方法。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在项目的 &lt;code>pom.xml&lt;/code> 中增加如下配置：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="xml">&lt;span class="c">&amp;lt;!-- @author: D瓜哥 · &lt;a href="https://www.diguage.com" target="_blank">https://www.diguage.com&lt;/a> --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;plugin&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.openrewrite.maven&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>rewrite-maven-plugin&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>5.30.0&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;configuration&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;activeRecipes&amp;gt;&lt;/span>
 &lt;span class="c">&amp;lt;!-- import 排序 --&amp;gt;&lt;/span>
 &lt;span class="c">&amp;lt;!-- &lt;a href="https://docs.openrewrite.org/recipes/java/orderimports" target="_blank">https://docs.openrewrite.org/recipes/java/orderimports&lt;/a> --&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;recipe&amp;gt;&lt;/span>org.openrewrite.java.OrderImports&lt;span class="nt">&amp;lt;/recipe&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;/activeRecipes&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/plugin&amp;gt;&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>然后执行如下命令：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">mvn rewrite:run&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>执行会输出一大堆东西，这里就不再展示，执行完成后，使用 Git 查看一下改动点。如下图：&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/open-rewrite/order-imports.png" alt="使用 OpenRewrite 排序 import 的改动点" width="95%"/>
&lt;/div>
&lt;div class="title">图 1. 使用 OpenRewrite 排序 import 的改动点&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>将这些修改点提交，就完成了一次优化， OpenRewrite 的基本使用，你学废了吗？&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>这里再多说一句： 由于 OpenRewrite 精巧的设计，可以通过使用不同的处方，进行各种各样的优化。所以，最重要的一点就是了解 OpenRewrite 各种不同的处方及使用办法。下面就介绍一下常用的处方及使用办法。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_常用处方">常用处方&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="sect2">
&lt;h3 id="upgrade-java21">升级到 Java 21&lt;/h3>
&lt;div class="paragraph">
&lt;p>在 &lt;a href="https://www.diguage.com/post/upgrade-to-openjdk21/" target="_blank" rel="noopener">OpenJDK 21 升级指南&lt;/a> 中提到，可以使用“科技与狠活”来解决很多升级中遇到的问题。这里就来实操一把。&lt;/p>
&lt;/div></description></item><item><title>OpenJDK 21 升级指南</title><link>https://www.diguage.com/post/upgrade-to-openjdk21/</link><pubDate>Mon, 06 May 2024 19:50:22 +0800</pubDate><guid>https://www.diguage.com/post/upgrade-to-openjdk21/</guid><description>&lt;div class="paragraph">
&lt;p>&lt;a href="https://openjdk.org/projects/jdk/21/" target="_blank" rel="noopener">OpenJDK 21&lt;/a> 已经发布半年有余，在这个版本中， &lt;a href="https://openjdk.org/jeps/439" target="_blank" rel="noopener">Generational ZGC&lt;/a> 也一起发布了。在 &lt;a href="https://malloc.se/blog/zgc-jdk16" target="_blank" rel="noopener">ZGC | What’s new in JDK 16&lt;/a> 中， &lt;a href="https://malloc.se/" target="_blank" rel="noopener">Per Lidén&lt;/a> 宣称，将 ZGC 的最大停顿时间从 10ms 降低到了 1ms。再加上 &lt;a href="https://www.diguage.com/post/gc-performance-incremental-qps/" target="_blank" rel="noopener">JVM GC 性能测试（二）：递增流量&lt;/a> 和 &lt;a href="https://www.diguage.com/post/gc-performance-real-qps/" target="_blank" rel="noopener">JVM GC 性能测试（三）：真实流量&lt;/a> 文中，GenZGC 的惊艳表现，这些种种先进技术，着实充满诱惑，忍不住想吃口螃蟹 🦀。这篇文章，D瓜哥就来分享一下，自己在升级 OpenJDK 21 中的一些经验。&lt;/p>
&lt;/div>
&lt;div class="admonitionblock tip">
&lt;table>
&lt;tbody>&lt;tr>
&lt;td class="icon">
&lt;i class="fa icon-tip" title="Tip">&lt;/i>
&lt;/td>
&lt;td class="content">
本文仅介绍升级 OpenJDK 的相关内容，ZGC 原理等会专门撰文介绍。
&lt;/td>
&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_升级依赖">升级依赖&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>依赖升级不是 KPI，也不涉及需求交付。所以，大多数项目的依赖自从项目创建后，就很少升级。如果想比较顺利地将项目升级到 OpenJDK 21，那么，先将项目所用依赖做一个整体升级是一个事半功倍的操作。可以直接使用 Maven 命令来检查依赖可以升级的情况：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">mvn versions:display-dependency-updates&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>执行该命令后，会有如下类似输出：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">&lt;span class="c"># 检查依赖升级情况&lt;/span>
&lt;span class="nv">$ &lt;/span>mvn versions:display-dependency-updates

&lt;span class="c"># 此处省略一万个字&lt;/span>
&lt;span class="c"># @author: D瓜哥 · &lt;a href="https://www.diguage.com" target="_blank">https://www.diguage.com&lt;/a>&lt;/span>

&lt;span class="o">[&lt;/span>INFO] org.springframework:spring-aop ......... 5.3.33 -&amp;gt; 6.1.6
&lt;span class="o">[&lt;/span>INFO] org.springframework:spring-aspects ..... 5.3.33 -&amp;gt; 6.1.6
&lt;span class="o">[&lt;/span>INFO] org.springframework:spring-beans ....... 5.3.33 -&amp;gt; 6.1.6
&lt;span class="o">[&lt;/span>INFO] org.springframework:spring-context ..... 5.3.33 -&amp;gt; 6.1.6
&lt;span class="o">[&lt;/span>INFO] org.springframework:spring-core ........ 5.3.33 -&amp;gt; 6.1.6
&lt;span class="o">[&lt;/span>INFO] org.springframework:spring-jdbc ........ 5.3.33 -&amp;gt; 6.1.6
&lt;span class="o">[&lt;/span>INFO] org.springframework:spring-web ......... 5.3.33 -&amp;gt; 6.1.6

&lt;span class="o">[&lt;/span>INFO] org.mybatis:mybatis-2-spring ............ 1.1.0 -&amp;gt; 1.2.0
&lt;span class="o">[&lt;/span>INFO] org.mybatis:mybatis-spring .............. 2.1.1 -&amp;gt; 2.1.2

&lt;span class="o">[&lt;/span>INFO] org.junit.jupiter:junit-jupiter ........ 5.9.3 -&amp;gt; 5.10.2
&lt;span class="o">[&lt;/span>INFO] org.junit.jupiter:junit-jupiter-api .... 5.9.3 -&amp;gt; 5.10.2&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>JVM GC 性能测试（三）：真实流量</title><link>https://www.diguage.com/post/gc-performance-real-qps/</link><pubDate>Wed, 01 May 2024 12:12:12 +0800</pubDate><guid>https://www.diguage.com/post/gc-performance-real-qps/</guid><description>&lt;div class="paragraph">
&lt;p>&lt;strong>JVM GC 性能测试系列&lt;/strong>:&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-comparison-method/" target="_blank" rel="noopener">JVM GC 性能对比方法&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-same-qps/" target="_blank" rel="noopener">JVM GC 性能测试（一）：相同流量&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-incremental-qps/" target="_blank" rel="noopener">JVM GC 性能测试（二）：递增流量&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-real-qps/" target="_blank" rel="noopener">JVM GC 性能测试（三）：真实流量&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;hr/>
&lt;div class="paragraph">
&lt;p>书接上文，在 &lt;a href="https://www.diguage.com/post/gc-performance-incremental-qps/" target="_blank" rel="noopener">JVM GC 性能测试（二）：递增流量&lt;/a> 的最后，D瓜哥提到了一个问题，对于在 &lt;a href="https://www.diguage.com/post/gc-performance-same-qps/" target="_blank" rel="noopener">JVM GC 性能测试（一）：相同流量&lt;/a> 和 &lt;a href="https://www.diguage.com/post/gc-performance-incremental-qps/" target="_blank" rel="noopener">JVM GC 性能测试（二）：递增流量&lt;/a> 中存在的巨大 QPS 差异疑惑不解。所以，D瓜哥决定将测试机器接入到线上环境，在真实访问中，观察各个 GC 的表现。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_一言以蔽之">一言以蔽之&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>J21-Gen-ZGC 和 J21-G1 无论在稳定性，吞吐量以及响应时效性上都非常优秀。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>再极端峰值情况，J21-G1 是更好的选择，更加稳定，不容易出凸点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>日常使用，J21-Gen-ZGC 响应性更好，接口耗时更低。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="sidebarblock">
&lt;div class="content">
&lt;div class="paragraph">
&lt;p>鉴于 OpenJDK 21 G1 GC 一如既往的惊艳表现，D瓜哥准备整理一下 G1 GC 的主要优化，敬请关注： &lt;a href="https://www.diguage.com/post/main-optimization-of-garbage-first-collector/" target="_blank" rel="noopener">Java G1 垃圾收集器主要优化&lt;/a>。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_服务调用监控数据">1. 服务调用监控数据&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>监控服务调用的相关数据，这是对于用户来说，感知最强烈的相关数据，也是直接关系到服务质量的数据。&lt;/p>
&lt;/div>
&lt;div class="sect2">
&lt;h3 id="_服务调用次数">1.1. 服务调用次数&lt;/h3>
&lt;div class="paragraph">
&lt;p>从调用次数上来看，五个分组没有大的变化，可以说根本没有达到系统的极限峰值。当然，这才是正常现象，如果日常运行都爆峰值，那说明系统早该扩容了。&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/gc-performance-3/api-qps-second.jpg" alt="服务调用次数（秒级）" width="95%"/>
&lt;/div>
&lt;div class="title">图 1. 服务调用次数（秒级）&lt;/div>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/gc-performance-3/api-qps-minute.jpg" alt="服务调用次数（分钟级）" width="95%"/>
&lt;/div>
&lt;div class="title">图 2. 服务调用次数（分钟级）&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect2">
&lt;h3 id="api-qps-time">1.2. 服务调用耗时&lt;/h3>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>整体上讲，J21-Gen-ZGC 的耗时更短，从数据上来看，TP999 能比 J21-G1 的少 10~20ms；TP99 更加夸张，J21-Gen-ZGC 的耗时只有 J21-G1 的一半。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>J21-Gen-ZGC 和 J21-G1 还是一如既往的稳。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>这次测试中，J17-ZGC 也很稳，有些出乎意料。但是，结合下面 &lt;a href="#jvm-cpu">JVM CPU 使用率&lt;/a> 和 &lt;a href="#os-cpu">系统 CPU 使用率&lt;/a> 来看，J17-ZGC 和 J21-ZGC 的 CPU 使用率早早就达到 90%+，再结合上面两个测试，从稳定性来看，J17-ZGC 和 J21-ZGC 只能被排除掉。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div></description></item><item><title>JVM GC 性能测试（二）：递增流量</title><link>https://www.diguage.com/post/gc-performance-incremental-qps/</link><pubDate>Tue, 30 Apr 2024 00:29:00 +0800</pubDate><guid>https://www.diguage.com/post/gc-performance-incremental-qps/</guid><description>&lt;div class="paragraph">
&lt;p>&lt;strong>JVM GC 性能测试系列&lt;/strong>:&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-comparison-method/" target="_blank" rel="noopener">JVM GC 性能对比方法&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-same-qps/" target="_blank" rel="noopener">JVM GC 性能测试（一）：相同流量&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-incremental-qps/" target="_blank" rel="noopener">JVM GC 性能测试（二）：递增流量&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-real-qps/" target="_blank" rel="noopener">JVM GC 性能测试（三）：真实流量&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;hr/>
&lt;div class="paragraph">
&lt;p>在上一篇文章 &lt;a href="https://www.diguage.com/post/gc-performance-same-qps/" target="_blank" rel="noopener">JVM GC 性能测试（一）：相同流量&lt;/a> 中，D瓜哥使用一个总量请求对所有分组的所有机器进行性能测试。但是，经过测试发现了一个问题，同时产生了另外一个问题，有两个问题没有得到很好的解答：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>由于服务响应时长直接关系到服务调用次数，当某一台机器出现问题时，整体调用次数就会急剧下降，调用次数加不上去。一个机器出问题，所有机器的访问量就上不去了。这是测试中发现的一个问题。当然，这属于测试工具的问题，别不是 GC 的问题。但是，也影响到我们的压测，也需要解决。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>上次测试，这是针对某一个指定服务调用量进行性能测试，那么，无法确定每个 GC 能支撑的极限调用峰值。另外，在极限峰值和超极限峰值的情况下，各个 GC 的表现如何？这个也有待验证。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="paragraph">
&lt;p>针对上述两个问题，设计了本次测试。测试方法如下：&lt;/p>
&lt;/div>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>各个分组使用一套相同的流量策略：&lt;/p>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>各个分组几乎同时开始执行测试任务；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用量从低到高，以此同时使用相关的调用量进行测试；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>除最开始预热阶段的调用量外，后续每个调用量都持续进行十分钟的测试。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>针对每个 GC 分组单独设定一套调用发量程序，这个保证各个 GC 分组直接不相互影响。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最后，再分析调用量相同时段的各个 GC 表现，就可以看到各个 GC 的极限峰值。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="admonitionblock tip">
&lt;table>
&lt;tbody>&lt;tr>
&lt;td class="icon">
&lt;i class="fa icon-tip" title="Tip">&lt;/i>
&lt;/td>
&lt;td class="content">
为了保留更多细节，本文所有截图都是在 34 吋带鱼屏下，使用全屏模式展示并截图的。如果看不清楚，可以右击在新页面打开图片来查看。
&lt;/td>
&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;/div>
&lt;div class="paragraph">
&lt;p>具体流量及时间段：&lt;/p>
&lt;/div>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>750， 23:14:30 ~ 23:19:30&lt;/p>
&lt;/li>
&lt;li>
&lt;p>800， 23:19:30 ~ 23:29:30&lt;/p>
&lt;/li>
&lt;li>
&lt;p>850， 23:29:30 ~ 23:39:30&lt;/p>
&lt;/li>
&lt;li>
&lt;p>900， 23:39:30 ~ 23:49:30&lt;/p>
&lt;/li>
&lt;li>
&lt;p>950， 23:49:30 ~ 23:59:30&lt;/p>
&lt;/li>
&lt;li>
&lt;p>1000，23:59:30 ~ 00:09:30&lt;/p>
&lt;/li>
&lt;li>
&lt;p>1050，00:09:30 ~ 00:19:30&lt;/p>
&lt;/li>
&lt;li>
&lt;p>1100，00:19:30 ~ 00:29:30&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div></description></item><item><title>JVM GC 性能测试（一）：相同流量</title><link>https://www.diguage.com/post/gc-performance-same-qps/</link><pubDate>Thu, 25 Apr 2024 22:02:47 +0800</pubDate><guid>https://www.diguage.com/post/gc-performance-same-qps/</guid><description>&lt;div class="paragraph">
&lt;p>&lt;strong>JVM GC 性能测试系列&lt;/strong>:&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-comparison-method/" target="_blank" rel="noopener">JVM GC 性能对比方法&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-same-qps/" target="_blank" rel="noopener">JVM GC 性能测试（一）：相同流量&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-incremental-qps/" target="_blank" rel="noopener">JVM GC 性能测试（二）：递增流量&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-real-qps/" target="_blank" rel="noopener">JVM GC 性能测试（三）：真实流量&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;hr/>
&lt;div class="paragraph">
&lt;p>在上一篇文章 &lt;a href="https://www.diguage.com/post/gc-performance-comparison-method/" target="_blank" rel="noopener">JVM GC 性能对比方法&lt;/a> 介绍了性能对比的方法，这篇文章就根据该方法对上述提到的5种 JVM GC 进行性能测试。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在正式测试之前，D瓜哥进行了多次小流量试探性测试，来探索一个合适的量。找到一个比较平稳的量后，乘以机器数量，获得一个每秒总计请求量，最后使用该总量数据去做压测。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>根据多次测试的数据来看，最后选择的是每台每秒 500 QPS，5 个分组，每个分组 5 台机器，所以，每秒的请求总量是： 500 * 5 * 5 = 12500 QPS；每个分组每分钟的总量是：500 * 5 * 60 = 150000 QPS。使用每台机器以此使用 100 QPS，200 QPS，300 QPS，400 QPS 各运行一分钟来对系统进行预热。最后以每台每秒 500 QPS 的访问量来对测试机器进行持续十分钟的性能测试，最后分析这十分钟的相关数据。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_一言以蔽之">一言以蔽之&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>服务稳定性：J21-Gen-ZGC、J21-G1、J8-G1 稳定性最好；J17-ZGC 有轻微波动；J21-ZGC 有剧烈波动；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>服务耗时 TP999：J21-Gen-ZGC &amp;lt; J17-ZGC &amp;lt; J21-G1 &amp;lt; J8-G1 &amp;lt; J21-ZGC；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CPU 消耗：J21-G1 &amp;lt; J8-G1 &amp;lt; J17-ZGC &amp;lt; J21-Gen-ZGC &amp;lt; J21-ZGC；&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>JVM GC 性能对比方法</title><link>https://www.diguage.com/post/gc-performance-comparison-method/</link><pubDate>Wed, 24 Apr 2024 19:52:47 +0800</pubDate><guid>https://www.diguage.com/post/gc-performance-comparison-method/</guid><description>&lt;div class="paragraph">
&lt;p>&lt;strong>JVM GC 性能测试系列&lt;/strong>:&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-comparison-method/" target="_blank" rel="noopener">JVM GC 性能对比方法&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-same-qps/" target="_blank" rel="noopener">JVM GC 性能测试（一）：相同流量&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-incremental-qps/" target="_blank" rel="noopener">JVM GC 性能测试（二）：递增流量&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-real-qps/" target="_blank" rel="noopener">JVM GC 性能测试（三）：真实流量&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;hr/>
&lt;div class="paragraph">
&lt;p>现在部门内部绝大部分应用都还在使用 OpenJDK 8，计划推进部门升级 JDK 到 OpenJDK21。本着实事求是，用数据说话的原则，准备对如下 GC 做性能测试：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>OpenJDK 8 G1 GC（以下称 J8-G1。具体版本号：1.8.0_321-b07。）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>OpenJDK 17 ZGC（以下称 J17-ZGC。具体版本号：17.0.9+9。）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>OpenJDK 21 G1（以下称 J21-G1。具体版本号：21.0.2+13-LTS。）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>OpenJDK 21 ZGC（以下称 J21-ZGC。具体版本号：21.0.2+13-LTS。）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>OpenJDK 21 Gen ZGC（以下称 J21-Gen-ZGC。具体版本号：21.0.2+13-LTS。）&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="admonitionblock note">
&lt;table>
&lt;tbody>&lt;tr>
&lt;td class="icon">
&lt;i class="fa icon-note" title="Note">&lt;/i>
&lt;/td>
&lt;td class="content">
所有 OpenJDK 版本都是选用相同大版本号里的最高的版本。所有的机器都是 4C8G 的配置，JVM 堆栈内存设置为 4608M 。
&lt;/td>
&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;/div>
&lt;div class="paragraph">
&lt;p>为了减少不必要的干扰，JVM 相关参数也尽可能做到了一致或者接近。（等测试完，D瓜哥会把相关参数也分享出来。）&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_测试对象">测试对象&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>由于D瓜哥所处的部门是一个直接面向用户的线上业务部门，所以，大部分系统是直接面对用户，接受用户访问的在线业务系统。所以，为了服务线上业务系统的需求，测试对象的选择就限定在了类似的场景中。测试对象是线上接受用户访问的一个服务。结构如下：&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/gc-performance/api.svg" alt="压测接口依赖关系图" width="95%"/>
&lt;/div>
&lt;div class="title">图 1. 压测接口依赖关系图&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>该接口有外部依赖服务，也有数据库查询，是一个微服务架构下典型的在线服务接口。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_测试方法">测试方法&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>原本计划是想直接通过上线，将线上不同分组的机器使用不同的 GC 来做测试，但是，这样面临好几个问题：&lt;/p>
&lt;/div></description></item><item><title>JVM 剖析花园：2 - 透明大页</title><link>https://www.diguage.com/post/jvm-anatomy-quarks-02-transparent-huge-pages/</link><pubDate>Sat, 13 Jan 2024 19:24:37 +0800</pubDate><guid>https://www.diguage.com/post/jvm-anatomy-quarks-02-transparent-huge-pages/</guid><description>&lt;div class="sect1">
&lt;h2 id="_问题">问题&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>什么是大页（Large Page）？什么是透明大页（Transparent Huge Page）？它对我有什么帮助？&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_理论">理论&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>虚拟内存现在已被视为理所当然。现在只有少数人还记得，更不用说做一些“真实模式”编程了，在这种情况下，你会接触到实际的物理内存。相反，每个进程都有自己的虚拟内存空间，该空间被映射到实际内存上。例如，两个进程在相同的虚拟地址 &lt;code>0x42424242&lt;/code> 上拥有不同的数据，而这些数据将由不同的物理内存支持。现在，当程序访问该地址时，应将虚拟地址转换为物理地址。&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/os/virtual-address-space-and-physical-address-space-relationship.svg" alt="虚拟内存地址与物理内存地址之间的关系" width="95%"/>
&lt;/div>
&lt;div class="title">图 1. 虚拟内存地址与物理内存地址之间的关系&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>这通常由操作系统维护 &lt;a href="https://en.wikipedia.org/wiki/Page_table" target="_blank" rel="noopener">“页表”&lt;/a>，硬件通过“页表遍历”来实现地址转换。如果在页面粒度上维护翻译，整个过程就会变得简单。但这样做的成本并不低，而且每次内存访问都需要这样做！因此，还需要对最新的翻译进行小型缓存，即 &lt;a href="https://en.wikipedia.org/wiki/Translation_lookaside_buffer" target="_blank" rel="noopener">转译后备缓冲区（Translation Lookaside Buffer (TLB)）&lt;/a>。TLB 通常很小，只有不到 100 个条目，因为它的速度至少要与 L1 缓存相当，甚至更快。对于许多工作负载来说，TLB 未命中和相关的页表遍历需要大量时间。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>既然我们无法将 TLB 做得更大，那么我们可以做其他事情：制作更大的页面！大多数硬件有 4K 基本页和 2M/4M/1G “大页”。用更大的页来覆盖相同的区域，还能使页表本身更小，从而降低页表遍历的成本。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在 Linux 世界中，至少有两种不同的方法可以在应用程序中实现这一点：&lt;/p>
&lt;/div>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.kernel.org/doc/Documentation/vm/hugetlbpage.txt" target="_blank" rel="noopener">&lt;strong>hugetlbfs&lt;/strong>&lt;/a>。切出系统内存的一部分，将其作为虚拟文件系统公开，让应用程序通过 &lt;code>mmap(2)&lt;/code> 从其中获取。这是一个特殊的接口，需要操作系统配置和应用程序更改才能使用。这也是一种“要么全有，要么全无”的交易：分配给 &lt;code>hugetlbfs&lt;/code>（持久部分）的空间不能被普通进程使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.kernel.org/doc/Documentation/vm/transhuge.txt" target="_blank" rel="noopener">&lt;strong>透明大页（Transparent Huge Pages (THP)）&lt;/strong>&lt;/a>。让应用程序像往常一样分配内存，但尽量以透明方式为应用程序提供大容量页面支持的存储空间。理想情况下，不需要更改应用程序，但我们会看到应用程序如何从了解 THP 的可用性中获益。但在实际应用中，会产生内存开销（因为会为小文件分配整个大页面）或时间开销（因为 THP 有时需要对内存进行碎片整理以分配页面）。好在有一个中间方案：通过 &lt;code>madvise(2)&lt;/code> 可以让应用程序告诉 Linux 在哪里使用 THP。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="paragraph">
&lt;p>不明白为什么术语中会交替使用 &amp;#34;large &amp;#34;和 &amp;#34;huge&amp;#34;。总之，OpenJDK 支持这两种模式：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">&lt;span class="nv">$ &lt;/span>java &lt;span class="nt">-XX&lt;/span>:+PrintFlagsFinal 2&amp;gt;&amp;amp;1 | &lt;span class="nb">grep &lt;/span>Huge
 bool UseHugeTLBFS &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span> &lt;span class="o">{&lt;/span>product&lt;span class="o">}&lt;/span> &lt;span class="o">{&lt;/span>default&lt;span class="o">}&lt;/span>
 bool UseTransparentHugePages &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span> &lt;span class="o">{&lt;/span>product&lt;span class="o">}&lt;/span> &lt;span class="o">{&lt;/span>default&lt;span class="o">}&lt;/span>
&lt;span class="nv">$ &lt;/span>java &lt;span class="nt">-XX&lt;/span>:+PrintFlagsFinal 2&amp;gt;&amp;amp;1 | &lt;span class="nb">grep &lt;/span>LargePage
 bool UseLargePages &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span> &lt;span class="o">{&lt;/span>pd product&lt;span class="o">}&lt;/span> &lt;span class="o">{&lt;/span>default&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>JVM 剖析花园：1 - 锁粗化及循环</title><link>https://www.diguage.com/post/jvm-anatomy-quarks-01-lock-coarsening-for-loops/</link><pubDate>Sat, 13 Jan 2024 16:08:36 +0800</pubDate><guid>https://www.diguage.com/post/jvm-anatomy-quarks-01-lock-coarsening-for-loops/</guid><description>&lt;div class="quoteblock">
&lt;blockquote>
&lt;div class="paragraph">
&lt;p>“JVM 剖析花园”是由 JVM 研发专家及性能极客 &lt;a href="https://shipilev.net/" target="_blank" rel="noopener">Aleksey Shipilëv&lt;/a> 撰写的一个系列文章，专门介绍一些有关 JVM 的基本知识。笔者也是前几年无意间发现的一片宝藏文章。早就有翻译过来，介绍给大家的想法，可惜一直未能付诸实践。最近在查资料时，无意间又翻到了这个系列，遂下定决心，完成这个萌发已久的小想法。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>为了便于理解，对该系列的名字做了微调，原文是“JVM Anatomy Quarks”，将原文的“Quarks”（夸克）翻译为了“花园”。&lt;/p>
&lt;/div>
&lt;/blockquote>
&lt;/div>
&lt;div class="paragraph">
&lt;p>“JVM 解剖花园”是一个正在进行中的小型系列文章，每篇文章都会介绍一些有关 JVM 的基本知识。这个名字强调了一个事实，即单篇文章不能孤立地看待，这里描述的大部分内容都会很容易地相互影响。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>阅读这篇文章大约需要 5-10 分钟。因此，它只针对单一主题、单一测试、单一基准和单一观察进行深入探讨。这里的证据和讨论可能是轶事，并没有对错误、一致性、写作风格、语法和语义错误、重复或一致性进行实际审查。请自行承担使用和/或信任的风险。&lt;/p>
&lt;/div>
&lt;div class="admonitionblock note">
&lt;table>
&lt;tbody>&lt;tr>
&lt;td class="icon">
&lt;i class="fa icon-note" title="Note">&lt;/i>
&lt;/td>
&lt;td class="content">
以上是该系列介绍。这里介绍一次，后续文章不再赘述。
&lt;/td>
&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_问题">问题&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>众所周知，Hotspot 可以进行 &lt;a href="https://en.wikipedia.org/wiki/Java_performance#Escape_analysis_and_lock_coarsening" target="_blank" rel="noopener">锁粗化优化&lt;/a>，有效合并多个相邻的锁定块，从而减少锁定开销。它能有效地对如下代码做优化：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="java">&lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="c1">// statements 1&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="c1">// statements 2&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>优化后：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="java">&lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="c1">// statements 1&lt;/span>
 &lt;span class="c1">// statements 2&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>现在，今天提出的一个有趣问题是：Hotspot 是否会对循环进行这种优化？例如：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="java">&lt;span class="k">for&lt;/span> &lt;span class="o">(...)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="c1">// something&lt;/span>
 &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>是否会被优化成如下这样：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="java">&lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="k">for&lt;/span> &lt;span class="o">(...)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="c1">// something&lt;/span>
 &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>理论上，没有什么能阻止我们这样做。我们甚至可以把这种优化看作是 &lt;a href="https://en.wikipedia.org/wiki/Loop_unswitching" target="_blank" rel="noopener">循环判断外提&lt;/a>，只不过这里是针对锁而已。然而，这样做的缺点是有可能使锁变得过于粗糙，从而导致特定线程在执行大循环时占用锁。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_实验">实验&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>要回答这个问题，最简单的方法就是找到当前 Hotspot 优化的正面证据。幸运的是，有了 &lt;a href="https://github.com/openjdk/jmh" target="_blank" rel="noopener">JMH&lt;/a>，这一切都变得非常简单。它不仅有助于建立基准，还有助于工程中最重要的部分—​基准分析。让我们从一个简单的基准检查程序开始：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="java">&lt;span class="nd">@Fork&lt;/span>&lt;span class="o">(...,&lt;/span> &lt;span class="n">jvmArgsPrepend&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="s">&amp;#34;-XX:-UseBiasedLocking&amp;#34;&lt;/span>&lt;span class="o">})&lt;/span>
&lt;span class="nd">@State&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">Scope&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Benchmark&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LockRoach&lt;/span> &lt;span class="o">{&lt;/span> &lt;i class="conum" data-value="1">&lt;/i>&lt;b>(1)&lt;/b>
 &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">;&lt;/span>

 &lt;span class="nd">@Benchmark&lt;/span>
 &lt;span class="nd">@CompilerControl&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">CompilerControl&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Mode&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">DONT_INLINE&lt;/span>&lt;span class="o">)&lt;/span>
 &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="n">x&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mh">0x42&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="colist arabic">
&lt;table>
&lt;tbody>&lt;tr>
&lt;td>&lt;i class="conum" data-value="1">&lt;/i>&lt;b>1&lt;/b>&lt;/td>
&lt;td>完整代码在 &lt;a href="https://shipilev.net/jvm/anatomy-quarks/1-lock-coarsening-for-loops/LockRoach.java" target="_blank" rel="noopener">这里&lt;/a>。&lt;/td>
&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;/div>
&lt;div class="paragraph">
&lt;p>这里有几个重要的技巧：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>使用 &lt;code>-XX:-UseBiasedLocking&lt;/code> 禁用偏向锁可以避免更长的预热时间，因为偏向锁不会立即启动，而是会在初始化阶段等待 5 秒（参见 &lt;code>BiasedLockingStartupDelay&lt;/code> 选项）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>禁用 &lt;code>@Benchmark&lt;/code> 的方法内联有助于在反汇编时将其分离。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>增加一个神奇的数字 &lt;code>0x42&lt;/code>，有助于在反汇编中快速找到增量。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Spring Boot 应用程序浪费的内存</title><link>https://www.diguage.com/post/memory-wasted-by-spring-boot-application/</link><pubDate>Mon, 08 Jan 2024 23:12:14 +0800</pubDate><guid>https://www.diguage.com/post/memory-wasted-by-spring-boot-application/</guid><description>&lt;div class="paragraph">
&lt;p>当今世界被广泛浪费的资源之一是：内存。由于编程效率低下，内存浪费量惊人（有时 &amp;#34;令人震惊&amp;#34;）。我们在多个企业应用程序中都看到了这种情况。为了证明这一点，我们进行了一项小型研究。我们分析了著名的 Spring Boot Pet Clinic 应用程序，看看它浪费了多少内存。该应用程序由社区设计，旨在展示如何使用 Spring 应用程序框架构建简单但功能强大的面向数据库的应用程序。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_环境">环境&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>Spring Boot 2.1.4.RELEASE&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Java SDK 1.8&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Tomcat 8.5.20&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MySQL 5.7.26 with MySQL Connector/J 8.0.15&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_压力测试">压力测试&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>我们使用流行的开源压力测试工具 &lt;a href="https://jmeter.apache.org/" target="_blank" rel="noopener">Apache JMeter&lt;/a> 进行压力测试。我们使用以下设置执行了 30 分钟的压力测试：&lt;/p>
&lt;/div>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>&lt;strong>线程数（用户&lt;/strong>）- 1000（连接到目标的用户数量）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>上升周期（秒）&lt;/strong> - 10。所有请求开始的时间范围。根据我们的配置，每 0.01 秒将启动 1 个新线程，即 100 个线程/秒。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>循环次数&lt;/strong> - 永久。这 1000 个线程将背靠背执行测试迭代。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>持续时间（秒）&lt;/strong> - 1800。启动后，1000 个线程持续运行 1800 秒。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/gc-tuning/jmeter-setting.png" alt="JMeter 设置" width="95%"/>
&lt;/div>
&lt;div class="title">图 1. JMeter 设置&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>我们在负载测试中使用了以下场景：&lt;/p>
&lt;/div>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>在系统中添加新的宠物主人。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查看宠物主人的相关信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>向系统中添加一只新宠物。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查看宠物相关信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在宠物探视历史中添加探视信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>更新宠物相关信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>更新宠物主人的相关信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过搜索主人姓名查看主人信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查看所有主人的信息。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_如何测量内存浪费">如何测量内存浪费？&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>业界有数百种工具可以显示&lt;strong>内存使用量&lt;/strong>。但是，我们很少遇到能测量因低效编程而浪费的内存量的工具。 &lt;a href="https://heaphero.io/" target="_blank" rel="noopener">HeapHero&lt;/a> 是一款简单的工具，它可以分析堆转储，并告诉我们由于编程效率低下而浪费了多少内存。&lt;/p>
&lt;/div></description></item><item><title>GC 调优成功案例：减少新生代的大小</title><link>https://www.diguage.com/post/gc-tuning-success-story-reducing-young-gen-size/</link><pubDate>Sat, 06 Jan 2024 16:51:18 +0800</pubDate><guid>https://www.diguage.com/post/gc-tuning-success-story-reducing-young-gen-size/</guid><description>&lt;div class="paragraph">
&lt;p>当对垃圾回收性能做调优时，不仅能改善垃圾回收暂停时间，还能改善整个应用程序的响应时间并降低云计算成本。最近，我们帮助调整了一个流行应用程序的垃圾回收行为。仅仅是一个微小的改动，就带来了巨大的改善。让我们在这篇文章中讨论一下这个垃圾回收调整的成功案例。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_垃圾收集关键绩效指标">垃圾收集关键绩效指标&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>有句名言叫“无法衡量的东西就无法优化”。说到垃圾回收的调整，您只需关注 3 个主要关键绩效指标 (KPI)：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>GC 暂停时间&lt;/p>
&lt;/li>
&lt;li>
&lt;p>GC 吞吐量&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CPU 消耗量&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="paragraph">
&lt;p>垃圾回收运行时，会暂停应用程序。“GC 停顿时间”表示应用程序在垃圾回收事件中停顿的时间。该指标以秒或毫秒为单位。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>“GC 吞吐量”表示应用程序处理客户事务的总时间与处理垃圾回收活动的总时间之比。该指标以百分比为单位。例如，如果有人说他的应用程序的 GC 吞吐量是 98%，这表明该应用程序有 98% 的时间用于处理客户活动，其余 2% 的时间用于处理垃圾回收活动。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>即使是处理一个简单的请求，现代应用程序也会创建成千上万个对象。因此，垃圾收集器必须在后台不断运行，以释放为每个请求创建的成千上万个对象。因此，垃圾回收往往会消耗大量的 CPU。因此，在调整垃圾回收性能时，还应研究 CPU 消耗。要了解有关这些 KPI 的更多信息，请参阅： 内存调整： &lt;a href="https://www.diguage.com/post/garbage-collection-kpi/" target="_blank" rel="noopener">关键性能指标&lt;/a>。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_如何获取这些_kpi">如何获取这些 KPI？&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>在调优垃圾回收性能时，垃圾回收日志是您最好的朋友。您可以通过 &lt;a href="https://www.diguage.com/post/how-to-do-gc-log-analysis/" target="_blank" rel="noopener">这篇文章&lt;/a> 给出的 JVM 参数在应用程序中启用垃圾回收日志。建议始终开启垃圾回收日志，因为它能提供丰富的信息，有助于预测中断、排除生产问题并帮助进行容量规划。此外，启用垃圾收集不会给应用程序增加任何明显的开销。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>启用垃圾收集日志后，您可以使用免费的垃圾收集日志分析工具，如 &lt;a href="https://gceasy.io/" target="_blank" rel="noopener">GCeasy&lt;/a>、 &lt;a href="https://www.ibm.com/support/pages/java-sdk" target="_blank" rel="noopener">IBM GC &amp;amp; Memory visualizer&lt;/a> 和 &lt;a href="https://github.com/mgm3746/garbagecat" target="_blank" rel="noopener">Google Garbage cat&lt;/a> 等，查看上述关键绩效指标。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在下面这篇文章，教你 &lt;a href="https://www.diguage.com/post/how-to-do-gc-log-analysis/" target="_blank" rel="noopener">如何进行 GC 日志分析&lt;/a>。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_垃圾回收行为基线">垃圾回收行为基线&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>介绍到此为止。让我们回到本文最初的主题。我们在这个流行的应用程序上启用了垃圾回收日志。我们让应用程序运行了 24 小时。然后，我们将生成的 GC 日志文件上传到 GCeasy 工具。该工具提供了具有洞察力的图表和 GC KPI。该应用程序的 GC 吞吐量为 96.176%，平均暂停时间为 12.429 秒。&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/gc-tuning/baselin-KPI.png" alt="基线 GC KPI（由 GCeasy 生成）" width="95%"/>
&lt;/div>
&lt;div class="title">图 1. 基线 GC KPI（由 GCeasy 生成）&lt;/div></description></item><item><title>应用程序的内存是大还是小？</title><link>https://www.diguage.com/post/large-or-small-memory-size-for-my-app/</link><pubDate>Sat, 06 Jan 2024 12:17:15 +0800</pubDate><guid>https://www.diguage.com/post/large-or-small-memory-size-for-my-app/</guid><description>&lt;div class="paragraph">
&lt;p>应该在内存容量大的少量实例（即机器）上运行应用程序，还是在内存容量小的大量实例上运行应用程序？哪种策略是最佳的？这个问题可能会经常遇到。在开发应用程序长达 20 年，且构建了 JVM 性能工程/故障排除工具（ &lt;a href="https://gceasy.io/" target="_blank" rel="noopener">GCeasy&lt;/a>、 &lt;a href="https://fastthread.io/" target="_blank" rel="noopener">FastThread,&lt;/a>、 &lt;a href="https://heaphero.io/" target="_blank" rel="noopener">HeapHero&lt;/a>）之后，我仍然不知道这个问题的正确答案。同时，我相信这个问题也没有非黑即白的答案。在本文中，我想与大家分享一下我对这个问题的看法和经验。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_两个数十亿美元企业的故事">两个数十亿美元企业的故事&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>由于我们的 JVM 性能工程/故障排除工具已广泛应用于各大企业，因此我有机会看到世界级企业应用的实际实施情况。最近，我有机会参观了两家高速成长的科技公司（如果我说出他们的名字，读这篇文章的人都会知道）。这两家公司的总部都在硅谷。它们的业务是技术，因此在工程设计方面很有一套。它们是华尔街的宠儿，享有极高的估值。它们的市值高达数十亿美元。它们是现代企业蓬勃发展的典型代表。在我们的对话中，让我们称这两家企业为公司 A 和公司 B。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在内存大小方面，两家企业都采用了&lt;strong>两个极端&lt;/strong>，这让我感到非常惊讶。公司 A 将堆大小（即 &lt;code>-Xmx&lt;/code>）设置为 250GB，而公司 B 则将堆大小设置为 2GB：公司 A 的堆大小是公司 B 的 125 倍。两家公司都对自己的内存大小设置很自信。俗话说：&amp;#34;事实胜于雄辩&amp;#34;，两家企业都在扩大规模，处理数十亿的关键业务交易。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>两家公司都从事相同的业务，收入/市值大致相同，位于同一地理区域，在同一时间点采用两种极端的内存大小，这真是一次绝佳的体验。鉴于这种现实生活中的真实经验，正确的答案是什么？大内存还是小内存？我的结论是：如果你有一支优秀的团队，采用这两种策略都能取得成功。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_大内存容量可能很昂贵">大内存容量可能很昂贵&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>与内存容量小、实例数量多的情况相比，内存容量大、实例（即机器）数量少的情况往往成本较高。以下是基于美国东部（弗吉尼亚州北部）地区 AWS EC2 实例成本的简单计算：&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>m4.16xlarge - 256GB 内存 - Linux 按实例收费：3.2 美元/小时&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>T3a small - 2GB 内存 - Linux 按实例收费：0.0188 美元/小时&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>因此，要获得 256GB 内存容量，我们必须获得 128 个 “T3a small” 实例（即 128 个实例 x 2GB = 256GB）。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>128 x T3a small - 2GB 内存 - Linux 按实例收费：2.4064 美元/小时（即 128 x 0.0188 美元/小时）&lt;/p>
&lt;/div></description></item><item><title>如何实现 GC 的高吞吐量？</title><link>https://www.diguage.com/post/how-to-aim-for-high-gc-throughput/</link><pubDate>Fri, 05 Jan 2024 09:24:33 +0800</pubDate><guid>https://www.diguage.com/post/how-to-aim-for-high-gc-throughput/</guid><description>&lt;div class="paragraph">
&lt;p>三四十年前，开发人员负责释放在应用程序中创建的对象。业务应用程序相当复杂，有不同的工作流、用例和场景。即使开发人员在某个场景中少释放一个对象，对象也会在内存中累积，造成内存泄漏。Java 于 1995 年推出时，承诺自动进行垃圾回收。它将删除对象的责任从开发人员转移到了 Java 虚拟机（JVM），从而彻底改变了内存管理。整个行业都积极拥抱了这一创新理念，因为开发人员不再需要操心手动内存管理。从那时起，自动垃圾回收已成为所有现代编程语言的默认功能。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在本篇文章中，我们将探讨垃圾回收过程中的一个关键性能指标：&amp;#34;GC 吞吐量&amp;#34;。我们将了解它的含义、在 Java 应用程序中的重要性以及它对整体性能的影响。此外，我们还将深入探讨提高 GC 吞吐量的可行策略，为现代软件开发释放其优势。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_什么是垃圾回收吞吐量">什么是垃圾回收吞吐量？&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>每当运行自动垃圾回收事件时，应用程序都会停顿，以识别内存中未引用的对象并将其释放。在停顿期间，不会处理任何客户请求。垃圾回收吞吐量请求应用程序处理客户请求的时间占多大比例，垃圾回收活动的时间占多大比例。例如，如果有人说他的应用程序的 GC 吞吐量是 98%，这意味着他的应用程序有 98% 的时间用于处理客户请求，其余 2% 的时间用于处理垃圾回收活动。 高 GC 吞吐量是可取的，因为它表明应用程序有效地利用了系统资源，从而减少了停顿，提高了整体性能。相反，GC 吞吐量低会导致垃圾回收停顿时间增加，影响应用程序的响应速度，造成性能瓶颈。监控和优化 GC 吞吐量对于确保应用程序的顺利执行和响应速度至关重要。在下一节中，我们将探讨查找应用程序 GC 吞吐量的方法，并了解如何解释结果以优化 Java 应用程序性能。继续…&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_如何找到应用程序的_gc_吞吐量">如何找到应用程序的 GC 吞吐量？&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>垃圾回收日志是研究 GC 性能的最佳来源。如果你的应用程序运行在 JVM 上，你可以通过 &lt;a href="https://www.diguage.com/post/how-to-do-gc-log-analysis/" target="_blank" rel="noopener">如何进行 GC 日志分析&lt;/a> 文章中提到的 JVM 参数启用 GC 日志。启用 GC 日志后，让应用程序处理流量至少一天，以观察高流量和低流量时段各自的运行情况。之后，可以将生成的 GC 日志文件上传到 GC 日志分析工具，以获得有价值的分析结果。一些常用的 GC 日志分析工具包括 &lt;a href="https://gceasy.io/" target="_blank" rel="noopener">GCeasy&lt;/a>、 &lt;a href="https://www.ibm.com/support/pages/java-sdk" target="_blank" rel="noopener">IBM GC &amp;amp; Memory visualizer&lt;/a> 和 &lt;a href="https://github.com/mgm3746/garbagecat" target="_blank" rel="noopener">Google Garbage cat&lt;/a> 等。这些工具将报告 GC 吞吐量以及其他重要的 GC 指标。下面是 GCeasy 工具的摘录，展示了包括 GC 吞吐量在内的各种 GC 关键性能指标 (KPI) 报告。&lt;/p>
&lt;/div></description></item><item><title>Java ZGC 调优</title><link>https://www.diguage.com/post/java-zgc-algorithm-tuning/</link><pubDate>Wed, 03 Jan 2024 22:19:48 +0800</pubDate><guid>https://www.diguage.com/post/java-zgc-algorithm-tuning/</guid><description>&lt;div class="paragraph">
&lt;p>ZGC 是一种专门的垃圾回收器，主要用于管理大型堆和尽量减少 Java 应用程序中的停顿。它能应对在内存密集型工作负载和一致的响应时间至关重要的情况下的垃圾回收的挑战。ZGC 利用并发处理能力和先进的算法，为优化现代 Java 应用程序的性能提供了有效的解决方案。在本篇文章中，将专门探讨调整 ZGC 以提高性能的技术。不过，如果想了解更多基础知识，可以观看在 JAX 伦敦会议上发表的 &lt;a href="https://www.youtube.com/watch?v=6G0E4O5yxks" target="_blank" rel="noopener">垃圾回收调优&lt;/a> 讲座。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_如何启用_zgc">如何启用 ZGC？&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>确保使用的 Java 版本支持 ZGC。OpenJDK 从 JDK11 开始支持 ZGC。在启动应用程序时添加以下 JVM 参数，这样就可以在 Java 应用程序中启用 ZGC 垃圾收集器：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">&lt;span class="c"># D瓜哥 · &lt;a href="https://www.digauge.com" target="_blank">https://www.digauge.com&lt;/a>&lt;/span>
&lt;span class="nt">-XX&lt;/span>:+UseZGC &lt;span class="nt">-XX&lt;/span>:+ZGenerational &lt;i class="conum" data-value="1">&lt;/i>&lt;b>(1)&lt;/b>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="colist arabic">
&lt;table>
&lt;tbody>&lt;tr>
&lt;td>&lt;i class="conum" data-value="1">&lt;/i>&lt;b>1&lt;/b>&lt;/td>
&lt;td>D瓜哥注：分代 ZGC 从 OpenJDK 21+ 开始支持。&lt;/td>
&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_何时使用_zgc">何时使用 ZGC？&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>如果应用符合其中任何一项要求，就可以考虑使用 ZGC：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;strong>堆大小较大&lt;/strong>：ZGC 特别适合堆容量较大的应用程序，堆容量通常在数十 GB 或更大。如果应用需要大量内存，ZGC 的低延迟特性将使其成为一个令人信服的选择。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>低延迟要求&lt;/strong>：当应用需要一致的响应时间和低延迟性能时，ZGC 将大显身手。在需要最大限度缩短垃圾回收暂停时间的情况下，ZGC 表现出色，特别适合交互式应用和实时性应用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>具有不同工作负载的应用&lt;/strong>：ZGC 专为处理不同的工作负载而设计，因此适用于内存使用模式不可预测的应用。无论应用程序经历的是周期性的，突发性的，还是富有变化性的负载，ZGC 都能有效地适应这些调整。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_zgc_调优参数">ZGC 调优参数&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>ZGC 是 Java 中的一种垃圾收集器，它采用了一种不同的调优方法：将暴露的 JVM 参数数量降至最低。与需要细粒度调整的传统垃圾收集器不同，ZGC 专注于优化大型堆的管理，同时以最小的配置开销提供高效的垃圾收集。这种精简的方法允许开发人员主要关注一个关键的 JVM 调整参数：堆大小。&lt;/p>
&lt;/div></description></item><item><title>Spring 应用合并之路</title><link>https://www.diguage.com/post/the-merging-spring-applications-road/</link><pubDate>Sat, 23 Dec 2023 20:38:47 +0800</pubDate><guid>https://www.diguage.com/post/the-merging-spring-applications-road/</guid><description>&lt;div class="paragraph">
&lt;p>公司最近一年在推进降本增效，在用尽各种手段之后，发现应用太多，每个应用都做跨机房容灾部署，则最少需要 4 台机器（称为容器更合适）。那么，将相近应用做一个合并，减少维护项目，提高机器利用率就是一个可选方案。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>经过前后三次不同的折腾，最后探索出来一个可行方案。记录一下，分享出来，希望对有相关需求的研发童鞋有所帮助。下面按照四种可能的方案，分别做介绍。另外，为了方便做演示，专门整了两个演示项目：&lt;/p>
&lt;/div>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/diguage/merge-demo-boot" target="_blank" rel="noopener">diguage/merge-demo-boot&lt;/a> — 合并项目，下面简称为 &lt;code>boot&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/diguage/merge-demo-web" target="_blank" rel="noopener">diguage/merge-demo-web&lt;/a> — 被合并项目，下面简称为 &lt;code>web&lt;/code>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_jar_包引用">Jar 包引用&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>这个方式，可能是给人印象最容易的方式。仔细思考一下，从维护性的角度来看，这个方式反而是最麻烦的方式，理由如下：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;code>web&lt;/code> 项目每次更新，都需要重新打包发布新版； &lt;code>boot&lt;/code> 项目也需要跟着更新发布。拉一次屎，脱两次裤子。属实麻烦。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>还需要考虑 &lt;code>web&lt;/code> 项目的加载问题，类似下面要描述的，是否共用容器：&lt;/p>
&lt;div class="olist loweralpha">
&lt;ol class="loweralpha" type="a">
&lt;li>
&lt;p>共用容器 — 这是最容器想到的方式。但是这种方式，需要解决 Bean 冲突的问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不共用容器 — 这种方式需要处理 &lt;code>web&lt;/code> 容器如何加载的问题。默认应该是无法识别。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="paragraph">
&lt;p>基于这些考虑，这种方式直接被抛弃了。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_仓库合并公用一套容器">仓库合并，公用一套容器&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>这是第一次尝试使用的方案。也是遇到问题最多的方案。&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>将两个仓库做合并。&lt;/p>
&lt;div class="olist loweralpha">
&lt;ol class="loweralpha" type="a">
&lt;li>
&lt;p>将 &lt;code>web&lt;/code> 仓库的地址配置到 &lt;code>boot&lt;/code> 项目里： &lt;code>git remote add web &lt;a href="mailto:git@github.com">git@github.com&lt;/a>:diguage/merge-demo-web.git&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 &lt;code>boot&lt;/code> 项目里，切出来一个分支： &lt;code>git switch -c web&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将 &lt;code>web&lt;/code> 分支的提交清空： &lt;code>git update-ref -d HEAD&lt;/code>，然后做一次提交；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将 &lt;code>web&lt;/code> 项目的代码克隆到 &lt;code>web&lt;/code> 分支上： &lt;code>git pull --rebase --allow-unrelated-histories web master&lt;/code>；注意，这里需要加 &lt;code>--allow-unrelated-histories&lt;/code> 参数，以允许不相干的仓库进行合并。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从 &lt;code>boot&lt;/code> 项目的 &lt;code>master&lt;/code> 分支上，切出来一个合并分支： &lt;code>git switch -c merge&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将 &lt;code>web&lt;/code> 项目向 &lt;code>boot&lt;/code> 项目合并： &lt;code>git merge --allow-unrelated-histories web&lt;/code>；注意，这里需要加 &lt;code>--allow-unrelated-histories&lt;/code> 参数，以允许不相干的仓库进行合并。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>处理代码冲突，完成合并即可。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>新 Mac 安装软件脚本</title><link>https://www.diguage.com/post/install-software-for-new-mac/</link><pubDate>Tue, 24 Oct 2023 16:39:37 +0800</pubDate><guid>https://www.diguage.com/post/install-software-for-new-mac/</guid><description>&lt;div class="paragraph">
&lt;p>最近公司可以申请零净值 MacBook 笔记本，就随手申请了一个。由于有很多软件需要安装，就搜集了一下以前安装软件的命令，整理成一个安装脚本，分享出来，方便后续再次装机。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_xcode_select">1. &lt;code>xcode-select&lt;/code>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>作为开发人员，这是基础工具包，必须安装：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">xcode-select &lt;span class="nt">--install&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_安装脚本">2. 安装脚本&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>安装脚本主要构成如下：&lt;/p>
&lt;/div>
&lt;div class="sect2">
&lt;h3 id="_oh_my_zsh">2.1. oh my zsh&lt;/h3>
&lt;div class="paragraph">
&lt;p>安装脚本先安装了 oh-my-zsh。最近帮同事搞 MacBook，没有 oh-my-zsh 的加持，写命令行浑身难受。&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/logos/oh-my-zsh.png" alt="oh-my-zsh" width="95%"/>
&lt;/div>
&lt;div class="title">图 1. oh-my-zsh&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>由于安装 oh my zsh 会导致脚本退出，所以，单独安装：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">&lt;span class="c">#!/usr/bin/env bash&lt;/span>
&lt;span class="c">#&lt;/span>
&lt;span class="c"># Author: D瓜哥 · &lt;a href="https://www.diguage.com" target="_blank">https://www.diguage.com&lt;/a>&lt;/span>
&lt;span class="c">#&lt;/span>

&lt;span class="c"># 安装 oh-my-zsh&lt;/span>
sh &lt;span class="nt">-c&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">$(&lt;/span>curl &lt;span class="nt">-fsSL&lt;/span> https://cdn.jsdelivr.net/gh/ohmyzsh/ohmyzsh/tools/install.sh&lt;span class="si">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect2">
&lt;h3 id="_homebrew">2.2. Homebrew&lt;/h3>
&lt;div class="paragraph">
&lt;p>脚本里面主要使用了 Homebrew 来安装软件。&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/logos/homebrew.svg" alt="Homebrew" width="50%"/>
&lt;/div>
&lt;div class="title">图 2. Homebrew&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect2">
&lt;h3 id="_sdkman">2.3. sdkman&lt;/h3>
&lt;div class="paragraph">
&lt;p>Java JDK + Maven 等相关安装，主要使用了 Sdkman，方便多个版本相互切换。&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/logos/sdkman.png" alt="sdkman" width="95%"/>
&lt;/div>
&lt;div class="title">图 3. sdkman&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect2">
&lt;h3 id="_感谢_jsdelivr">2.4. 感谢 jsDelivr&lt;/h3>
&lt;div class="paragraph">
&lt;p>为了解决安装 oh-my-zsh 和 Homebrew 时，GitHub 访问不畅，使用 jsDelivr 将它们的安装链接进行改写，可以利用 CDN 加速，让安装过程更加顺利。&lt;/p>
&lt;/div></description></item><item><title>Spring 对占位符的处理（一）：XML 中的 Bean</title><link>https://www.diguage.com/post/placeholder-in-spring-1/</link><pubDate>Mon, 01 May 2023 22:15:55 +0800</pubDate><guid>https://www.diguage.com/post/placeholder-in-spring-1/</guid><description>&lt;div class="paragraph">
&lt;p>最近有小伙伴在开发时，遇到了一个 Spring 占位符，例如 &lt;code>${token}&lt;/code>， 在不同环境下处理不一致的问题，正好对 Spring 对占位符的处理也有一些不清楚的地方，趁此机会，把 Spring 对占位符的处理机制深入了解一下，方便后续排查问题。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>经常阅读D瓜哥博客的朋友可能知道，D瓜哥在 &lt;a href="https://www.diguage.com/post/spring-extensions-and-dubbo-1/#spring-plugin" target="_blank" rel="noopener">Spring 扩展点实践：整合 Apache Dubbo（一）： Spring 插件机制简介&lt;/a> 中已经介绍了 Spring 的插件机制。在阅读以下内容之前，建议大家先去阅读一下这篇文章中“Spring 插件机制简介”章节的内容，以便于无缝衔接。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在分析的过程中发现， Spring 对占位符有两种截然不同的出来阶段：① XML 配置文件中的占位符；② Java 源代码中 &lt;code>@Value&lt;/code> 注解中的占位符。由于内容较多，一篇讲解完有些过长，所以分三篇文章来分别介绍这两种处理过程。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>本篇首先来介绍一下对 XML 配置文件中的占位符的处理。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_示例代码">示例代码&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>在正式开始之前，先来看一下示例代码：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="title">&lt;code>UserRpc.java&lt;/code>&lt;/div>
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="java">&lt;span class="cm">/**
 * @author D瓜哥 · &lt;a href="https://www.diguage.com" target="_blank">https://www.diguage.com&lt;/a>
 * @since 2023-05-02 10:23:49
 */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserRpc&lt;/span> &lt;span class="o">{&lt;/span>

 &lt;span class="nd">@Value&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;${user.appId}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
 &lt;span class="kd">private&lt;/span> &lt;span class="nc">String&lt;/span> &lt;span class="n">appId&lt;/span>&lt;span class="o">;&lt;/span>

 &lt;span class="c1">// 这里不使用注解，而是使用 XML 配置&lt;/span>
 &lt;span class="c1">// @Value(&amp;#34;${user.token}&amp;#34;)&lt;/span>
 &lt;span class="kd">private&lt;/span> &lt;span class="nc">String&lt;/span> &lt;span class="n">token&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="title">&lt;code>token.properties&lt;/code>&lt;/div>
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">user.appId&lt;span class="o">=&lt;/span>dummyAppId
user.token&lt;span class="o">=&lt;/span>dummyToken&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="title">&lt;code>spring.xml&lt;/code>&lt;/div>
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="xml">&lt;span class="cp">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;beans&lt;/span> &lt;span class="na">xmlns=&lt;/span>&lt;span class="s">&amp;#34;http://www.springframework.org/schema/beans&amp;#34;&lt;/span>
 &lt;span class="na">xmlns:xsi=&lt;/span>&lt;span class="s">&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span>
 &lt;span class="na">xmlns:context=&lt;/span>&lt;span class="s">&amp;#34;http://www.springframework.org/schema/context&amp;#34;&lt;/span>
 &lt;span class="na">xsi:schemaLocation=&lt;/span>&lt;span class="s">&amp;#34;http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans.xsd
 http://www.springframework.org/schema/context
 https://www.springframework.org/schema/context/spring-context.xsd&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>

 &lt;span class="c">&amp;lt;!-- @author D瓜哥 · &lt;a href="https://www.diguage.com" target="_blank">https://www.diguage.com&lt;/a> --&amp;gt;&lt;/span>

 &lt;span class="nt">&amp;lt;context:annotation-config/&amp;gt;&lt;/span>

 &lt;span class="nt">&amp;lt;bean&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;userRpc&amp;#34;&lt;/span>
 &lt;span class="na">class=&lt;/span>&lt;span class="s">&amp;#34;com.diguage.truman.context.UserRpc&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
 &lt;span class="c">&amp;lt;!-- XML 配置的占位符实例在此 --&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;token&amp;#34;&lt;/span> &lt;span class="na">value=&lt;/span>&lt;span class="s">&amp;#34;${user.token}&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;/bean&amp;gt;&lt;/span>

 &lt;span class="nt">&amp;lt;context:property-placeholder&lt;/span> &lt;span class="na">location=&lt;/span>&lt;span class="s">&amp;#34;classpath:token.properties&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>

&lt;span class="nt">&amp;lt;/beans&amp;gt;&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_bean_标签处理">&lt;code>&amp;lt;bean&amp;gt;&lt;/code> 标签处理&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>在 &lt;a href="https://www.diguage.com/post/spring-startup-process-overview/" target="_blank" rel="noopener">Spring 启动流程概述&lt;/a> 中，已经介绍过，Spring 的启动过程几乎都被封装在 &lt;code>AbstractApplicationContext#refresh&lt;/code> 方法中。在 &lt;code>refresh&lt;/code> 方法中调用了 &lt;code>refreshBeanFactory&lt;/code> 方法；在 &lt;code>refreshBeanFactory&lt;/code> 方法执行过程中，调用了 &lt;code>loadBeanDefinitions&lt;/code> 方法。而 &lt;code>BeanDefinition&lt;/code> 的加载是由 &lt;code>org.springframework.context.support.AbstractRefreshableApplicationContext#loadBeanDefinitions&lt;/code> 来完成的。通过 XML 文件配置的 Bean 是由 &lt;code>org.springframework.context.support.AbstractXmlApplicationContext#loadBeanDefinitions(org.springframework.beans.factory.support.DefaultListableBeanFactory)&lt;/code> （&lt;code>AbstractRefreshableApplicationContext&lt;/code> 的子类）处理完成的。处理过程的时序图如下：&lt;/p>
&lt;/div></description></item><item><title>关于接口可维护性的一些建议</title><link>https://www.diguage.com/post/tips-for-interface-maintainability/</link><pubDate>Fri, 28 Apr 2023 17:16:24 +0800</pubDate><guid>https://www.diguage.com/post/tips-for-interface-maintainability/</guid><description>&lt;div class="paragraph">
&lt;p>在做新需求开发或者相关系统的维护更新时，尤其是涉及到不同系统的接口调用时，在可维护性方面，总感觉有很多地方差强人意。一些零星思考，抛砖引玉，希望引发更多的思考和讨论。总结了大概有如下几条建议：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>在接口注释中加入接口文档链接&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将调用接口处写上被调用接口文档链接&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将接口源代码发布到私服仓库&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于状态值常量，优先在接口参数类或者返回值类中定义&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果使用 &lt;code>Map&lt;/code> 对象作为传输载体，要提供 Key 值定义常量&lt;/p>
&lt;/li>
&lt;li>
&lt;p>针对 &lt;code>Map&lt;/code> 返回值，可以考虑使用将 &lt;code>Map&lt;/code> 转化成对象&lt;/p>
&lt;/li>
&lt;li>
&lt;p>尽可能简化接口依赖&lt;/p>
&lt;/li>
&lt;li>
&lt;p>只传递必要字段，尽量避免大而全的接口&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将接口的参数和返回值原始数据打印到日志中&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将 RPC 接口的类名及方法打印到日志中&lt;/p>
&lt;/li>
&lt;li>
&lt;p>核心思想：以人为本，就近原则，触手可及&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="paragraph">
&lt;p>下面，D瓜哥对每一条建议做一个详细说明。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_在接口注释中加入接口文档链接">1. 在接口注释中加入接口文档链接&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>在做接口开发时，无论是对自有接口的升级改造，还是针对外部接口的从头接入，都涉及到接口文档。不同之处是，前者的工作重点是书写或者更新接口文档；而后者是根据接口文档开发合适的接入代码。但是，经常遇到的一个麻烦是，找不到接口文档。在组内需要找老同事询问；如果是跨部门，还需要两层甚至三层的进行转接，非常麻烦。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>D瓜哥认为，在这种情况下，为了方便大家维护，最好的办法就是将接口文档链接直接放在代码注释中，这样后续维护的人员，直接就可以点击链接直达接口文档，简单方便高效。如果是新建的接口，就可以先创建一个空文档，把链接放在注释中，后续再书写文档内容。如果是维护已有接口，可以在维护时，将缺失的链接加入到注释中，自己方便，也方便其他人进行后续的维护更新。这样，在循序渐进的过程中，逐步就可以把文档链接补充到代码中，方便维护代码，也同步更新文档。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_将调用接口处写上被调用接口文档链接">2. 将调用接口处写上被调用接口文档链接&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>在调用其他系统的接口时，没有接口文档，几乎寸步难行。在第一次接入接口时，绝大多数情况下，都是参考着接口文档做接入工作。但是，目前的情况时，接入时参考文档，参考完就随手把文档给“扔了”。后续如果还需要做进一步升级维护，还需要到处找接口文档；另外，交互的系统难免有一些 Bug，在和其他系统维护人员对接处理 Bug 时，只有接口没有文档，对方可能也需要去找文档链接。无形中，很多时间都浪费在了找文档的过程中。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>D瓜哥最近尝试了一个实践，就是在接口调用的地方，把接口文档链接当做注释加入到代码中。这样，无论是后续维护升级，还是沟通协调处理问题，都非常方便。别人问接口是什么，连接口+文档都可以一把复制就搞定。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>经过最近一段时间的实践情况来看，这个处理非常方便，是一个非常值得推广的实践。再插一句，也可以像一条建议一样，可以在维护代码时，不断把已接入的接口文档加入到调用接口的地方，循序渐进，方便后续人维护升级。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_将接口源代码发布到私服仓库">3. 将接口源代码发布到私服仓库&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>接口文档链接在注释中，在构建结果中就不复存在了。所以，为了方便接口使用方可以在接口中查询到对应的接口文档，就需要把源码也发布到私服仓库中。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>这里只说明一下 Java 的相关处理办法。如果使用 Maven 作为构建工具的话，默认是不会将源代码发布到私服仓库中的。关于如何将源代码发布到，在 &lt;a href="https://www.diguage.com/post/upgrade-maven-plugins/#src-to-repo" target="_blank" rel="noopener">升级 Maven 插件：将源码发布到私服仓库&lt;/a> 中已经做过相关介绍，这里就不再赘述。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>除了将源码发布到私服仓库，另外，还建议编译构建时，保持方法的原始参数命名。这个也可以通过配置 Maven 插件来完成，具体配置见： &lt;a href="https://www.diguage.com/post/upgrade-maven-plugins/#compile-with-parameters" target="_blank" rel="noopener">升级 Maven 插件：字节码文件包含原始参数名称&lt;/a>。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="constant-definition">4. 对于状态值常量，优先在接口参数类或者返回值类中定义&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>在做接口开发时，很多数据都有一个状态值，比如订单状态，再比如接口状态等等。目前的一个情况时，这些状态值大部分书写在文档中，在接入接口时，需要接入方自定义这些状态值。这就有些繁琐了，而且状态定义也不明确，甚至有可能遗漏一些重要的状态值。有些懒省事，直接在代码中硬编码一个魔法值，后续维护的跟还需要根据上下文反推这个值的含义，非常不利于维护。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>D瓜哥个人觉得，有两个处理办法：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>如果状态值不是很多，优先在接口参数类或者返回值类中定义。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果状态值很多，可以考虑单独抽取成一个常量类或者枚举类。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="paragraph">
&lt;p>这样使用的时候，触手可及。不需要到处去找。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="key-for-map">5. 如果使用 &lt;code>Map&lt;/code> 对象作为传输载体，要提供 Key 值定义常量&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>有些系统可能考虑方便增加字段，选择使用 &lt;code>Map&lt;/code> 作为数据载体。自己开发的时候很爽，但是给接口接入却非常不友好。接入方从 &lt;code>Map&lt;/code> 中获取数据时，要么自己定义 Key 值；要么直接使用魔法值硬编码在代码中。使用前者方案，就需要在各个接入方都需要自定义一套；使用后者，初期是省事了，后来维护的人员就懵逼了。这都无形中增加了很多维护成本。&lt;/p>
&lt;/div></description></item><item><title>Versions Maven 插件简介</title><link>https://www.diguage.com/post/intro-to-versions-maven-plugin/</link><pubDate>Fri, 21 Apr 2023 22:07:37 +0800</pubDate><guid>https://www.diguage.com/post/intro-to-versions-maven-plugin/</guid><description>&lt;div class="paragraph">
&lt;p>在 &lt;a href="https://www.diguage.com/post/specification-for-maven-bom/" target="_blank" rel="noopener">制定组织内 Maven BOM 的一些规范&lt;/a> 中，D瓜哥 介绍了一些组织内指定 Maven BOM 的一些规范。根据这些规范，D瓜哥 创建并维护了部门内部的 Maven BOM。今年，要求对部门内的陈旧依赖做一些升级工作。所以，在 &lt;a href="https://www.diguage.com/post/experience-about-upgrading-java-dependencies/" target="_blank" rel="noopener">关于升级 Spring 等依赖的一些经验&lt;/a> 中介绍了一些升级开源依赖的经验；在上一篇文章 &lt;a href="https://www.diguage.com/post/upgrade-maven-plugins/" target="_blank" rel="noopener">升级 Maven 插件&lt;/a> 中介绍了升级 Maven 插件的一些注意事项。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>D瓜哥一直坚持“机器可以干的事情，就应该交给机器干”。对于依赖管理，Maven Enforcer 插件就可以对依赖做必要的检查，所以，在 &lt;a href="https://www.diguage.com/post/use-maven-enforcer-plugin-to-check-dependencies/" target="_blank" rel="noopener">使用 Maven Enforcer 插件检查依赖&lt;/a> 中，介绍了如何使用 Apache Maven Enforcer 来管理依赖。由于要维护部门内部的 Maven BOM，同时由于版本控的特质，所以，需要时长检查依赖升级情况。原来都是手动检查，需要一个一个去搜索各个依赖，不仅费时费力，而且还低效。最近，Maven 有一个插件可以胜任这个工作，它就是： &lt;a href="https://www.mojohaus.org/versions/versions-maven-plugin/index.html" target="_blank" rel="noopener">Versions Maven Plugin&lt;/a>。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_依赖检查">依赖检查&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>Versions Maven Plugin 支持两种配置方式：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>外置配置文件 &lt;code>maven-version-rules.xml&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>内置在 POM 文件中，直接写在插件的 &lt;code>&amp;lt;configuration&amp;gt;&lt;/code> 标签中。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="paragraph">
&lt;p>第一种方案不方便迁移。还要额外管理一个配置文件。推荐使用第二种方式。另外，直接将这些配置放在 Maven BOM 中，使用继承的方式使用 Maven BOM，那么子项目就自动继承了这些配置。后续也只需要一个地方的配置即可。示例配置如下：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="xml">&lt;span class="c">&amp;lt;!-- @author: D瓜哥 · &lt;a href="https://www.diguage.com" target="_blank">https://www.diguage.com&lt;/a> --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;plugin&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.codehaus.mojo&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>versions-maven-plugin&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>2.15.0&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;configuration&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;ruleSet&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;ignoreVersions&amp;gt;&lt;/span>
 &lt;span class="c">&amp;lt;!-- 可以使用 ignoreVersion 配置忽略 SNAPSHOT、alpha、beta 版等 --&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;ignoreVersion&amp;gt;&lt;/span>
 &lt;span class="c">&amp;lt;!-- &amp;#39;exact&amp;#39; (默认) 或 &amp;#39;regex&amp;#39; --&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;type&amp;gt;&lt;/span>regex&lt;span class="nt">&amp;lt;/type&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>(.+-SNAPSHOT|.+-M\d)&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;/ignoreVersion&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;ignoreVersion&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;type&amp;gt;&lt;/span>regex&lt;span class="nt">&amp;lt;/type&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>.+-(alpha|beta)&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;/ignoreVersion&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;/ignoreVersions&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;/ruleSet&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/plugin&amp;gt;&lt;/span>&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>升级 Maven 插件</title><link>https://www.diguage.com/post/upgrade-maven-plugins/</link><pubDate>Tue, 21 Mar 2023 17:36:48 +0800</pubDate><guid>https://www.diguage.com/post/upgrade-maven-plugins/</guid><description>&lt;div class="paragraph">
&lt;p>D瓜哥在 &lt;a href="https://www.diguage.com/post/experience-about-upgrading-java-dependencies/" target="_blank" rel="noopener">关于升级 Spring 等依赖的一些经验&lt;/a> 中，介绍了一些升级 Spring 等依赖的一些经验。在 &lt;a href="https://www.diguage.com/post/upgrade-ibatis-mybatis-about-duplicate-key-exception/" target="_blank" rel="noopener">升级 iBATIS/MyBATIS 对处理 DuplicateKeyException 的影响&lt;/a> 中，分析了升级 iBATIS/MyBATIS 对处理 DuplicateKeyException 异常的影响。在升级中，还遇到一些 Maven 插件相关的问题。这里也分享出来，希望对大家有所帮助。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_properties_文件编码错误">Properties 文件编码错误&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>在升级过程中，遇到过 Properties 文件编码错误的问题。可以通过配置对应的编码来解决这个问题。配置如下：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="xml">&lt;span class="c">&amp;lt;!-- D瓜哥 · &lt;a href="https://www.diguage.com" target="_blank">https://www.diguage.com&lt;/a> --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;plugin&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.maven.plugins&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>maven-resources-plugin&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>3.3.0&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;configuration&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;propertiesEncoding&amp;gt;&lt;/span>ISO-8859-1&lt;span class="nt">&amp;lt;/propertiesEncoding&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/plugin&amp;gt;&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="sect2">
&lt;h3 id="_参考资料">参考资料&lt;/h3>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://maven.apache.org/plugins/maven-resources-plugin/examples/filtering-properties-files.html" target="_blank" rel="noopener">Apache Maven Resources Plugin – Filtering Properties Files&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_使用_maven_enforcer_插件检查依赖">使用 Maven Enforcer 插件检查依赖&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>私以为“机器可以干的事情，就应该交给机器干”。对于依赖管理，Maven Enforcer 插件就可以对依赖做必要的检查。所以，推荐使用 Maven Enforcer 插件来检查低版本及有安全漏洞的依赖。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>详细介绍请参考： &lt;a href="https://www.diguage.com/post/use-maven-enforcer-plugin-to-check-dependencies/" target="_blank" rel="noopener">使用 Maven Enforcer 插件检查依赖&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="compile-with-parameters">字节码文件包含原始参数名称&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>一些对外发布的依赖，建议将原始参数名称编译到构建结果里。可以通过指定构建参数来完成。&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="xml">&lt;span class="c">&amp;lt;!-- D瓜哥 · &lt;a href="https://www.diguage.com" target="_blank">https://www.diguage.com&lt;/a> --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;plugin&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.maven.plugins&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>maven-compiler-plugin&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>3.11.0&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;configuration&amp;gt;&lt;/span>
 &lt;span class="c">&amp;lt;!-- &lt;a href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html" target="_blank">https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html&lt;/a> --&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;compilerArgs&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;arg&amp;gt;&lt;/span>-parameters&lt;span class="nt">&amp;lt;/arg&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;/compilerArgs&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;parameters&amp;gt;&lt;/span>true&lt;span class="nt">&amp;lt;/parameters&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/plugin&amp;gt;&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="sect2">
&lt;h3 id="_参考资料_2">参考资料&lt;/h3>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://maven.apache.org/plugins/maven-compiler-plugin/examples/pass-compiler-arguments.html" target="_blank" rel="noopener">Apache Maven Compiler Plugin – Pass Compiler Arguments&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_解决测试依赖问题">解决测试依赖问题&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>部分项目可能已经使用了 JUnit 5，但是执行测试代码时，可能报错。可以使用如下配置来解决这个问题：&lt;/p>
&lt;/div></description></item><item><title>升级 iBATIS/MyBATIS 对处理 DuplicateKeyException 的影响</title><link>https://www.diguage.com/post/upgrade-ibatis-mybatis-about-duplicate-key-exception/</link><pubDate>Thu, 23 Feb 2023 11:21:23 +0800</pubDate><guid>https://www.diguage.com/post/upgrade-ibatis-mybatis-about-duplicate-key-exception/</guid><description>&lt;div class="paragraph">
&lt;p>在 &lt;a href="https://www.diguage.com/post/experience-about-upgrading-java-dependencies/" target="_blank" rel="noopener">关于升级 Spring 等依赖的一些经验&lt;/a> 中，分享了一些开源依赖的升级经验。部分小伙伴质疑升级 iBATIS/MyBATIS 会影响对 &lt;code>DuplicateKeyException&lt;/code> 异常的处理。这篇文章就从源码分析/代码更新的就角度来分析一下升级相关依赖是否会对 &lt;code>DuplicateKeyException&lt;/code> 异常的处理带来实质性的影响。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>由于主要的技术栈涉及 MySQL 驱动、iBATIS、MyBATIS、Spring 周边等。所以，本文仅分析涉及的这些依赖。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>D瓜哥使用 &lt;a href="https://dev.mysql.com/doc/employee/en/" target="_blank" rel="noopener">MySQL: Employees Sample Database&lt;/a> 搭建了一个 Spring + MyBATIS + MySQL Connector/J 的测试环境。连续插入两条一样的数据，单步调试，在 &lt;code>com.mysql.jdbc.MysqlIO#sendCommand&lt;/code> 方法中，就可以观察到如下异常：&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/upgrade-spring/mysql-error1062.png" alt="MySQL Error 1062" width="95%"/>
&lt;/div>
&lt;div class="title">图 1. MySQL Error 1062&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>从这里可以明显看出，MySQL 驱动返回的异常中， &lt;code>venderCode&lt;/code> 编码是 &lt;code>1062&lt;/code>。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>顺着这个线，往上走，到 &lt;code>org.apache.ibatis.session.defaults.DefaultSqlSession#update(java.lang.String, java.lang.Object)&lt;/code> 方法中，可以看到，&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/upgrade-spring/mybatis-wrap-exception.png" alt="MyBATIS wrap Exception" width="95%"/>
&lt;/div>
&lt;div class="title">图 2. MyBATIS wrap Exception&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在这里，会将 &lt;code>SQLException&lt;/code> 包装成 &lt;code>PersistenceException&lt;/code>，这也是 MyBATIS 对外暴露的统一的异常类。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>继续往上走，就到了 &lt;code>org.mybatis.spring.SqlSessionTemplate.SqlSessionInterceptor#invoke&lt;/code> 方法：&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/upgrade-spring/mybatis-translateException.png" alt="MyBATIS translateException" width="95%"/>
&lt;/div>
&lt;div class="title">图 3. MyBATIS translateException&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在 &lt;code>SqlSessionInterceptor#invoke&lt;/code> 方法的异常处理中，将 &lt;code>PersistenceException&lt;/code> 异常通过 &lt;code>org.springframework.dao.support.PersistenceExceptionTranslator#translateExceptionIfPossible&lt;/code> 方法，将异常转换成 &lt;code>DataAccessException&lt;/code> 对象。 &lt;code>DataAccessException&lt;/code> 类是 Spring 数据访问的异常类基类。&lt;/p>
&lt;/div></description></item><item><title>深入理解 Java 代码块</title><link>https://www.diguage.com/post/dive-into-java-code-block/</link><pubDate>Sun, 04 Sep 2022 19:17:06 +0800</pubDate><guid>https://www.diguage.com/post/dive-into-java-code-block/</guid><description>&lt;div class="paragraph">
&lt;p>在 &lt;a href="https://www.diguage.com/post/jvm-bytecode-constant/" target="_blank" rel="noopener">Java 虚拟机操作码探秘：常量指令&lt;/a> 中对 Java 虚拟机操作码中关于常量操作的指令(操作码)做了初步介绍。估计会有人疑问：文中的“栈”、“栈顶”等是什么？接下来就准备解答这些疑问。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在答疑解惑之前，先来了解一下 Java 编译器对 Java 代码中的代码块是如何处理的？常见的代码块有普通代码块和静态代码块，下面对其做分别介绍。由于涉及到构造函数，所以，先对构造函数做一个介绍。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_构造函数">构造函数&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="sect2">
&lt;h3 id="no-constructor">无构造函数&lt;/h3>
&lt;div class="paragraph">
&lt;p>先来看看当没有声明构造函数时，编译结果是什么样的：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="java">&lt;span class="cm">/**
 * 无构造函数示例
 *
 * @author D瓜哥 · &lt;a href="https://www.diguage.com" target="_blank">https://www.diguage.com&lt;/a>
 */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Example&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>编译后，使用 &lt;code>javap -c&lt;/code> 查看一下编译结果：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">&lt;span class="nv">$ &lt;/span>javap &lt;span class="nt">-c&lt;/span> Example
Compiled from &lt;span class="s2">&amp;#34;Example.java&amp;#34;&lt;/span>
public class Example &lt;span class="o">{&lt;/span>
 public Example&lt;span class="o">()&lt;/span>&lt;span class="p">;&lt;/span>
 Code:
 0: aload_0
 1: invokespecial &lt;span class="c">#1 // Method java/lang/Object.&amp;#34;&amp;lt;init&amp;gt;&amp;#34;:()V&lt;/span>
 4: &lt;span class="k">return&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>从结果上来看：编译器自动给没有声明构造函数的类，生成了一个无参构造函数，并且在其中调用了父类（这里是 &lt;code>Object&lt;/code>）的无参构造函数。这是大家都熟知的基础知识。&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="sect2">
&lt;h3 id="_有参构造函数">有参构造函数&lt;/h3>
&lt;div class="paragraph">
&lt;p>再来看看当有声明参数的构造函数时，编译结果是什么样的：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="java">&lt;span class="cm">/**
 * 有参构造函数示例
 *
 * @author D瓜哥 · &lt;a href="https://www.diguage.com" target="_blank">https://www.diguage.com&lt;/a>
 */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Example&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="kd">public&lt;/span> &lt;span class="nf">Example&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>编译后，使用 &lt;code>javap -c&lt;/code> 查看一下编译结果：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">&lt;span class="nv">$ &lt;/span>javap &lt;span class="nt">-c&lt;/span> Example
Compiled from &lt;span class="s2">&amp;#34;Example.java&amp;#34;&lt;/span>
public class Example &lt;span class="o">{&lt;/span>
 public Example&lt;span class="o">(&lt;/span>int&lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span> &lt;i class="conum" data-value="1">&lt;/i>&lt;b>(1)&lt;/b>
 Code:
 0: aload_0
 1: invokespecial &lt;span class="c">#1 // Method java/lang/Object.&amp;#34;&amp;lt;init&amp;gt;&amp;#34;:()V&lt;/span>
 4: &lt;span class="k">return&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>Java 虚拟机操作码探秘：常量指令</title><link>https://www.diguage.com/post/jvm-bytecode-constant/</link><pubDate>Sat, 03 Sep 2022 16:17:34 +0800</pubDate><guid>https://www.diguage.com/post/jvm-bytecode-constant/</guid><description>&lt;div class="paragraph">
&lt;p>在 &lt;a href="https://www.diguage.com/post/jvm-instruction-set/" target="_blank" rel="noopener">Java 虚拟机指令(操作码)集&lt;/a> 中给出了一个操作码的列表。针对所有的指令，仅仅给出了一个大概介绍，对理解来说可以说毫无助力。为了弥补这个短板，这里也学习 &lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/" target="_blank" rel="noopener">“Hessian 协议解释与实战”系列&lt;/a> 那样，来一个详细解释和实战，配合实例来做个深入分析和讲解。这是这个系列的第一篇文章，就以列表中第一部分“常量”指令开始。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>从 &lt;a href="https://www.diguage.com/post/jvm-instruction-set/" target="_blank" rel="noopener">Java 虚拟机指令(操作码)集&lt;/a> 列表上来看，一共 21 个指令；按照处理数据的类型，合并同类项后，剩下有 &lt;code>nop&lt;/code>、 &lt;a href="#aconst_null">&lt;code>aconst_null&lt;/code>&lt;/a>、 &lt;a href="#iconst">&lt;code>iconst_&amp;lt;i&amp;gt;&lt;/code>&lt;/a>、 &lt;a href="#lconst">&lt;code>lconst_&amp;lt;l&amp;gt;&lt;/code>&lt;/a>、 &lt;a href="#fconst">&lt;code>fconst_&amp;lt;f&amp;gt;&lt;/code>&lt;/a>、 &lt;a href="#dconst">&lt;code>dconst_&amp;lt;d&amp;gt;&lt;/code>&lt;/a>、 &lt;a href="#bipush">&lt;code>bipush&lt;/code>&lt;/a>、 &lt;a href="#sipush">&lt;code>sipush&lt;/code>&lt;/a>、 &lt;a href="#ldc">&lt;code>ldc&lt;/code>&lt;/a> 和 &lt;a href="#ldc2_w">&lt;code>ldc2_w&lt;/code>&lt;/a> 等几个指令。下面，按照顺序，对其进行一一讲解。&lt;/p>
&lt;/div>
&lt;div class="admonitionblock note">
&lt;table>
&lt;tbody>&lt;tr>
&lt;td class="icon">
&lt;i class="fa icon-note" title="Note">&lt;/i>
&lt;/td>
&lt;td class="content">
&lt;div class="paragraph">
&lt;p>操作码助记符的首字母一般是有特殊含义的，表示操作码所作用的数据类型： &lt;code>i&lt;/code> 代表对 &lt;code>int&lt;/code> 类型的数据操作； &lt;code>l&lt;/code> 代表 &lt;code>long&lt;/code>； &lt;code>s&lt;/code> 代表 &lt;code>short&lt;/code>； &lt;code>b&lt;/code> 代表 &lt;code>byte&lt;/code>；&lt;code>c&lt;/code> 代表 &lt;code>char&lt;/code>；&lt;code>f&lt;/code> 代表 &lt;code>float&lt;/code>， &lt;code>d&lt;/code> 代表 &lt;code>double&lt;/code>； &lt;code>a&lt;/code> 代表 reference。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>尖括号之间的字母指定了指令隐含操作数的数据类型，&lt;code>&amp;lt;n&amp;gt;&lt;/code> 代表非负的整数； &lt;code>&amp;lt;i&amp;gt;&lt;/code> 代表是 &lt;code>int&lt;/code> 类型数据； &lt;code>&amp;lt;l&amp;gt;&lt;/code> 代表 &lt;code>long&lt;/code> 类型； &lt;code>&amp;lt;f&amp;gt;&lt;/code> 代表 &lt;code>float&lt;/code> 类型； &lt;code>&amp;lt;d&amp;gt;&lt;/code> 代表 &lt;code>double&lt;/code> 类型。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>另外还需要指出一点：这种指令表示法在整个 Java 虚拟机规范之中都是通用的。&lt;/p>
&lt;/div>
&lt;/td>
&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_nop">&lt;code>nop&lt;/code>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>根据 &lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.nop" target="_blank" rel="noopener">Chapter 6. The Java Virtual Machine Instruction Set：nop&lt;/a> 来看，就是“Do nothing”，暂时没有找到使用方法。就不做多介绍，后续看到相关资料，再做补充。&lt;/p>
&lt;/div></description></item><item><title>制定组织内 Maven BOM 的一些规范</title><link>https://www.diguage.com/post/specification-for-maven-bom/</link><pubDate>Sat, 03 Sep 2022 09:19:59 +0800</pubDate><guid>https://www.diguage.com/post/specification-for-maven-bom/</guid><description>&lt;div class="paragraph">
&lt;p>在 &lt;a href="https://www.diguage.com/post/experience-about-upgrading-java-dependencies/" target="_blank" rel="noopener">关于升级 Spring 等依赖的一些经验&lt;/a> 中介绍了 D瓜哥在升级项目依赖时，遇到的一些问题以及一些需要注意的地方。但是，这里还存在一个问题：&lt;strong>各个依赖的版本依然散落在各个项目中；升级依赖，需要在所有项目中，把所有相关项目的依赖都巴拉一下，费时费力。&lt;/strong>解决这个问题的一个比较好的办法是&lt;strong>制定一个组织内部的 Maven BOM，集中管理相关依赖的版本。&lt;/strong>这样升级的时候，还需要修改 BOM 的版本号即可。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_maven_bom_介绍">Maven BOM 介绍&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>BOM（Bill of Materials）是由 Maven 提供的功能,它通过定义一整套相互兼容的 jar 包版本集合，使用时只需要依赖该BOM文件，即可放心的使用需要的依赖 jar 包，且无需再指定版本号。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_一些基本原则">一些基本原则&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>Spring &amp;amp; Spring Boot 是 Java 生态中，全世界广泛使用的开发框架，在各种场景中都经受过考验。所以，Spring &amp;amp; Spring Boot 选择的 Jar 在稳定性和兼容性方面都有保证。另外，Spring Boot 本身就集成了非常非常多的依赖，并为此创建了一个网页 &lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/html/dependency-versions.html" target="_blank" rel="noopener">Spring Boot Dependency versions&lt;/a> 来说明它集成的依赖及版本。故而，可以选择以 Spring Boot 为底本，来制作自己的 BOM。&lt;/p>
&lt;div class="olist loweralpha">
&lt;ol class="loweralpha" type="a">
&lt;li>
&lt;p>如果不需要 Spring 相关依赖，可以将 Spring 相关依赖删除掉，然后在其之上增加组织内部依赖而创建自己的 BOM。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果需要 Spring 相关依赖，那么直接继承&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>在稳定性方面，经过更多人检验的版本，则稳定性更有保障。所以，选择最近两年下载次数比较多的版本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>更新的版本，更容易获得技术升级带来的红利。所以，在可能的情况下，优先选择高版本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>优先考虑目标 JDK 的支持情况。例如，一些依赖的高版本或低版本不支持 Java 8，但是 Java 8 是生产环境部署的主要版本，那么太高的版本和低版本都不适合。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_外部_jar_包选择标准">外部 Jar 包选择标准&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>尽量将外部中间件统一到同一种依赖的同一个版本上。例如：数据库连接池全部使用 HikariCP；JSON 处理统一使用 Jackson。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择最近两年发布的版本中，下载次数最多的版本为准。如果有发布的小版本升级，则在该版本基础上，该版本的最新修订版。例如，1.2.3 是最近两年下载最多的版本，但是 1.2.4 已经发布，则优先选择使用 1.2.4。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果有两个大版本，高版本符合条件的情况下，优先选择高版本。低版本大概率是先淘汰的，高版本相对来说维护时间更长，另外高版本的代码优化得更佳。例如，Ehcache 的选择。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果传递依赖造成依赖 Jar 包版本冲突，则尽可能选择高版本的 Jar。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>持续演进的项目的依赖优先级更高；相反，临近淘汰的项目优先级降低，甚至不予考虑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>两年以上未更新的依赖，在 API 兼容的情况下，直接升级到最新版。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>没有显示使用而是间接引入的依赖，不再单独声明，由直接依赖来引入。如果需要解决冲突，则按照上面的原则来处理。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Java 虚拟机指令(操作码)集</title><link>https://www.diguage.com/post/jvm-instruction-set/</link><pubDate>Wed, 31 Aug 2022 13:00:44 +0800</pubDate><guid>https://www.diguage.com/post/jvm-instruction-set/</guid><description>&lt;div class="paragraph">
&lt;p>最近在研究 Java 虚拟机字节码。在 &lt;a href="https://book.douban.com/subject/26418340/" target="_blank" rel="noopener">《Java虚拟机规范》&lt;/a> 看到一个整理完整的 Java 虚拟机指令集（也叫操作码）列表。转载过来，方便查阅。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>关于 Java 虚拟机指令(操作码)，准备写一个“探秘”系列：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/jvm-bytecode-constant/" target="_blank" rel="noopener">Java 虚拟机操作码探秘：常量指令&lt;/a> — 重点介绍一下关于“常量”指令。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;table class="tableblock frame-all grid-all stripes-even stretch">
&lt;colgroup>
&lt;col style="width: 7%;"/>
&lt;col style="width: 7%;"/>
&lt;col style="width: 7%;"/>
&lt;col style="width: 12%;"/>
&lt;col style="width: 67%;"/>
&lt;/colgroup>
&lt;thead>
&lt;tr>
&lt;th class="tableblock halign-center valign-middle">分类&lt;/th>
&lt;th class="tableblock halign-center valign-middle" colspan="2">操作码&lt;/th>
&lt;th class="tableblock halign-center valign-middle">助记符&lt;/th>
&lt;th class="tableblock halign-center valign-middle">指令含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle" rowspan="21">&lt;p class="tableblock">常量&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">0&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x00&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.nop" target="_blank" rel="noopener">nop&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">什么都不做&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">1&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x01&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.aconst_null" target="_blank" rel="noopener">aconst_null&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 null 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">2&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x02&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iconst_i" target="_blank" rel="noopener">iconst_m1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 int 类型 -1 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">3&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x03&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iconst_i" target="_blank" rel="noopener">iconst_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 int 类型 0 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">4&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x04&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iconst_i" target="_blank" rel="noopener">iconst_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 int 类型 1 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">5&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x05&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iconst_i" target="_blank" rel="noopener">iconst_2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 int 类型 2 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">6&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x06&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iconst_i" target="_blank" rel="noopener">iconst_3&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 int 类型 3 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">7&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x07&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iconst_i" target="_blank" rel="noopener">iconst_4&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 int 类型 4 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">8&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x08&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iconst_i" target="_blank" rel="noopener">iconst_5&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 int 类型 5 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">9&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x09&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lconst_l" target="_blank" rel="noopener">lconst_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 long 类型 0 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">10&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x0a&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lconst_l" target="_blank" rel="noopener">lconst_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 long 类型 1 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">11&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x0b&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fconst_f" target="_blank" rel="noopener">fconst_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 float 类型 0 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">12&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x0c&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fconst_f" target="_blank" rel="noopener">fconst_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 float 类型 1 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">13&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x0d&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fconst_f" target="_blank" rel="noopener">fconst_2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 float 类型 2 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">14&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x0e&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dconst_d" target="_blank" rel="noopener">dconst_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 double 类型 0 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">15&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x0f&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dconst_d" target="_blank" rel="noopener">dconst_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 double 类型 1 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">16&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x10&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.bipush" target="_blank" rel="noopener">bipush&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将单字节的常量值(-128 ~ 127)推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">17&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x11&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.sipush" target="_blank" rel="noopener">sipush&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将一个短整类型常量值(-32,768 ~ 32,767)推送栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">18&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x12&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ldc" target="_blank" rel="noopener">ldc&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 int、 float 或 String 类型常量值从常量池中推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">19&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x13&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ldc_w" target="_blank" rel="noopener">ldc_w&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将int、 float 或 String 类型常量值从常量池中推送栈顶(宽索引)&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">20&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x14&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ldc2_w" target="_blank" rel="noopener">ldc2_w&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 long 或 double 类型常量值从常量池中推送至栈(宽索引)&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle" rowspan="33">&lt;p class="tableblock">加载&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">21&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;code>0x15&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iload" target="_blank" rel="noopener">iload&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将指定的 int 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">22&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x16&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lload" target="_blank" rel="noopener">lload&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将指定的 long 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">23&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x17&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fload" target="_blank" rel="noopener">fload&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将指定的 float 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">24&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x18&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dload" target="_blank" rel="noopener">dload&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将指定的 double 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">25&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x19&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.aload" target="_blank" rel="noopener">aload&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将指定的引用类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">26&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x1a&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iload_n" target="_blank" rel="noopener">iload_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 1 个 int 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">27&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x1b&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iload_n" target="_blank" rel="noopener">iload_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 2 个 int 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">28&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x1c&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iload_n" target="_blank" rel="noopener">iload_2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 3 个 int 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">29&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x1d&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iload_n" target="_blank" rel="noopener">iload_3&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 4 个 int 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">30&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x1e&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lload_n" target="_blank" rel="noopener">lload_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 1 个 long 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">31&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x1f&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lload_n" target="_blank" rel="noopener">lload_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 2 个 long 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">32&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x20&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lload_n" target="_blank" rel="noopener">lload_2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 3 个 long 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">33&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x21&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lload_n" target="_blank" rel="noopener">lload_3&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 4 个 long 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">34&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x22&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fload_n" target="_blank" rel="noopener">fload_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 1 个 float 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">35&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x23&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fload_n" target="_blank" rel="noopener">fload_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 2 个 float 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">36&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x24&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fload_n" target="_blank" rel="noopener">fload_2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 3 个 float 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">37&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x25&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fload_n" target="_blank" rel="noopener">fload_3&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 4 个 float 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">38&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x26&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dload_n" target="_blank" rel="noopener">dload_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 1 个 double 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">39&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x27&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dload_n" target="_blank" rel="noopener">dload_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 2 个 double 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">40&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x28&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dload_n" target="_blank" rel="noopener">dload_2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 3 个 double 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">41&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x29&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dload_n" target="_blank" rel="noopener">dload_3&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 4 个 double 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">42&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x2a&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.aload_n" target="_blank" rel="noopener">aload_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 1 个引用类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">43&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x2b&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.aload_n" target="_blank" rel="noopener">aload_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 2 个引用类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">44&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x2c&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.aload_n" target="_blank" rel="noopener">aload_2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 3 个引用类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">45&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x2d&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.aload_n" target="_blank" rel="noopener">aload_3&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 4 个引用类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">46&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x2e&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iaload" target="_blank" rel="noopener">iaload&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 int 类型数组的指定元素推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">47&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x2f&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.laload" target="_blank" rel="noopener">laload&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 long 类型数组的指定元素推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">48&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x30&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.faload" target="_blank" rel="noopener">faload&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 float 类型数组的指定元素推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">49&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x31&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.daload" target="_blank" rel="noopener">daload&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 double 类型数组的指定元素推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">50&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x32&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.aaload" target="_blank" rel="noopener">aaload&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将引用类型数组的指定元素推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">51&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x33&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.baload" target="_blank" rel="noopener">baload&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 boolean 或 byte 类型数组的指定元素推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">52&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x34&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.caload" target="_blank" rel="noopener">caload&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 char 类型数组的指定元素推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">53&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x35&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.saload" target="_blank" rel="noopener">saload&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 short 类型数组的指定元素推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle" rowspan="33">&lt;p class="tableblock">存储&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">54&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;code>0x36&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.istore" target="_blank" rel="noopener">istore&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 int 类型数值存入指定本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">55&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x37&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lstore" target="_blank" rel="noopener">lstore&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 long 类型数值存入指定本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">56&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x38&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fstore" target="_blank" rel="noopener">fstore&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 float 类型数值存入指定本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">57&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x39&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dstore" target="_blank" rel="noopener">dstore&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 double 类型数值存入指定本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">58&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x3a&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.astore" target="_blank" rel="noopener">astore&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶引用类型数值存入指定本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">59&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x3b&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.istore_n" target="_blank" rel="noopener">istore_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 int 类型数值存入第 1 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">60&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x3c&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.istore_n" target="_blank" rel="noopener">istore_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 int 类型数值存入第 2 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">61&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x3d&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.istore_n" target="_blank" rel="noopener">istore_2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 int 类型数值存入第 3 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">62&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x3e&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.istore_n" target="_blank" rel="noopener">istore_3&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 int 类型数值存入第 4 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">63&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x3f&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lstore_n" target="_blank" rel="noopener">lstore_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 long 类型数值存入第 1 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">64&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x40&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lstore_n" target="_blank" rel="noopener">lstore_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 long 类型数值存入第 2 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">65&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x41&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lstore_n" target="_blank" rel="noopener">lstore_2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 long 类型数值存入第 3 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">66&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x42&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lstore_n" target="_blank" rel="noopener">lstore_3&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 long 类型数值存入第 4 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">67&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x43&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fstore_n" target="_blank" rel="noopener">fstore_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 float 类型数值存入第 1 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">68&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x44&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fstore_n" target="_blank" rel="noopener">fstore_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 float 类型数值存入第 2 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">69&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x45&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fstore_n" target="_blank" rel="noopener">fstore_2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 float 类型数值存入第 3 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">70&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x46&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fstore_n" target="_blank" rel="noopener">fstore_3&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 float 类型数值存入第 4 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">71&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x47&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dstore_n" target="_blank" rel="noopener">dstore_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 double 类型数值存入第 1 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">72&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x48&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dstore_n" target="_blank" rel="noopener">dstore_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 double 类型数值存入第 2 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">73&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x49&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dstore_n" target="_blank" rel="noopener">dstore_2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 double 类型数值存入第 3 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">74&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x4a&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dstore_n" target="_blank" rel="noopener">dstore_3&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 double 类型数值存入第 4 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">75&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x4b&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.astore_n" target="_blank" rel="noopener">astore_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶引用类型数值存入第 1 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">76&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x4c&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.astore_n" target="_blank" rel="noopener">astore_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶引用类型数值存入第 2 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">77&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x4d&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.astore_n" target="_blank" rel="noopener">astore_2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶引用类型数值存入第 3 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">78&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x4e&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.astore_n" target="_blank" rel="noopener">astore_3&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶引用类型数值存入第 4 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">79&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x4f&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iastore" target="_blank" rel="noopener">iastore&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 int 类型数值存入指定数组的指定索引位置&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">80&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x50&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lastore" target="_blank" rel="noopener">lastore&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 long 类型数值存入指定数组的指定索引位置&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">81&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x51&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fastore" target="_blank" rel="noopener">fastore&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 float 类型数值存入指定数组的指定索引位置&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">82&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x52&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dastore" target="_blank" rel="noopener">dastore&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 double 类型数值存入指定数组的指定索引位置&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">83&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x53&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.aastore" target="_blank" rel="noopener">aastore&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶引用类型数值存入指定数组的指定索引位置&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">84&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x54&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.bastore" target="_blank" rel="noopener">bastore&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 boolean 或 byte 类型数值存入指定数组的指定索引位置&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">85&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x55&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.castore" target="_blank" rel="noopener">castore&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 char 类型数值存入指定数组的指定索引位置&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">86&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x56&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.sastore" target="_blank" rel="noopener">sastore&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 short 类型数值存入指定数组的指定索引位置&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle" rowspan="9">&lt;p class="tableblock">栈&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">87&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;code>0x57&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.pop" target="_blank" rel="noopener">pop&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶数值弹出(数值不能是 long 或 double 类型的)&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">88&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x58&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.pop2" target="_blank" rel="noopener">pop2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶的一个 long 或 double 类型的数值或两个其他类型的数值弹出&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">89&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x59&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dup" target="_blank" rel="noopener">dup&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">复制栈顶数值并将复制值压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">90&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x5a&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dup_x1" target="_blank" rel="noopener">dup_x1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">复制栈顶值并将其插入栈顶那两个值的下面&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">91&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x5b&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dup_x2" target="_blank" rel="noopener">dup_x2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">复制栈顶值并将其插入栈顶那两个或三个值的下面&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">92&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x5c&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dup2" target="_blank" rel="noopener">dup2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">复制栈顶的一个 long 或 double 类型的值，或两个其他类型的值，并将其压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">93&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x5d&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dup2_x1" target="_blank" rel="noopener">dup2_x1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">复制栈顶的一个或两个值，并将其插入栈顶那两个或三个值的下面&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">94&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x5e&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dup2_x2" target="_blank" rel="noopener">dup2_x2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">复制栈顶的一个或两个值，并将其插入栈顶那两个、三个或四个值的下面&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">95&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x5f&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.swap" target="_blank" rel="noopener">swap&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶的两个数值互换(数值不能是 long 或 double 类型的)&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle" rowspan="37">&lt;p class="tableblock">数学&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">96&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;code>0x60&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iadd" target="_blank" rel="noopener">iadd&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 int 类型数值相加并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">97&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x61&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ladd" target="_blank" rel="noopener">ladd&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 1ong 类型数值相加并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">98&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x62&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fadd" target="_blank" rel="noopener">fadd&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 float 类型数值相加并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">99&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x63&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dadd" target="_blank" rel="noopener">dadd&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 double 类型数值相加并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">100&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x64&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.isub" target="_blank" rel="noopener">isub&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 int 类型数值相减并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">101&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x65&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lsub" target="_blank" rel="noopener">lsub&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 long 类型数值相减并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">102&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x66&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fsub" target="_blank" rel="noopener">fsub&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 float 类型数值相减并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">103&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x67&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dsub" target="_blank" rel="noopener">dsub&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 double 类型数值相减并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">104&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x68&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.imul" target="_blank" rel="noopener">imul&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 int 类型数值相乘并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">105&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x69&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lmul" target="_blank" rel="noopener">lmul&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 long 类型数值相乘并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">106&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x6a&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fmul" target="_blank" rel="noopener">fmul&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 float 类型数值相乘并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">107&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x6b&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dmul" target="_blank" rel="noopener">dmul&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 double 类型数值相乘并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">108&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x6с&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.idiv" target="_blank" rel="noopener">idiv&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 int 类型数值相除并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">109&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x6d&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ldiv" target="_blank" rel="noopener">ldiv&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 long 类型数值相除并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">110&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x6e&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fdiv" target="_blank" rel="noopener">fdiv&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 float 类型数值相除并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">111&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x6f&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ddiv" target="_blank" rel="noopener">ddiv&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 double 类型数值相除并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">112&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x70&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.irem" target="_blank" rel="noopener">irem&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 int 类型数值作取模运算并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">113&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x71&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lrem" target="_blank" rel="noopener">lrem&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 long 类型数值作取模运算并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">114&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x72&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.frem" target="_blank" rel="noopener">frem&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 float 类型数值作取模运算并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">115&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x73&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.drem" target="_blank" rel="noopener">drem&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 double 类型数值作取模运算并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">116&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x74&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ineg" target="_blank" rel="noopener">ineg&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 int 类型数值取负并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">117&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x75&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lneg" target="_blank" rel="noopener">lneg&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 long 类型数值取负并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">118&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x76&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fneg" target="_blank" rel="noopener">fneg&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 float 类型数值取负并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">119&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x77&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dneg" target="_blank" rel="noopener">dneg&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 double 类型数值取负并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">120&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x78&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ishl" target="_blank" rel="noopener">ishl&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 int 类型数值左移位指定位数并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">121&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x79&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lshl" target="_blank" rel="noopener">lshl&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 long 类型数值左移位指定位数并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">122&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x7a&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ishr" target="_blank" rel="noopener">ishr&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 int 类型数值(有符号)右移位指定位数并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">123&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x7b&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lshr" target="_blank" rel="noopener">lshr&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 long 类型数值(有符号)右移位指定位数并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">124&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">0x7c&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iushr" target="_blank" rel="noopener">iushr&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 int 类型数值(无符号)右移位指定位数并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">125&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x7d&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lushr" target="_blank" rel="noopener">lushr&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 long 类型数值(无符号)右移位指定位数并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">126&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x7e&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iand" target="_blank" rel="noopener">iand&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 int 类型数值作“按位与”并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">127&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x7f&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.land" target="_blank" rel="noopener">land&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 long 类型数值作“按位与”并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">128&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x80&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ior" target="_blank" rel="noopener">ior&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 int 类型数值作“按位或”并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">129&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">0x81&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lor" target="_blank" rel="noopener">lor&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 long 类型数值作“按位或”并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">130&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x82&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ixor" target="_blank" rel="noopener">ixor&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 int 类型数值作“按位异或”并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">131&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x83&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lxor" target="_blank" rel="noopener">lxor&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 long 类型数值作“按位异或”并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">132&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x84&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iinc" target="_blank" rel="noopener">iinc&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将指定 int 类型变量增加指定值(&lt;code>i++&lt;/code>，&lt;code>i--&lt;/code>，&lt;code>i += 2&lt;/code>)&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle" rowspan="15">&lt;p class="tableblock">转换&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">133&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;code>0x85&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.i2l" target="_blank" rel="noopener">i2l&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 int 类型数值强制转换成 long 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">134&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x86&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.i2f" target="_blank" rel="noopener">i2f&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 int 类型数值强制转换成 float 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">135&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x87&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.i2d" target="_blank" rel="noopener">i2d&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 int 类型数值强制转换成 double 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">136&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x88&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.l2i" target="_blank" rel="noopener">l2i&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 long 类型数值强制转换成 int 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">137&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x89&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.l2f" target="_blank" rel="noopener">l2f&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 long 类型数值强制转换成 float 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">138&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x8a&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.l2d" target="_blank" rel="noopener">l2d&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 long 类型数值强制转换成 double 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">139&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x8b&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.f2i" target="_blank" rel="noopener">f2i&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 float 类型数值强制转换成 int 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">140&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x8c&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.f2l" target="_blank" rel="noopener">f2l&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 float 类型数值强制转换成 long 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">141&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x8d&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.f2d" target="_blank" rel="noopener">f2d&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 float 类型数值强制转换成 double 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">142&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x8e&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.d2i" target="_blank" rel="noopener">d2i&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 double 类型数值强制转换成 int 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">143&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x8f&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.d2l" target="_blank" rel="noopener">d2l&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 double 类型数值强制转换成 long 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">144&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x90&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.d2f" target="_blank" rel="noopener">d2f&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 double 类型数值强制转换成 float 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">145&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x91&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.i2b" target="_blank" rel="noopener">i2b&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 int 类型数值强制转换成 byte 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">146&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x92&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.i2c" target="_blank" rel="noopener">i2c&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 int 类型数值强制转换成 char 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">147&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x93&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.i2s" target="_blank" rel="noopener">i2s&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 int 类型数值强制转换成 short 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle" rowspan="19">&lt;p class="tableblock">比较&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">148&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;code>0x94&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lcmp" target="_blank" rel="noopener">lcmp&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">比较栈顶两 long 类型数值大小，并将结果(1，0，-1)压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">149&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x95&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fcmp_op" target="_blank" rel="noopener">fcmpl&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">比较栈顶两 float 类型数值大小，并将结果(1，0，-1)压入栈顶；当其中一个数值为“NaN”时，将 -1 压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">150&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x96&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fcmp_op" target="_blank" rel="noopener">fcmpg&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">比较栈顶两 float 类型数值大小，并将结果(1，0，-1)压入栈顶；当其中一个数值为“NaN”时，将1压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">151&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x97&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dcmp_op" target="_blank" rel="noopener">dcmpl&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">比较栈顶两 double 类型数值大小，并将结果(1，0，-1)压入栈顶；当其中一个数值为“NaN”时，将-1压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">152&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x98&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dcmp_op" target="_blank" rel="noopener">dcmpg&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">比较栈顶两 double 类型数值大小，并将结果(1，0，-1)压入栈顶；当其中一个数值为“NaN”时，将1压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">153&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x99&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_cond" target="_blank" rel="noopener">ifeq&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">当栈顶 int 类型数值等于 0 时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">154&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x9a&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_cond" target="_blank" rel="noopener">ifne&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">当栈顶 int 类型数值不等于 0 时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">155&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x9b&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_cond" target="_blank" rel="noopener">iflt&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">当栈顶 int 类型数值小于 0 时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">156&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x9c&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_cond" target="_blank" rel="noopener">ifge&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">当栈顶 int 类型数值大于等于 0 时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">157&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x9d&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_cond" target="_blank" rel="noopener">ifgt&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">当栈顶 int 类型数值大于 0 时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">158&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x9e&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_cond" target="_blank" rel="noopener">ifle&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">当栈顶 int 类型数值小于等于 0 时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">159&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x9f&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_icmp_cond" target="_blank" rel="noopener">if_icmpeq&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">比较栈顶两 int 类型数值大小，当前者等于后者时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">160&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xa0&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_icmp_cond" target="_blank" rel="noopener">if_icmpne&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">比较栈顶两 int 类型数值大小，当前者不等于后者时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">161&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xa1&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_icmp_cond" target="_blank" rel="noopener">if_icmplt&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">比较栈顶两 int 类型数值大小，当前者小于后者时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">162&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xa2&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_icmp_cond" target="_blank" rel="noopener">if_icmpge&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">比较栈顶两 int 类型数值大小，当前者大于等于后者时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">163&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xa3&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_icmp_cond" target="_blank" rel="noopener">if_icmpgt&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">比较栈顶两 int 类型数值大小，当前者大于后者时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">164&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xa4&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_icmp_cond" target="_blank" rel="noopener">if_icmple&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">比较栈顶两 int 类型数值大小，当前者小于等于后者时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">165&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xa5&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_acmp_cond" target="_blank" rel="noopener">if_acmpeq&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">比较栈顶两引用类型数值，当结果相等时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">166&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xa6&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_acmp_cond" target="_blank" rel="noopener">ifacmpne&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">比较栈顶两引用类型数值，当结果不相等时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle" rowspan="11">&lt;p class="tableblock">控制&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">167&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;code>0xa7&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.goto" target="_blank" rel="noopener">goto&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">无条件跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">168&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xa8&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.jsr" target="_blank" rel="noopener">jsr&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">跳转至指定 16 位 offset 位置，并将 jsr 下一条指令地址压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">169&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xa9&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ret" target="_blank" rel="noopener">ret&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">返回至由指定的局部变量所给出的指令位置(一般与 jsr、jsr_w 联合使用)&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">170&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xaa&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.tableswitch" target="_blank" rel="noopener">tableswitch&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">用于 switch 条件跳转，case 值连续(变长指令)&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">171&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xab&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lookupswitch" target="_blank" rel="noopener">lookupswitch&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">用于 switch 条件跳转，case 值不连续(变长指令)&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">172&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xac&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ireturn" target="_blank" rel="noopener">ireturn&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">从当前方法返回 int&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">173&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>Oxad&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lreturn" target="_blank" rel="noopener">lreturn&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">从当前方法返回 long&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">174&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xae&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.freturn" target="_blank" rel="noopener">freturn&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">从当前方法返回 float&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">175&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xaf&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dreturn" target="_blank" rel="noopener">dreturn&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">从当前方法返回 double&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">176&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xb0&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.areturn" target="_blank" rel="noopener">areturn&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">从当前方法返回对象引用&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">177&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xb1&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.return" target="_blank" rel="noopener">return&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">从当前方法返回void&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle" rowspan="18">&lt;p class="tableblock">引用&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">178&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;code>0xb2&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.getstatic" target="_blank" rel="noopener">getstatic&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">获取指定类的静态字段，并将其值压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">179&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xb3&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.putstatic" target="_blank" rel="noopener">putstatic&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">为指定类的静态字段赋值&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">180&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xb4&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.getfield" target="_blank" rel="noopener">getfield&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">获取指定类的实例字段，并将其值压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">181&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xb5&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.putfield" target="_blank" rel="noopener">putfield&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">为指定类的实例字段赋值&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">182&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xb6&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.invokevirtual" target="_blank" rel="noopener">invokevirtual&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">调用实例方法&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">183&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xb7&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.invokespecial" target="_blank" rel="noopener">invokespecial&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">调用父类方法、实例初始化方法、私有方法&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">184&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xb8&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.invokestatic" target="_blank" rel="noopener">invokestatic&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">调用静态方法&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">185&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xb9&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.invokeinterface" target="_blank" rel="noopener">invokeinterface&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">调用接口方法&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">186&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xba&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.invokedynamic" target="_blank" rel="noopener">invokedynamic&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">调用动态链接方法&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">187&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xbb&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.new" target="_blank" rel="noopener">new&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">创建一个对象，并将其引用值压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">188&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xbc&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.newarray" target="_blank" rel="noopener">newarray&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">创建一个指定原始类型(如int、float 、char等)的数组，并将其引用值压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">189&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xbd&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.anewarray" target="_blank" rel="noopener">anewarray&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">创建一个引用型(如类、接口、数组)的数组，并将其引用值压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">190&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xbe&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.arraylength" target="_blank" rel="noopener">arraylength&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">获得数组的长度值并压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">191&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xbf&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.athrow" target="_blank" rel="noopener">athrow&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶的异常抛出&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">192&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">0xcO&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.checkcast" target="_blank" rel="noopener">checkcast&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">检验类型转换，检验未通过将抛出 ClassCastException&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">193&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">0xc1&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.instanceof" target="_blank" rel="noopener">instanceof&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">检验对象是否是指定类的实例。如果是，就将 1 压入栈顶，否则将 0 压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">194&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xc2&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.monitorenter" target="_blank" rel="noopener">monitorenter&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">获得对象的锁，用于实现同步块&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">195&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xc3&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.monitorexit" target="_blank" rel="noopener">monitorexit&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">释放对象的锁，用于实现同步块&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle" rowspan="6">&lt;p class="tableblock">扩展&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">196&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;code>0xc4&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.wide" target="_blank" rel="noopener">wide&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">扩展本地变量索引的宽度&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">197&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xс5&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.multianewarray" target="_blank" rel="noopener">multianewarray&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">创建指定类型和指定维度的多维数组(执行该指令时，操作栈中必须包含各维度的长度值)，并将其引用值压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">198&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xc6&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ifnull" target="_blank" rel="noopener">ifnull&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">为nu11时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">199&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xc7&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ifnonnull" target="_blank" rel="noopener">ifnonnull&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">不为nu11时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">200&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xc8&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.goto_w" target="_blank" rel="noopener">goto_w&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">无条件跳转(宽索引)&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">201&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xc9&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.jsr_w" target="_blank" rel="noopener">jsr_w&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">跳转至指定 32 位 offset 位置，并将 jsr_w 下一条指令地址压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle" rowspan="3">&lt;p class="tableblock">保留指令&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">202&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;code>Оxca&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">breakpoint&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">调试时的断点标记&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">254&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>Oxfe&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">impdep1&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">为特定软件面预留的语言后门&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">255&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xff&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">impdep2&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">为特定硬件面预留的语言后门&lt;/p>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="sect1">
&lt;h2 id="_参考资料">参考资料&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html" target="_blank" rel="noopener">Chapter 6. The Java Virtual Machine Instruction Set&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Java_bytecode" target="_blank" rel="noopener">Java bytecode&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/List_of_Java_bytecode_instructions" target="_blank" rel="noopener">List of Java bytecode instructions&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>关于升级 Spring 等依赖的一些经验</title><link>https://www.diguage.com/post/experience-about-upgrading-java-dependencies/</link><pubDate>Sun, 28 Aug 2022 09:19:59 +0800</pubDate><guid>https://www.diguage.com/post/experience-about-upgrading-java-dependencies/</guid><description>&lt;div class="paragraph">
&lt;p>到公司后，熟悉了一些项目后，发现大部分项目的依赖都比较陈旧，比如某些项目还在使用 Spring 3.x 的版本。所以，在进行需求开发时，也顺手把一些项目的依赖给升级了一下。周五，一个小伙伴问我关于升级 Spring 的经验。正好趁此机会，把一些经验总结一下。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>下面的描述以 Java 8 为准，没有在其他版本 Java 上试验过。参考时，请慎重。描述的原则如下：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>尽量选择还在维护中的版本，而不是已经 End of Life 的过时版。这样有问题可以及时反馈并得到修复。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Java 8 是目标版本，所以，一定要兼容 Java 8。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_spring_framework_升级">Spring Framework 升级&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>Spring Framework 从 3.2.6.RELEASE 开始提供 BOM。可以利用 BOM 简化 Spring 依赖声明：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="xml">&lt;span class="c">&amp;lt;!-- D瓜哥 · &lt;a href="https://www.diguage.com" target="_blank">https://www.diguage.com&lt;/a> --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependencyManagement&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;dependencies&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-framework-bom&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>5.3.25&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;type&amp;gt;&lt;/span>pom&lt;span class="nt">&amp;lt;/type&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;scope&amp;gt;&lt;/span>import&lt;span class="nt">&amp;lt;/scope&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependencyManagement&amp;gt;&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>这样，就不需要重复声明 Spring 依赖的版本，直接使用即可。 Spring Framework Bom 保证了 Spring 自身依赖的版本统一。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>这里，关于 Spring 的升级，还有几点需要说明：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>从 Spring 3.X 升级到 Spring 4.X+ 后，原来的 &lt;code>MappingJacksonHttpMessageConverter&lt;/code> 已经被删除了；直接使用 &lt;code>MappingJackson2HttpMessageConverter&lt;/code> 即可。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从 Spring 3.0.0.RELEASE 到 Spring 3.1.4.RELEASE，Spring 有一个 &lt;code>spring-asm&lt;/code>，如果不再使用这个区间的 Spring，请把这个依赖删掉。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果使用了 Apache Velocity 1.X 作为前端模板，由于 Spring 5+ 将相关集成代码删除，所以，只能将 Spring 升级到 4.3.30.RELEASE。相关 BOM 如下：&lt;/p>
&lt;div class="openblock">
&lt;div class="content">
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="xml">&lt;span class="c">&amp;lt;!-- D瓜哥 · &lt;a href="https://www.diguage.com" target="_blank">https://www.diguage.com&lt;/a> --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-framework-bom&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>4.3.30.RELEASE&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;type&amp;gt;&lt;/span>pom&lt;span class="nt">&amp;lt;/type&amp;gt;&lt;/span>
 &lt;span class="nt">&amp;lt;scope&amp;gt;&lt;/span>import&lt;span class="nt">&amp;lt;/scope&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>Hessian、Msgpack 和 JSON 实例对比</title><link>https://www.diguage.com/post/hessian-vs-msgpack-vs-json/</link><pubDate>Fri, 05 Aug 2022 11:28:03 +0800</pubDate><guid>https://www.diguage.com/post/hessian-vs-msgpack-vs-json/</guid><description>&lt;div class="paragraph">
&lt;p>前段时间，翻译了 Hessian 2.0 的序列化协议，发布在了 &lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a>。但是，其中有很多言语不详之处。所以，接下来会用几篇文章来详细解释并实践一下 Hessian 序列化协议，以求做到知其然知其所以然。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>目录如下：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a> — Hessian 序列化协议的中文翻译版。根据后面的“协议解释与实战”系列文章，增加了协议内容错误提示。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/" target="_blank" rel="noopener">Hessian 协议解释与实战（一）：布尔、日期、浮点数与整数&lt;/a> — 介绍布尔型数据、日期类型、浮点类型数据和整数类型数据等四种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-2/" target="_blank" rel="noopener">Hessian 协议解释与实战（二）：长整型、二进制数据与 Null&lt;/a> — 介绍长整数类型数据、二进制数据和 &lt;code>null&lt;/code> 等三种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-3/" target="_blank" rel="noopener">Hessian 协议解释与实战（三）：字符串&lt;/a> — 专门介绍了关于字符串的处理。由于字符串需要铺垫的基础知识比较多，处理细节也有繁琐，所以单独成篇来介绍。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-source-analysis-for-java/" target="_blank" rel="noopener">Hessian 源码分析（Java）&lt;/a> — 开始第四篇分析之前，先来介绍一下 Hessian 的源码实现。方便后续展开说明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-4/" target="_blank" rel="noopener">Hessian 协议解释与实战（四）：数组与集合&lt;/a> — 铺垫了一些关于实例对象的处理，重点介绍关于数组和集合的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-5/" target="_blank" rel="noopener">Hessian 协议解释与实战（五）：对象与映射&lt;/a> — 重点介绍关于对象与映射的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-vs-msgpack-vs-json/" target="_blank" rel="noopener">Hessian、Msgpack 和 JSON 实例对比&lt;/a> — 用实例对比 JSON、Hessian 和 MessagePack 的区别。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/schema-evolution-in-avro-protobuf-thrift" target="_blank" rel="noopener">Avro、ProtoBuf、Thrift 的模式演进之路&lt;/a> — 翻译的 Martin Kleppmann 的文章，重点对比了 Avro、ProtoBuf、Thrift 的序列化处理思路。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;hr/>
&lt;div class="paragraph">
&lt;p>本文用实际来对比一下 JSON、Hessian 和 MessagePack 的区别。&lt;/p>
&lt;/div></description></item><item><title>Hessian 协议解释与实战（五）：对象与映射</title><link>https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-5/</link><pubDate>Tue, 31 May 2022 16:02:13 +0800</pubDate><guid>https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-5/</guid><description>&lt;div class="paragraph">
&lt;p>前段时间，翻译了 Hessian 2.0 的序列化协议，发布在了 &lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a>。但是，其中有很多言语不详之处。所以，接下来会用几篇文章来详细解释并实践一下 Hessian 序列化协议，以求做到知其然知其所以然。目录如下：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a> — Hessian 序列化协议的中文翻译版。根据后面的“协议解释与实战”系列文章，增加了协议内容错误提示。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/" target="_blank" rel="noopener">Hessian 协议解释与实战（一）：布尔、日期、浮点数与整数&lt;/a> — 介绍布尔型数据、日期类型、浮点类型数据和整数类型数据等四种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-2/" target="_blank" rel="noopener">Hessian 协议解释与实战（二）：长整型、二进制数据与 Null&lt;/a> — 介绍长整数类型数据、二进制数据和 &lt;code>null&lt;/code> 等三种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-3/" target="_blank" rel="noopener">Hessian 协议解释与实战（三）：字符串&lt;/a> — 专门介绍了关于字符串的处理。由于字符串需要铺垫的基础知识比较多，处理细节也有繁琐，所以单独成篇来介绍。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-source-analysis-for-java/" target="_blank" rel="noopener">Hessian 源码分析（Java）&lt;/a> — 开始第四篇分析之前，先来介绍一下 Hessian 的源码实现。方便后续展开说明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-4/" target="_blank" rel="noopener">Hessian 协议解释与实战（四）：数组与集合&lt;/a> — 铺垫了一些关于实例对象的处理，重点介绍关于数组和集合的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-5/" target="_blank" rel="noopener">Hessian 协议解释与实战（五）：对象与映射&lt;/a> — 重点介绍关于对象与映射的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-vs-msgpack-vs-json/" target="_blank" rel="noopener">Hessian、Msgpack 和 JSON 实例对比&lt;/a> — 用实例对比 JSON、Hessian 和 MessagePack 的区别。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/schema-evolution-in-avro-protobuf-thrift" target="_blank" rel="noopener">Avro、ProtoBuf、Thrift 的模式演进之路&lt;/a> — 翻译的 Martin Kleppmann 的文章，重点对比了 Avro、ProtoBuf、Thrift 的序列化处理思路。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;hr/>
&lt;div class="paragraph">
&lt;p>在上一篇文章 &lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-4/" target="_blank" rel="noopener">Hessian 协议解释与实战（四）：数组与集合&lt;/a> 中研究了数组和集合的处理方式。接下来介绍对象和映射的处理。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_基础工具方法">基础工具方法&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>基础工具方法就不再赘述，请直接参考 &lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/#helper-methods" target="_blank" rel="noopener">Hessian 协议解释与实战（一）：基础工具方法&lt;/a> 中提到的几个方法。&lt;/p>
&lt;/div></description></item><item><title>Hessian 协议解释与实战（四）：数组与集合</title><link>https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-4/</link><pubDate>Thu, 26 May 2022 18:01:43 +0800</pubDate><guid>https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-4/</guid><description>&lt;div class="paragraph">
&lt;p>前段时间，翻译了 Hessian 2.0 的序列化协议，发布在了 &lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a>。但是，其中有很多言语不详之处。所以，接下来会用几篇文章来详细解释并实践一下 Hessian 序列化协议，以求做到知其然知其所以然。目录如下：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a> — Hessian 序列化协议的中文翻译版。根据后面的“协议解释与实战”系列文章，增加了协议内容错误提示。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/" target="_blank" rel="noopener">Hessian 协议解释与实战（一）：布尔、日期、浮点数与整数&lt;/a> — 介绍布尔型数据、日期类型、浮点类型数据和整数类型数据等四种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-2/" target="_blank" rel="noopener">Hessian 协议解释与实战（二）：长整型、二进制数据与 Null&lt;/a> — 介绍长整数类型数据、二进制数据和 &lt;code>null&lt;/code> 等三种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-3/" target="_blank" rel="noopener">Hessian 协议解释与实战（三）：字符串&lt;/a> — 专门介绍了关于字符串的处理。由于字符串需要铺垫的基础知识比较多，处理细节也有繁琐，所以单独成篇来介绍。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-source-analysis-for-java/" target="_blank" rel="noopener">Hessian 源码分析（Java）&lt;/a> — 开始第四篇分析之前，先来介绍一下 Hessian 的源码实现。方便后续展开说明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-4/" target="_blank" rel="noopener">Hessian 协议解释与实战（四）：数组与集合&lt;/a> — 铺垫了一些关于实例对象的处理，重点介绍关于数组和集合的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-5/" target="_blank" rel="noopener">Hessian 协议解释与实战（五）：对象与映射&lt;/a> — 重点介绍关于对象与映射的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-vs-msgpack-vs-json/" target="_blank" rel="noopener">Hessian、Msgpack 和 JSON 实例对比&lt;/a> — 用实例对比 JSON、Hessian 和 MessagePack 的区别。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/schema-evolution-in-avro-protobuf-thrift" target="_blank" rel="noopener">Avro、ProtoBuf、Thrift 的模式演进之路&lt;/a> — 翻译的 Martin Kleppmann 的文章，重点对比了 Avro、ProtoBuf、Thrift 的序列化处理思路。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;hr/>
&lt;div class="paragraph">
&lt;p>在上一篇文章 &lt;a href="https://www.diguage.com/post/hessian-source-analysis-for-java/" target="_blank" rel="noopener">Hessian 源码分析（Java）&lt;/a> 对 Hessian 的 Java 实现做了一个概要的分析，对处理流程以及整体架构做了一个简单的分析。接下来，回到主题，继续来解释 Hessian 序列化协议。这篇文章，我们来重点分析一下数组与集合相关的操作。&lt;/p>
&lt;/div></description></item><item><title>Hessian 源码分析（Java）</title><link>https://www.diguage.com/post/hessian-source-analysis-for-java/</link><pubDate>Sat, 21 May 2022 09:39:44 +0800</pubDate><guid>https://www.diguage.com/post/hessian-source-analysis-for-java/</guid><description>&lt;div class="paragraph">
&lt;p>前面通过几篇文章，解释并实践了一下 Hessian 的序列化协议。文章目录如下：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a> — Hessian 序列化协议的中文翻译版。根据后面的“协议解释与实战”系列文章，增加了协议内容错误提示。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/" target="_blank" rel="noopener">Hessian 协议解释与实战（一）：布尔、日期、浮点数与整数&lt;/a> — 介绍布尔型数据、日期类型、浮点类型数据和整数类型数据等四种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-2/" target="_blank" rel="noopener">Hessian 协议解释与实战（二）：长整型、二进制数据与 Null&lt;/a> — 介绍长整数类型数据、二进制数据和 &lt;code>null&lt;/code> 等三种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-3/" target="_blank" rel="noopener">Hessian 协议解释与实战（三）：字符串&lt;/a> — 专门介绍了关于字符串的处理。由于字符串需要铺垫的基础知识比较多，处理细节也有繁琐，所以单独成篇来介绍。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-source-analysis-for-java/" target="_blank" rel="noopener">Hessian 源码分析（Java）&lt;/a> — 开始第四篇分析之前，先来介绍一下 Hessian 的源码实现。方便后续展开说明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-4/" target="_blank" rel="noopener">Hessian 协议解释与实战（四）：数组与集合&lt;/a> — 铺垫了一些关于实例对象的处理，重点介绍关于数组和集合的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-5/" target="_blank" rel="noopener">Hessian 协议解释与实战（五）：对象与映射&lt;/a> — 重点介绍关于对象与映射的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-vs-msgpack-vs-json/" target="_blank" rel="noopener">Hessian、Msgpack 和 JSON 实例对比&lt;/a> — 用实例对比 JSON、Hessian 和 MessagePack 的区别。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/schema-evolution-in-avro-protobuf-thrift" target="_blank" rel="noopener">Avro、ProtoBuf、Thrift 的模式演进之路&lt;/a> — 翻译的 Martin Kleppmann 的文章，重点对比了 Avro、ProtoBuf、Thrift 的序列化处理思路。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;hr/>
&lt;div class="paragraph">
&lt;p>该系列第四篇文章准备详细介绍一下 Hessian 对对象、链表以及 &lt;code>Map&lt;/code> 等处理。但是，越调试代码，越发觉得应该先对 Hessian 的实现做一个源码分析。于是，就有了本文。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>这里有几点需要声明一下：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>在上面“解释与实战”系列文章中提到的代码就不再重复说明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过“解释与实战”系列文章，大家应该可以领略到，处理序列化有大量的细节。但是，本文并不打算涉及。本文重点是介绍 Hessian 的 Java 实现的架构蓝图。相当于给指明一条路，沿着这条路，大家就可以探索 Hessian 的各种细节。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本文的介绍，全部基于 Hessian 4.0.60 的源码。由于没有找到 Hessian 的仓库，D瓜哥从 Hessian 的网站下，下载了源码包，解压后发布在了 GitHub 上： &lt;a href="https://github.com/diguage/hessian" target="_blank" rel="noopener">Hessian — The source code of Hessian Library.&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Hessian 协议解释与实战（三）：字符串</title><link>https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-3/</link><pubDate>Wed, 04 May 2022 16:09:05 +0000</pubDate><guid>https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-3/</guid><description>&lt;div class="paragraph">
&lt;p>前段时间，翻译了 Hessian 2.0 的序列化协议，发布在了 &lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a>。但是，其中有很多言语不详之处。所以，接下来会用几篇文章来详细解释并实践一下 Hessian 序列化协议，以求做到知其然知其所以然。目录如下：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a> — Hessian 序列化协议的中文翻译版。根据后面的“协议解释与实战”系列文章，增加了协议内容错误提示。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/" target="_blank" rel="noopener">Hessian 协议解释与实战（一）：布尔、日期、浮点数与整数&lt;/a> — 介绍布尔型数据、日期类型、浮点类型数据和整数类型数据等四种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-2/" target="_blank" rel="noopener">Hessian 协议解释与实战（二）：长整型、二进制数据与 Null&lt;/a> — 介绍长整数类型数据、二进制数据和 &lt;code>null&lt;/code> 等三种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-3/" target="_blank" rel="noopener">Hessian 协议解释与实战（三）：字符串&lt;/a> — 专门介绍了关于字符串的处理。由于字符串需要铺垫的基础知识比较多，处理细节也有繁琐，所以单独成篇来介绍。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-source-analysis-for-java/" target="_blank" rel="noopener">Hessian 源码分析（Java）&lt;/a> — 开始第四篇分析之前，先来介绍一下 Hessian 的源码实现。方便后续展开说明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-4/" target="_blank" rel="noopener">Hessian 协议解释与实战（四）：数组与集合&lt;/a> — 铺垫了一些关于实例对象的处理，重点介绍关于数组和集合的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-5/" target="_blank" rel="noopener">Hessian 协议解释与实战（五）：对象与映射&lt;/a> — 重点介绍关于对象与映射的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-vs-msgpack-vs-json/" target="_blank" rel="noopener">Hessian、Msgpack 和 JSON 实例对比&lt;/a> — 用实例对比 JSON、Hessian 和 MessagePack 的区别。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/schema-evolution-in-avro-protobuf-thrift" target="_blank" rel="noopener">Avro、ProtoBuf、Thrift 的模式演进之路&lt;/a> — 翻译的 Martin Kleppmann 的文章，重点对比了 Avro、ProtoBuf、Thrift 的序列化处理思路。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;hr/>
&lt;div class="paragraph">
&lt;p>在上一篇文章 &lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-2/" target="_blank" rel="noopener">Hessian 协议解释与实战（二）：长整型、二进制数据与 Null&lt;/a> 中研究了长整型、二进制数据与 &lt;code>null&lt;/code> 等三种数据类型的处理方式。接下来，我们再来介绍字符串的处理情况。&lt;/p>
&lt;/div></description></item><item><title>Hessian 协议解释与实战（二）：长整型、二进制数据与 Null</title><link>https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-2/</link><pubDate>Tue, 03 May 2022 16:09:15 +0800</pubDate><guid>https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-2/</guid><description>&lt;div class="paragraph">
&lt;p>前段时间，翻译了 Hessian 2.0 的序列化协议，发布在了 &lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a>。但是，其中有很多言语不详之处。所以，接下来会用几篇文章来详细解释并实践一下 Hessian 序列化协议，以求做到知其然知其所以然。目录如下：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a> — Hessian 序列化协议的中文翻译版。根据后面的“协议解释与实战”系列文章，增加了协议内容错误提示。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/" target="_blank" rel="noopener">Hessian 协议解释与实战（一）：布尔、日期、浮点数与整数&lt;/a> — 介绍布尔型数据、日期类型、浮点类型数据和整数类型数据等四种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-2/" target="_blank" rel="noopener">Hessian 协议解释与实战（二）：长整型、二进制数据与 Null&lt;/a> — 介绍长整数类型数据、二进制数据和 &lt;code>null&lt;/code> 等三种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-3/" target="_blank" rel="noopener">Hessian 协议解释与实战（三）：字符串&lt;/a> — 专门介绍了关于字符串的处理。由于字符串需要铺垫的基础知识比较多，处理细节也有繁琐，所以单独成篇来介绍。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-source-analysis-for-java/" target="_blank" rel="noopener">Hessian 源码分析（Java）&lt;/a> — 开始第四篇分析之前，先来介绍一下 Hessian 的源码实现。方便后续展开说明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-4/" target="_blank" rel="noopener">Hessian 协议解释与实战（四）：数组与集合&lt;/a> — 铺垫了一些关于实例对象的处理，重点介绍关于数组和集合的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-5/" target="_blank" rel="noopener">Hessian 协议解释与实战（五）：对象与映射&lt;/a> — 重点介绍关于对象与映射的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-vs-msgpack-vs-json/" target="_blank" rel="noopener">Hessian、Msgpack 和 JSON 实例对比&lt;/a> — 用实例对比 JSON、Hessian 和 MessagePack 的区别。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/schema-evolution-in-avro-protobuf-thrift" target="_blank" rel="noopener">Avro、ProtoBuf、Thrift 的模式演进之路&lt;/a> — 翻译的 Martin Kleppmann 的文章，重点对比了 Avro、ProtoBuf、Thrift 的序列化处理思路。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;hr/>
&lt;div class="paragraph">
&lt;p>在上一篇文章 &lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/" target="_blank" rel="noopener">Hessian 协议解释与实战（一）&lt;/a> 中研究了布尔型数据、日期类型、浮点类型数据、整数类型数据等四种数据类型的处理方式。接下来，我们再来介绍长整数类型数据、二进制数据和 &lt;code>null&lt;/code> 的处理情况。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_基础工具方法">基础工具方法&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>基础工具方法就不再赘述，请直接参考 &lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/#helper-methods" target="_blank" rel="noopener">Hessian 协议解释与实战（一）：布尔、日期、浮点数与整数：基础工具方法&lt;/a> 中提到的几个方法。&lt;/p>
&lt;/div></description></item><item><title>Hessian 协议解释与实战（一）：布尔、日期、浮点数与整数</title><link>https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/</link><pubDate>Mon, 02 May 2022 17:22:01 +0800</pubDate><guid>https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/</guid><description>&lt;div class="paragraph">
&lt;p>前段时间，翻译了 Hessian 2.0 的序列化协议，发布在了 &lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a>。但是，其中有很多言语不详之处。所以，接下来会用几篇文章来详细解释并实践一下 Hessian 序列化协议，以求做到知其然知其所以然。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>目录如下：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a> — Hessian 序列化协议的中文翻译版。根据后面的“协议解释与实战”系列文章，增加了协议内容错误提示。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/" target="_blank" rel="noopener">Hessian 协议解释与实战（一）：布尔、日期、浮点数与整数&lt;/a> — 介绍布尔型数据、日期类型、浮点类型数据和整数类型数据等四种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-2/" target="_blank" rel="noopener">Hessian 协议解释与实战（二）：长整型、二进制数据与 Null&lt;/a> — 介绍长整数类型数据、二进制数据和 &lt;code>null&lt;/code> 等三种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-3/" target="_blank" rel="noopener">Hessian 协议解释与实战（三）：字符串&lt;/a> — 专门介绍了关于字符串的处理。由于字符串需要铺垫的基础知识比较多，处理细节也有繁琐，所以单独成篇来介绍。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-source-analysis-for-java/" target="_blank" rel="noopener">Hessian 源码分析（Java）&lt;/a> — 开始第四篇分析之前，先来介绍一下 Hessian 的源码实现。方便后续展开说明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-4/" target="_blank" rel="noopener">Hessian 协议解释与实战（四）：数组与集合&lt;/a> — 铺垫了一些关于实例对象的处理，重点介绍关于数组和集合的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-5/" target="_blank" rel="noopener">Hessian 协议解释与实战（五）：对象与映射&lt;/a> — 重点介绍关于对象与映射的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-vs-msgpack-vs-json/" target="_blank" rel="noopener">Hessian、Msgpack 和 JSON 实例对比&lt;/a> — 用实例对比 JSON、Hessian 和 MessagePack 的区别。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/schema-evolution-in-avro-protobuf-thrift" target="_blank" rel="noopener">Avro、ProtoBuf、Thrift 的模式演进之路&lt;/a> — 翻译的 Martin Kleppmann 的文章，重点对比了 Avro、ProtoBuf、Thrift 的序列化处理思路。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;hr/>
&lt;div class="sect1">
&lt;h2 id="helper-methods">基础工具方法&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>Hessian 序列化之后的数据，都是字节数组，为了方便查看字节数组的二进制形式和十六进制形式，在正式开始之前，先介绍一下期间用到的辅助工具方法。闲言少叙，直接上代码：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="java">&lt;span class="cm">/**
 * 创建 Hessian2Output 对象，以便用于序列化
 *
 * @author D瓜哥 · &lt;a href="https://www.diguage.com/" target="_blank">https://www.diguage.com/&lt;/a>
 */&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="nc">Hessian2Output&lt;/span> &lt;span class="nf">getHessian2Output&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">OutputStream&lt;/span> &lt;span class="n">stream&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nc">SerializerFactory&lt;/span> &lt;span class="n">serializerFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nc">SerializerFactory&lt;/span>&lt;span class="o">();&lt;/span>
 &lt;span class="n">serializerFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAllowNonSerializable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="nc">Hessian2Output&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nc">Hessian2Output&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSerializerFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">serializerFactory&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>

&lt;span class="cm">/**
 * 打印字节数组
 *
 * @author D瓜哥 · &lt;a href="https://www.diguage.com/" target="_blank">https://www.diguage.com/&lt;/a>
 */&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">printBytes&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">byte&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nc">String&lt;/span> &lt;span class="n">bitx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toBinaryString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">Byte&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toUnsignedInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">));&lt;/span>
 &lt;span class="nc">String&lt;/span> &lt;span class="n">zbits&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">format&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;%8s&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">bitx&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">replace&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="sc">&amp;#39; &amp;#39;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="sc">&amp;#39;0&amp;#39;&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nc">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;%4d 0x%02X %8s %c %n&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">zbits&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nc">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;%4d 0x%02X %8s %n&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">zbits&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>

&lt;span class="cm">/**
 * 将 long 转化成二进制字符串（前面补0）
 *
 * @author D瓜哥 · &lt;a href="https://www.diguage.com/" target="_blank">https://www.diguage.com/&lt;/a>
 */&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="nc">String&lt;/span> &lt;span class="nf">getBinaryString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nc">String&lt;/span> &lt;span class="n">bits&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">Long&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toBinaryString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="kt">char&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">chars&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">format&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;%64s&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">bits&lt;/span>&lt;span class="o">)&lt;/span>
 &lt;span class="o">.&lt;/span>&lt;span class="na">replace&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="sc">&amp;#39; &amp;#39;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="sc">&amp;#39;0&amp;#39;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">toCharArray&lt;/span>&lt;span class="o">();&lt;/span>
 &lt;span class="nc">StringBuilder&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nc">StringBuilder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">64&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">chars&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">chars&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]);&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">7&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">chars&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;,&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>

&lt;span class="cm">/**
 * 将 int 转化成二进制字符串（前面补0）
 *
 * @author D瓜哥 · &lt;a href="https://www.diguage.com/" target="_blank">https://www.diguage.com/&lt;/a>
 */&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="nc">String&lt;/span> &lt;span class="nf">getBinaryString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nc">String&lt;/span> &lt;span class="n">bits&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toBinaryString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="kt">char&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">chars&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">format&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;%32s&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">bits&lt;/span>&lt;span class="o">)&lt;/span>
 &lt;span class="o">.&lt;/span>&lt;span class="na">replace&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="sc">&amp;#39; &amp;#39;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="sc">&amp;#39;0&amp;#39;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">toCharArray&lt;/span>&lt;span class="o">();&lt;/span>
 &lt;span class="nc">StringBuilder&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nc">StringBuilder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">64&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">chars&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">chars&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]);&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">7&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">chars&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;,&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>Hessian 2.0 序列化协议（中文版）</title><link>https://www.diguage.com/post/hessian-serialization-protocol/</link><pubDate>Wed, 20 Apr 2022 17:30:08 +0800</pubDate><guid>https://www.diguage.com/post/hessian-serialization-protocol/</guid><description>&lt;div class="paragraph">
&lt;p>公司在微服务系统中，序列化协议大多数使用 &lt;a href="https://msgpack.org/" target="_blank" rel="noopener">MessagePack&lt;/a>。但是，由于 MessagePack 设计限制，导致微服务接口在增减参数时，只能在最后操作。但是，由于个人操作，难免失误，结果造成因为增减字段导致的事故层出不穷。最近，一些条件成熟，准备推动部门将序列化协议切换到 Hessian。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>原以为，切换到 Hessian 就可以万事大吉。但是，在和同事的沟通中发现，同事反馈，Hessian 本身也有一些限制。为了对 Hessian 有一个更深入的了解，干脆就把 Hessian 序列化协议读一遍。看协议，文字不多，干脆就把协议完整翻译一遍。闲言少叙，正文开始。&lt;/p>
&lt;/div>
&lt;hr/>
&lt;div class="sect1 text-center">
&lt;h2 id="_hessian_2_0_序列化协议">&lt;span class="big">&lt;strong>Hessian 2.0 序列化协议&lt;/strong>&lt;/span>&lt;/h2>
&lt;div class="sectionbody">

&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_协议解释">协议解释&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>针对该协议有很多言语不详，甚至模糊不清之处，专门做了一些解释和实践，叙述系列文章，用于辅助消化理解。目录如下：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a> — Hessian 序列化协议的中文翻译版。根据后面的“协议解释与实战”系列文章，增加了协议内容错误提示。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/" target="_blank" rel="noopener">Hessian 协议解释与实战（一）：布尔、日期、浮点数与整数&lt;/a> — 介绍布尔型数据、日期类型、浮点类型数据和整数类型数据等四种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-2/" target="_blank" rel="noopener">Hessian 协议解释与实战（二）：长整型、二进制数据与 Null&lt;/a> — 介绍长整数类型数据、二进制数据和 &lt;code>null&lt;/code> 等三种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-3/" target="_blank" rel="noopener">Hessian 协议解释与实战（三）：字符串&lt;/a> — 专门介绍了关于字符串的处理。由于字符串需要铺垫的基础知识比较多，处理细节也有繁琐，所以单独成篇来介绍。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-source-analysis-for-java/" target="_blank" rel="noopener">Hessian 源码分析（Java）&lt;/a> — 开始第四篇分析之前，先来介绍一下 Hessian 的源码实现。方便后续展开说明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-4/" target="_blank" rel="noopener">Hessian 协议解释与实战（四）：数组与集合&lt;/a> — 铺垫了一些关于实例对象的处理，重点介绍关于数组和集合的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-5/" target="_blank" rel="noopener">Hessian 协议解释与实战（五）：对象与映射&lt;/a> — 重点介绍关于对象与映射的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-vs-msgpack-vs-json/" target="_blank" rel="noopener">Hessian、Msgpack 和 JSON 实例对比&lt;/a> — 用实例对比 JSON、Hessian 和 MessagePack 的区别。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/schema-evolution-in-avro-protobuf-thrift" target="_blank" rel="noopener">Avro、ProtoBuf、Thrift 的模式演进之路&lt;/a> — 翻译的 Martin Kleppmann 的文章，重点对比了 Avro、ProtoBuf、Thrift 的序列化处理思路。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>在 Spring Boot 中 Jackson 日期格式化技巧</title><link>https://www.diguage.com/post/jackson-date-format-on-spring-boot/</link><pubDate>Tue, 12 Apr 2022 16:04:23 +0800</pubDate><guid>https://www.diguage.com/post/jackson-date-format-on-spring-boot/</guid><description>&lt;div class="paragraph">
&lt;p>使用 Spring Boot 时，需要使用 Jackson 处理一些 Java Time API 类型的 JSON 序列化问题，在处理一些类的字段时，可以通过直接在属性上加注解的方式来指定其格式化样式。但是，昨天同事遇到一个格式化 &lt;code>Map&lt;/code> 数据的问题，这样就不能通过加注解来解决格式化样式的问题了。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在网上各种搜索，各种尝试后，终于解决了这个问题，记录一下，以备不时之需。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>闲言少叙，直接上代码：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">com.diguage.demo.config&lt;/span>&lt;span class="o">;&lt;/span>

&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.fasterxml.jackson.databind.ObjectMapper&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.fasterxml.jackson.databind.util.StdDateFormat&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.fasterxml.jackson.datatype.jsr310.JavaTimeModule&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.context.annotation.Bean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.context.annotation.Configuration&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.context.annotation.Primary&lt;/span>&lt;span class="o">;&lt;/span>

&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.text.DateFormat&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.text.SimpleDateFormat&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.time.LocalDate&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.time.LocalDateTime&lt;/span>&lt;span class="o">;&lt;/span>

&lt;span class="kn">import&lt;/span> &lt;span class="nn">static&lt;/span> &lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">fasterxml&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">jackson&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">databind&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SerializationFeature&lt;/span>&lt;span class="o">.*;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">static&lt;/span> &lt;span class="n">java&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">format&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">DateTimeFormatter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ofPattern&lt;/span>&lt;span class="o">;&lt;/span>

&lt;span class="cm">/**
 * 配置类
 *
 * @author D瓜哥 · &lt;a href="https://www.diguage.com" target="_blank">https://www.diguage.com&lt;/a>
 */&lt;/span>
&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Config&lt;/span> &lt;span class="o">{&lt;/span>

 &lt;span class="cm">/**
 * 创建 ObjectMapper 对象，配置日期格式化
 *
 * @author D瓜哥 · &lt;a href="https://www.diguage.com" target="_blank">https://www.diguage.com&lt;/a>
 */&lt;/span>
 &lt;span class="nd">@Bean&lt;/span>
 &lt;span class="nd">@Primary&lt;/span>
 &lt;span class="kd">public&lt;/span> &lt;span class="nc">ObjectMapper&lt;/span> &lt;span class="nf">objectMapper&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nc">ObjectMapper&lt;/span> &lt;span class="n">mapper&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nc">ObjectMapper&lt;/span>&lt;span class="o">();&lt;/span>

 &lt;span class="nc">String&lt;/span> &lt;span class="n">dateTimepattern&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;yyyy-MM-dd HH:mm:ss&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="nc">String&lt;/span> &lt;span class="n">datePattern&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;yyyy-MM-dd&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>

 &lt;span class="nc">DateFormat&lt;/span> &lt;span class="n">dateFormat&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nc">SimpleDateFormat&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">dateTimepattern&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="n">mapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setDateFormat&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">dateFormat&lt;/span>&lt;span class="o">);&lt;/span>

 &lt;span class="n">mapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">configure&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="no">WRITE_DATES_AS_TIMESTAMPS&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="n">mapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setDateFormat&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nc">StdDateFormat&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">withColonInTimeZone&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">));&lt;/span>

 &lt;span class="nc">JavaTimeModule&lt;/span> &lt;span class="n">javaTimeModule&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nc">JavaTimeModule&lt;/span>&lt;span class="o">();&lt;/span>

 &lt;span class="n">javaTimeModule&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addDeserializer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">LocalDate&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span>
 &lt;span class="k">new&lt;/span> &lt;span class="nf">LocalDateDeserializer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ofPattern&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">datePattern&lt;/span>&lt;span class="o">)));&lt;/span>
 &lt;span class="n">javaTimeModule&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addSerializer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">LocalDate&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span>
 &lt;span class="k">new&lt;/span> &lt;span class="nf">LocalDateSerializer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ofPattern&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">datePattern&lt;/span>&lt;span class="o">)));&lt;/span>

 &lt;span class="n">javaTimeModule&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addDeserializer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">LocalDateTime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span>
 &lt;span class="k">new&lt;/span> &lt;span class="nf">LocalDateTimeDeserializer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ofPattern&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">dateTimepattern&lt;/span>&lt;span class="o">)));&lt;/span>
 &lt;span class="n">javaTimeModule&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addSerializer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">LocalDateTime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span>
 &lt;span class="k">new&lt;/span> &lt;span class="nf">LocalDateTimeSerializer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ofPattern&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">dateTimepattern&lt;/span>&lt;span class="o">)));&lt;/span>

 &lt;span class="n">mapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">registerModule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">javaTimeModule&lt;/span>&lt;span class="o">);&lt;/span>

 &lt;span class="k">return&lt;/span> &lt;span class="n">mapper&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_后续问题">后续问题&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>不知道通过这种方式指定日期格式化样式后，在处理一些打格式化样式注解的字段时，会有什么样的表现？有机会测试一下。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_参考资料">参考资料&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.baeldung.com/jackson-serialize-dates" target="_blank" rel="noopener">Jackson Date&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://stackoverflow.com/a/56777701/951836" target="_blank" rel="noopener">json - Java 8 LocalDate Jackson format&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>使用 Maven Enforcer 插件检查依赖</title><link>https://www.diguage.com/post/use-maven-enforcer-plugin-to-check-dependencies/</link><pubDate>Tue, 29 Mar 2022 20:04:08 +0800</pubDate><guid>https://www.diguage.com/post/use-maven-enforcer-plugin-to-check-dependencies/</guid><description>&lt;div class="paragraph">
&lt;p>最近公司项目要对一些内部依赖做集中升级。为此，D瓜哥发布了一个 BOM（BOM stands for Bill Of Materials），用于规范项目依赖及版本。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>但是升级后，效果不理想，检查发现还是有不少依赖的版本依然不符合要求。经同事提醒，可以使用 &lt;a href="https://maven.apache.org/enforcer/index.html#" target="_blank" rel="noopener">Apache Maven Enforcer&lt;/a> 来做规范检查，测试一下效果确实不错。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>将 Apache Maven Enforcer 和 &lt;a href="https://www.mojohaus.org/extra-enforcer-rules/" target="_blank" rel="noopener">Extra Enforcer Rules&lt;/a> 的文档大致巴拉了一遍之后，根据项目的实际情况，挑选出来可用规则如下：&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_比较有用的几个规则">比较有用的几个规则&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://maven.apache.org/enforcer/enforcer-rules/bannedDependencies.html" target="_blank" rel="noopener">bannedDependencies&lt;/a> – 排除不需要的依赖，引入需要的依赖。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://maven.apache.org/enforcer/enforcer-rules/banDuplicatePomDependencyVersions.html" target="_blank" rel="noopener">banDuplicatePomDependencyVersions&lt;/a> – 防止依赖重复声明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://maven.apache.org/enforcer/enforcer-rules/dependencyConvergence.html" target="_blank" rel="noopener">dependencyConvergence&lt;/a> – 确保所有依赖收敛到相同的版本。也可以考虑加入。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://maven.apache.org/enforcer/enforcer-rules/reactorModuleConvergence.html" target="_blank" rel="noopener">reactorModuleConvergence&lt;/a> – 多模块开发时，确保父子模块的版本是一致的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://maven.apache.org/enforcer/enforcer-rules/requireJavaVersion.html" target="_blank" rel="noopener">requireJavaVersion&lt;/a> – 检查 JDK 的版本&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://maven.apache.org/enforcer/enforcer-rules/requireMavenVersion.html" target="_blank" rel="noopener">requireMavenVersion&lt;/a> – 检查 Maven 的版本&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://maven.apache.org/enforcer/enforcer-rules/requireReleaseVersion.html" target="_blank" rel="noopener">requireReleaseVersion&lt;/a> – 这个可以通过激活生产环境的 profile 来启用该规则，保证发布的不是快照版。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://maven.apache.org/enforcer/enforcer-rules/requireUpperBoundDeps.html" target="_blank" rel="noopener">requireUpperBoundDeps&lt;/a> – 确保直接引用的依赖不比间接解析出来的依赖版本低。感觉这个也挺有用，但是使用方式还没搞清楚。实例有些模糊。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.mojohaus.org/extra-enforcer-rules/banDuplicateClasses.html" target="_blank" rel="noopener">banDuplicateClasses&lt;/a> – 检查重复类定义。可以避免一些特殊情况。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.mojohaus.org/extra-enforcer-rules/requirePropertyDiverges.html" target="_blank" rel="noopener">requirePropertyDiverges&lt;/a> – 确保项目定义的属性与依赖中包含的属性不重复。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.mojohaus.org/extra-enforcer-rules/enforceBytecodeVersion.html" target="_blank" rel="noopener">enforceBytecodeVersion&lt;/a> – 确保使用的字节码版本不高于指定版本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.mojohaus.org/extra-enforcer-rules/banCircularDependencies.html" target="_blank" rel="noopener">banCircularDependencies&lt;/a> – 确保没有循环依赖。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.mojohaus.org/extra-enforcer-rules/requireEncoding.html" target="_blank" rel="noopener">requireEncoding&lt;/a> – 指定项目字符集。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_实践总结">实践总结&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>D瓜哥把上面的规则几乎全部试用了一遍，把发现的一些需要特别注意的地方标注记录一下吧：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;code>banDuplicateClasses&lt;/code> — 这个插件还是很棒的。使用的时候，成功检查出废弃不用的依赖（废弃依赖被收入到另外一个依赖中了。）。不过，也发现一些问题，项目中使用了 &lt;code>netty-all&lt;/code> 及 Netty 的其他模块依赖。但是，并没有检查出来，感觉是项目代码有直接依赖的重复类才会被检测出来。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>requireUpperBoundDeps&lt;/code> — 开启这个检查时，发现间接引用了 &lt;code>commons-lang:commons-lang:2.6&lt;/code>，但是项目直接声明的依赖是 &lt;code>commons-lang:commons-lang:2.5&lt;/code>，就直接报错了。私以为这个检查规则还是很赞的。但是，因为我们的项目中有有依赖 Gson 1.X，也有 Gson 2.X 的，而且这两个版本在处理父子类有相同字段时的存在抛异常的差异，所以无法启用，实在可惜。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>reactorModuleConvergence&lt;/code> –- 多模块开发时，确保父子模块的版本是一致的。这个规则还是很赞的。但是，因为我测试的模块不存在这个问题，所以，没有触发报警。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>requirePropertyDiverges&lt;/code> — 本想启用这个规则，看了一下配置，着实麻烦，而且不是全局检查，似乎是检查指定配置项，感觉不是很满意。没有启用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>enforceBytecodeVersion&lt;/code> — 检查字节码版本。这个是不超过上限，我是想检查下限，所以没有启用。反思：在写这个文章时，又思考了一下，检查下限是有问题的，一些陈旧的依赖就不能使用了。但是这些依赖是没有问题的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>banCircularDependencies&lt;/code> — 这个规则似乎 Maven 已经内置了，以前遇到过这样的场景，Maven 直接报错了。所以，就没有启用这个规则。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>requireEncoding&lt;/code> — 这个规则非常棒。在试用过程中发现，它会把存 ASCII 字符的 &lt;code>UTF-8&lt;/code> 文件判定为 &lt;code>US-ASCII&lt;/code> 编码。没有找到好的办法来解决这个问题。所以，可惜没有启用。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>从 Spring PR 中学习代码技巧</title><link>https://www.diguage.com/post/learn-code-tips-from-spring-pull-requests/</link><pubDate>Sun, 27 Jun 2021 18:20:28 +0800</pubDate><guid>https://www.diguage.com/post/learn-code-tips-from-spring-pull-requests/</guid><description>&lt;div class="paragraph">
&lt;p>D瓜哥经常关注 Spring 的 PR 与 Issue。在众多 Contributor 中，除了 Spring 团队成员之外，我对 &lt;a href="https://github.com/stsypanov" target="_blank" rel="noopener">stsypanov (Сергей Цыпанов)&lt;/a> 印象很深刻。这哥们给 Spring 提了非常多的 PR，请看列表 &lt;a href="https://github.com/spring-projects/spring-framework/pulls?page=1&amp;amp;q=author%3Astsypanov+is%3Aclosed" target="_blank" rel="noopener">Pull requests · spring-projects/spring-framework&lt;/a>，而且这个哥们的 PR 都非常有特点，绝大部分是性能提升方面的 PR，而且还会给出 JMH 的测试结果。不愧是毛熊人，做事细致严谨。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>这周心血来潮，把这哥们的 PR 翻一翻，希望可以学习一些编码技巧。简单记录一下，以备以后回顾学习。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_提高_map_的遍历性能">提高 &lt;code>Map&lt;/code> 的遍历性能&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>请看： &lt;a href="https://github.com/spring-projects/spring-framework/pull/1891/files" target="_blank" rel="noopener">SPR-17074 Replace iteration over Map::keySet with Map::entrySet by stsypanov · Pull Request #1891&lt;/a>&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>摘取一个示例如下：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="java">&lt;span class="c1">// --before update------------------------------------------------------&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="nc">String&lt;/span> &lt;span class="n">attributeName&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">attributes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">keySet&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nc">Object&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">attributes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">attributeName&lt;/span>&lt;span class="o">);&lt;/span>

&lt;span class="c1">// --after update-------------------------------------------------------&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="nc">Map&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nc">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nc">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">attributeEntry&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">attributes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">entrySet&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nc">String&lt;/span> &lt;span class="n">attributeName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">attributeEntry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getKey&lt;/span>&lt;span class="o">();&lt;/span>
 &lt;span class="nc">Object&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">attributeEntry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getValue&lt;/span>&lt;span class="o">();&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>这个改动很小，但是对性能的改善还是比较显著的。翻看自己项目的代码，还是有不少是改动前的写法。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>针对这点，D瓜哥也给 Spring 发了一个 PR： &lt;a href="https://github.com/spring-projects/spring-framework/pull/27100" target="_blank" rel="noopener">Improve performance of iteration in GroovyBeanDefinitionReader by diguage · Pull Request #27100&lt;/a>。相信不久就会合并到 &lt;code>main&lt;/code> 分支的。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>所以，给 Spring 以及其他开源项目提 PR，其实一点也不难。只要，你花心思去研究，肯定有机会的。不过，也反思一点：我这个 PR 有点东施效颦的感觉，有点刷 KPI 的样子。还是应该脚踏实地去好好研究，提更多更有建设性意见的 PR。&lt;/p>
&lt;/div></description></item><item><title>Spring AOP 源码分析：创建代理（二）</title><link>https://www.diguage.com/post/spring-aop-create-proxy-cglib/</link><pubDate>Tue, 11 Aug 2020 15:00:46 +0800</pubDate><guid>https://www.diguage.com/post/spring-aop-create-proxy-cglib/</guid><description>&lt;div class="paragraph">
&lt;p>&lt;a href="https://www.diguage.com/post/spring-aop-bootstrap/">Spring AOP 源码分析：入门&lt;/a> 中，梳理出来了 Spring AOP 的入口。 &lt;a href="https://www.diguage.com/post/spring-aop-get-advices/">Spring AOP 源码分析：获得通知&lt;/a> 中着重介绍了如何获取通知。上一篇文章 &lt;a href="https://www.diguage.com/post/spring-aop-create-proxy-jdk/">Spring AOP 源码分析：创建代理（一）&lt;/a> 重点介绍了一下切面链的组装和基于 JDK 动态代理的 AOP 的实现，这篇文章介绍一下基于 cglib 的代理类是生成。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_cglib_简介">cglib 简介&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/spring-framework/cglib.png" alt="CGLIB" width="95%"/>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>CGLIB（Code Generator Library）是一个高性能的代码生成库，被广泛应用于 AOP 框架（Spring）中以提供方法拦截功能，主要以继承目标类的方式来进行拦截实现，因此 CGLIB 可以对无接口的类进行代理。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>CGLIB代理主要通过操作字节码的方式为对象引入方法调用时访问操作，底层使用了ASM来操作字节码生成新的类，ASM是一个短小精悍的字节码操作框架。CGLIB的应用栈如下：&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/spring-framework/cglib-architecture.jpg" alt="CGLIB" width="95%"/>
&lt;/div>
&lt;/div>
&lt;div class="sidebarblock">
&lt;div class="content">
&lt;div class="paragraph">
&lt;p>最新版的 Hibernate 已经把字节码库从 cglib 切换为 Byte Buddy。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>JDK 动态代理是通过实现 &lt;code>InvocationHandler&lt;/code> 接口，在其 &lt;code>invoke&lt;/code> 方法中添加切面逻辑。而 cglib 则是通过实现 &lt;code>MethodInterceptor&lt;/code> 接口，在其 &lt;code>invoke&lt;/code> 方法中添加切面逻辑。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>下面看一下在 Spring 中，是如何实现利用 cglib 来实现 AOP 编程的？&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_cglibaopproxy">&lt;code>CglibAopProxy&lt;/code>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>先看一下创建代理对象的方法：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="title">&lt;code>CglibAopProxy#getProxy(ClassLoader)&lt;/code>&lt;/div>
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="java">&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nc">Object&lt;/span> &lt;span class="nf">getProxy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@Nullable&lt;/span> &lt;span class="nc">ClassLoader&lt;/span> &lt;span class="n">classLoader&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isTraceEnabled&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">trace&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Creating CGLIB proxy: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">advised&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getTargetSource&lt;/span>&lt;span class="o">());&lt;/span>
 &lt;span class="o">}&lt;/span>

 &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nc">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">rootClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">advised&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getTargetClass&lt;/span>&lt;span class="o">();&lt;/span>
 &lt;span class="nc">Assert&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">state&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">rootClass&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;Target class must be available for creating a CGLIB proxy&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>

 &lt;span class="nc">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">proxySuperClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rootClass&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">rootClass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">contains&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">ClassUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">CGLIB_CLASS_SEPARATOR&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="n">proxySuperClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rootClass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getSuperclass&lt;/span>&lt;span class="o">();&lt;/span>
 &lt;span class="nc">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;[]&lt;/span> &lt;span class="n">additionalInterfaces&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rootClass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInterfaces&lt;/span>&lt;span class="o">();&lt;/span>
 &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="nc">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">additionalInterface&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">additionalInterfaces&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">advised&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addInterface&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">additionalInterface&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="o">}&lt;/span>

 &lt;span class="c1">// Validate the class, writing log messages as necessary.&lt;/span>
 &lt;span class="c1">// 验证 Class&lt;/span>
 &lt;span class="n">validateClassIfNecessary&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">proxySuperClass&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">classLoader&lt;/span>&lt;span class="o">);&lt;/span>

 &lt;span class="c1">// Configure CGLIB Enhancer...&lt;/span>
 &lt;span class="nc">Enhancer&lt;/span> &lt;span class="n">enhancer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createEnhancer&lt;/span>&lt;span class="o">();&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">classLoader&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="n">enhancer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setClassLoader&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">classLoader&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">classLoader&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="nc">SmartClassLoader&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
 &lt;span class="o">((&lt;/span>&lt;span class="nc">SmartClassLoader&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">classLoader&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">isClassReloadable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">proxySuperClass&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="n">enhancer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setUseCache&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="n">enhancer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSuperclass&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">proxySuperClass&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="n">enhancer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setInterfaces&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">AopProxyUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">completeProxiedInterfaces&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">advised&lt;/span>&lt;span class="o">));&lt;/span>
 &lt;span class="n">enhancer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setNamingPolicy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">SpringNamingPolicy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">INSTANCE&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="n">enhancer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setStrategy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nc">ClassLoaderAwareGeneratorStrategy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">classLoader&lt;/span>&lt;span class="o">));&lt;/span>

 &lt;span class="c1">// 设置拦截器&lt;/span>
&lt;span class="hll"> &lt;span class="nc">Callback&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">callbacks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getCallbacks&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">rootClass&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span> &lt;span class="nc">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;[]&lt;/span> &lt;span class="n">types&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nc">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;[&lt;/span>&lt;span class="n">callbacks&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">];&lt;/span>
 &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">types&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="n">types&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">callbacks&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="o">();&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="c1">// fixedInterceptorMap only populated at this point, after getCallbacks call above&lt;/span>
 &lt;span class="n">enhancer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setCallbackFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nc">ProxyCallbackFilter&lt;/span>&lt;span class="o">(&lt;/span>
 &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">advised&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getConfigurationOnlyCopy&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">fixedInterceptorMap&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">fixedInterceptorOffset&lt;/span>&lt;span class="o">));&lt;/span>
 &lt;span class="n">enhancer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setCallbackTypes&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">types&lt;/span>&lt;span class="o">);&lt;/span>

 &lt;span class="c1">// Generate the proxy class and create a proxy instance.&lt;/span>
 &lt;span class="c1">// 生成代理类以及创建代理&lt;/span>
 &lt;span class="k">return&lt;/span> &lt;span class="nf">createProxyClassAndInstance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">enhancer&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">callbacks&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="nc">CodeGenerationException&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="nc">IllegalArgumentException&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nf">AopConfigException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Could not generate CGLIB subclass of &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">advised&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getTargetClass&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span>
 &lt;span class="s">&amp;#34;: Common causes of this problem include using a final class or a non-visible class&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>
 &lt;span class="n">ex&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="nc">Throwable&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="c1">// TargetSource.getTarget() failed&lt;/span>
 &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nf">AopConfigException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Unexpected AOP exception&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>Spring AOP 源码分析：创建代理（一）</title><link>https://www.diguage.com/post/spring-aop-create-proxy-jdk/</link><pubDate>Mon, 10 Aug 2020 14:10:00 +0800</pubDate><guid>https://www.diguage.com/post/spring-aop-create-proxy-jdk/</guid><description>&lt;div class="paragraph">
&lt;p>&lt;a href="https://www.diguage.com/post/spring-aop-bootstrap/">Spring AOP 源码分析：入门&lt;/a> 中，梳理出来了 Spring AOP 的入口。上一篇文章 &lt;a href="https://www.diguage.com/post/spring-aop-get-advices/">Spring AOP 源码分析：获得通知&lt;/a> 中着重介绍了如何获取通知。接着上一篇文章，这篇文章介绍一下如何创建代理。&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="title">&lt;code>AbstractAutoProxyCreator#createProxy&lt;/code>&lt;/div>
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="java">&lt;span class="kd">protected&lt;/span> &lt;span class="nc">Object&lt;/span> &lt;span class="nf">createProxy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">beanClass&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nd">@Nullable&lt;/span> &lt;span class="nc">String&lt;/span> &lt;span class="n">beanName&lt;/span>&lt;span class="o">,&lt;/span>
 &lt;span class="nd">@Nullable&lt;/span> &lt;span class="nc">Object&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">specificInterceptors&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nc">TargetSource&lt;/span> &lt;span class="n">targetSource&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>

 &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">beanFactory&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="nc">ConfigurableListableBeanFactory&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nc">AutoProxyUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">exposeTargetClass&lt;/span>&lt;span class="o">((&lt;/span>&lt;span class="nc">ConfigurableListableBeanFactory&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">beanFactory&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">beanName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">beanClass&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="o">}&lt;/span>


 &lt;span class="c1">// 创建代理工厂对象&lt;/span>
 &lt;span class="nc">ProxyFactory&lt;/span> &lt;span class="n">proxyFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nc">ProxyFactory&lt;/span>&lt;span class="o">();&lt;/span>

 &lt;span class="c1">// 获取当前类的属性&lt;/span>
 &lt;span class="n">proxyFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">copyFrom&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">);&lt;/span>

 &lt;span class="c1">//如果没有使用CGLib代理&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">proxyFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isProxyTargetClass&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="c1">// 是否可能使用CGLib代理&lt;/span>
 &lt;span class="c1">// 决定对于给定的 Bean 是否应该使用 targetClass 而不是他的接口代理&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">shouldProxyTargetClass&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanClass&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">beanName&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="n">proxyFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setProxyTargetClass&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="c1">// 查看beanClass对应的类是否含有InitializingBean.class/DisposableBean.class/Aware.class接口&lt;/span>
 &lt;span class="c1">// 无则采用JDK动态代理，有则采用CGLib动态代理&lt;/span>
 &lt;span class="n">evaluateProxyInterfaces&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanClass&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">proxyFactory&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="o">}&lt;/span>

 &lt;span class="c1">// 获得所有关联的Advisor集合(该分支待补充)&lt;/span>
 &lt;span class="nc">Advisor&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">advisors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">buildAdvisors&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">specificInterceptors&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="n">proxyFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addAdvisors&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">advisors&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="c1">// 此处的targetSource一般为SingletonTargetSource&lt;/span>
 &lt;span class="n">proxyFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setTargetSource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">targetSource&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="c1">// 定制代理，扩展点，空实现&lt;/span>
 &lt;span class="n">customizeProxyFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">proxyFactory&lt;/span>&lt;span class="o">);&lt;/span>

 &lt;span class="c1">// 用来控制代理工厂被配置后，是否还允许修改通知&lt;/span>
 &lt;span class="c1">// 缺省为 false&lt;/span>
 &lt;span class="n">proxyFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFrozen&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">freezeProxy&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="c1">// 是否设置预过滤模式，此处针对本文为true&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">advisorsPreFiltered&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="n">proxyFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setPreFiltered&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="o">}&lt;/span>

 &lt;span class="c1">// 获取使用JDK动态代理或者cglib动态代理产生的对象&lt;/span>
 &lt;span class="k">return&lt;/span> &lt;span class="n">proxyFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getProxy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">getProxyClassLoader&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="title">&lt;code>ProxyFactory#getProxy(ClassLoader)&lt;/code>&lt;/div>
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="nc">Object&lt;/span> &lt;span class="nf">getProxy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@Nullable&lt;/span> &lt;span class="nc">ClassLoader&lt;/span> &lt;span class="n">classLoader&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="c1">// 1、创建JDK方式的AOP代理或者CGLib方式的AOP代理&lt;/span>
 &lt;span class="c1">// 2、调用具体的AopProxy来创建Proxy代理对象&lt;/span>
 &lt;span class="k">return&lt;/span> &lt;span class="nf">createAopProxy&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getProxy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">classLoader&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在 &lt;code>createAopProxy()&lt;/code> 方法中就不再列出，因为 &lt;code>AopProxyFactory&lt;/code> 接口只有一个实现类 &lt;code>DefaultAopProxyFactory&lt;/code>。所以，直接来看看 &lt;code>getProxy(classLoader)&lt;/code> 方法：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="title">&lt;code>DefaultAopProxyFactory#createAopProxy&lt;/code>&lt;/div>
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="java">&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nc">AopProxy&lt;/span> &lt;span class="nf">createAopProxy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">AdvisedSupport&lt;/span> &lt;span class="n">config&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="nc">AopConfigException&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="c1">// 如果实现接口，默认采用Java动态代理&lt;/span>
 &lt;span class="c1">// 如果没有接口，或者有接口却强制使用 cglib&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="no">IN_NATIVE_IMAGE&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
 &lt;span class="c1">// optimize 是否实用激进的优化策略&lt;/span>
 &lt;span class="c1">// proxyTargetClass 为 true，则代理类本身而不是接口&lt;/span>
 &lt;span class="c1">// 是否存在代理接口&lt;/span>
 &lt;span class="o">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isOptimize&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isProxyTargetClass&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">hasNoUserSuppliedProxyInterfaces&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="o">)))&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nc">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">targetClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getTargetClass&lt;/span>&lt;span class="o">();&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">targetClass&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nf">AopConfigException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;TargetSource cannot determine target class: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span>
 &lt;span class="s">&amp;#34;Either an interface or a target is required for proxy creation.&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">targetClass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isInterface&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nc">Proxy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isProxyClass&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">targetClass&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nf">JdkDynamicAopProxy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nf">ObjenesisCglibAopProxy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nf">JdkDynamicAopProxy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>Spring AOP 源码分析：获得通知</title><link>https://www.diguage.com/post/spring-aop-get-advices/</link><pubDate>Sun, 09 Aug 2020 15:46:50 +0800</pubDate><guid>https://www.diguage.com/post/spring-aop-get-advices/</guid><description>&lt;div class="paragraph">
&lt;p>在文章 &lt;a href="https://www.diguage.com/post/spring-aop-process-overview/" target="_blank" rel="noopener">Spring AOP 处理流程概述&lt;/a> 中，对 Spring AOP 有了一个整体认识。在文章 &lt;a href="https://www.diguage.com/post/spring-aop-bootstrap/">Spring AOP 源码分析：入门&lt;/a> 中，对 Spring AOP 的相关入口做了分析。这篇文章就带大家看一看，Spring AOP 是如何获取通知的？&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="example-code">示例代码&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>在 &lt;a href="https://www.diguage.com/post/how-to-read-spring-sources/#example-code" target="_blank" rel="noopener">如何阅读 Spring 源码？: 示例代码&lt;/a> 中，已经给出了一个完整的 AOP 示例代码。为了节省篇幅，请直接参考那篇文章的示例代码，这里就不在赘述。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_注册_advice通知增强">注册 Advice(通知/增强)&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>请根据 &lt;a href="https://www.diguage.com/post/spring-aop-bootstrap/">Spring AOP 源码分析：入门&lt;/a> 中提到的关键方法入口处，打上断点，开始调试。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>首先，需要明确一点的是：对于切面（使用 &lt;code>@Aspect&lt;/code> 注解标注过的类）在 Spring 容器中，也是被统一f封装为 &lt;code>BeanDefinition&lt;/code> 实例的，也需要通过一个方式，将其注册到 Spring 容器中。比如，就像 &lt;a href="#example-code">示例代码&lt;/a> 那样，通过 &lt;code>ImportSelector&lt;/code> 方式，使用类名，将其注册到容器中。这样，就可以利用 Spring 容器对 Bean 的 API 来统一处理了。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>Advice(通知/增强)几乎是在意想不到的地方完成注册的：在第一次调用 &lt;code>AbstractAutoProxyCreator#postProcessBeforeInstantiation&lt;/code> 方法时，通过 &lt;code>AspectJAwareAdvisorAutoProxyCreator#shouldSkip&lt;/code> 方法，完成了切面的注册。下面，我们对这个过程抽丝剥茧，逐步分析。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>先来看看 &lt;code>findCandidateAdvisors&lt;/code> 方法：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="title">&lt;code>AnnotationAwareAspectJAutoProxyCreator#findCandidateAdvisors&lt;/code>&lt;/div>
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="java">&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="nc">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nc">Advisor&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">findCandidateAdvisors&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="c1">// Add all the Spring advisors found according to superclass rules.&lt;/span>
 &lt;span class="c1">//当使用注解方式配置AOP的时候并不是丢弃了对XML配置的支持&lt;/span>
 &lt;span class="c1">//在这里调用父类方法加载配置文件中的AOP声明&lt;/span>
 &lt;span class="nc">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nc">Advisor&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">advisors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">super&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">findCandidateAdvisors&lt;/span>&lt;span class="o">();&lt;/span>
 &lt;span class="c1">// Build Advisors for all AspectJ aspects in the bean factory.&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">aspectJAdvisorsBuilder&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="n">advisors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addAll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">aspectJAdvisorsBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">buildAspectJAdvisors&lt;/span>&lt;span class="o">());&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="k">return&lt;/span> &lt;span class="n">advisors&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>如何阅读 Spring 源码？</title><link>https://www.diguage.com/post/how-to-read-spring-sources/</link><pubDate>Sat, 08 Aug 2020 07:53:32 +0800</pubDate><guid>https://www.diguage.com/post/how-to-read-spring-sources/</guid><description>&lt;div class="paragraph">
&lt;p>昨晚原计划给几个朋友简单介绍一下阅读 Spring 源码的方法。结果，大家因为各种原因没能及时参加。后来，就取消分享了。干脆写一篇文章出来，感兴趣欢迎自取。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_代码准备">代码准备&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>Spring Framework 是开源的，代码托管在 GitHub 上： &lt;a href="https://github.com/spring-projects/spring-framework" target="_blank" rel="noopener">Spring Framework&lt;/a>。任何人都可以方便地获得它的源代码。所以，如果想阅读 Spring 的源代码，当然是直接把代码克隆到本地，然后直接在 IDE（推荐 IDEA）中进行调试了。另外，还需要存放自己写一些测试和文档。所以，最好把代码 fork 到自己的账户下，从 &lt;code>master&lt;/code> 上切出一个新分支并 push 到自己的 Repo 中，这样自己就可以随意更新了。具体步骤如下：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>克隆代码&lt;/p>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">&lt;span class="c"># 直接克隆原始仓库为 origin&lt;/span>
git clone git@github.com:spring-projects/spring-framework.git&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>fork 代码，D瓜哥直接 fork 到自己账户下了： &lt;a href="https://github.com/diguage/spring-framework" target="_blank" rel="noopener">diguage/spring-framework&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>添加原创仓库地址：&lt;/p>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">&lt;span class="c"># 添加自己仓库为 diguage&lt;/span>
&lt;span class="c"># 这样就能在所有项目中保持命名的一致性，方便标识&lt;/span>
git remote add diguage git@github.com:diguage/spring-framework.git&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>创建新分支&lt;/p>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">&lt;span class="c"># 创建新分支&lt;/span>
git switch &lt;span class="nt">-c&lt;/span> analysis

&lt;span class="c"># 将新分支 push 到自己的 Repo 中&lt;/span>
git push diguage analysis&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>这样，在这个新分支上，就可以随意折腾了。&lt;/p>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>下载依赖&lt;/p>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">&lt;span class="c"># Mac or Linux&lt;/span>
./gradlew clean &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> ./gradlew :spring-oxm:compileTestJava &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> ./gradlew &lt;span class="nb">test&lt;/span>

&lt;span class="c"># Windows&lt;/span>
gradlew.bat clean &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> gradlew.bat :spring-oxm:compileTestJava &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> gradlew.bat &lt;span class="nb">test&lt;/span>&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>Spring AOP 源码分析：入门</title><link>https://www.diguage.com/post/spring-aop-bootstrap/</link><pubDate>Fri, 07 Aug 2020 00:00:00 +0800</pubDate><guid>https://www.diguage.com/post/spring-aop-bootstrap/</guid><description>&lt;div class="paragraph">
&lt;p>在上一篇文章 &lt;a href="https://www.diguage.com/post/spring-aop-process-overview/" target="_blank" rel="noopener">Spring AOP 处理流程概述&lt;/a> 中，对 Spring AOP 有了一个整体认识。这篇文章就带大家做一个细致的源码分析。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_登堂入室">登堂入室&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>使用 Spring AOP 也很简单，只需要在配置类上加上 &lt;code>@EnableAspectJAutoProxy&lt;/code> 注解即可。这个注解处理过程与 &lt;a href="https://www.diguage.com/post/spring-extensions-and-mybatis/#mapper-scan" target="_blank" rel="noopener">Spring 扩展点实践：整合 MyBATIS&lt;/a> 中 “&lt;code>@MapperScan&lt;/code> 处理” 类似，不同的是，Spring AOP 注册了 &lt;code>AnnotationAwareAspectJAutoProxyCreator&lt;/code>，它是一个 &lt;code>InstantiationAwareBeanPostProcessor&lt;/code>。具体的类图如下：&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/spring-framework/AnnotationAwareAspectJAutoProxyCreator.svg" alt="AnnotationAwareAspectJAutoProxyCreator 的继承体系" width="98%"/>
&lt;/div>
&lt;div class="title">图 1. AnnotationAwareAspectJAutoProxyCreator 的继承体系&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在正式开始源码分析之前，有一点必须强调一下：&lt;strong>Spring AOP 只是借用了 AspectJ 的一些注解和个别关键 API，而整体实现是 Spring 自己完成的，并不是基于 AspectJ 实现的。&lt;/strong>这一点跟很多人的认识是不一样的，需要特别指出。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>D瓜哥在 &lt;a href="https://www.diguage.com/post/spring-bean-lifecycle-overview/" target="_blank" rel="noopener">Spring Bean 生命周期概述&lt;/a> 中指出：创建 AOP 代理对象，有两个时机：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>调用 &lt;code>InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation&lt;/code> 时，通过调用 &lt;code>AnnotationAwareAspectJAutoProxyCreator&lt;/code> 对象的 &lt;code>postProcessBeforeInstantiation&lt;/code> 方法来创建对象；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用 &lt;code>BeanPostProcessor#postProcessAfterInitialization&lt;/code> 时，通过调用 &lt;code>AnnotationAwareAspectJAutoProxyCreator&lt;/code> 对象的 &lt;code>postProcessAfterInitialization&lt;/code> 方法来创建对象；&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="paragraph">
&lt;p>下面分别对这两个方法做更详细的介绍。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_annotationawareaspectjautoproxycreatorpostprocessbeforeinstantiation">&lt;code>AnnotationAwareAspectJAutoProxyCreator#postProcessBeforeInstantiation&lt;/code>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>&lt;code>AnnotationAwareAspectJAutoProxyCreator&lt;/code> 的 &lt;code>postProcessBeforeInstantiation&lt;/code> 方法是从 &lt;code>AbstractAutoProxyCreator&lt;/code> 继承过来的。代码如下：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="java">&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nc">Object&lt;/span> &lt;span class="nf">postProcessBeforeInstantiation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">beanClass&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nc">String&lt;/span> &lt;span class="n">beanName&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="c1">// 1、得到一个缓存的唯一key（根据beanClass和beanName生成唯一key）&lt;/span>
 &lt;span class="nc">Object&lt;/span> &lt;span class="n">cacheKey&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getCacheKey&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanClass&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">beanName&lt;/span>&lt;span class="o">);&lt;/span>

 &lt;span class="c1">// 2、如果当前targetSourcedBeans（通过自定义TargetSourceCreator创建的TargetSource）不包含cacheKey&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="nc">StringUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hasLength&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">targetSourcedBeans&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">contains&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="c1">// 2.1、advisedBeans（已经被增强的Bean，即AOP代理对象）中包含当前cacheKey，返回null，即走Spring默认流程&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">advisedBeans&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">containsKey&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cacheKey&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="c1">// 2.2、如果是基础设施类（如Advisor、Advice、AopInfrastructureBean的实现）不进行处理&lt;/span>
 &lt;span class="c1">// 2.2、shouldSkip 默认false，可以生成子类覆盖，如AspectJAwareAdvisorAutoProxyCreator覆盖（if (((AbstractAspectJAdvice) advisor.getAdvice()).getAspectName().equals(beanName)) return true; 即如果是自己就跳过）&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isInfrastructureClass&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanClass&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">shouldSkip&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanClass&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">beanName&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">advisedBeans&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cacheKey&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nc">Boolean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">FALSE&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="o">}&lt;/span>

 &lt;span class="c1">// Create proxy here if we have a custom TargetSource.&lt;/span>
 &lt;span class="c1">// Suppresses unnecessary default instantiation of the target bean:&lt;/span>
 &lt;span class="c1">// The TargetSource will handle target instances in a custom fashion.&lt;/span>
 &lt;span class="c1">// 3、开始创建AOP代理对象&lt;/span>
 &lt;span class="c1">// 3.1、配置自定义的TargetSourceCreator进行TargetSource创建&lt;/span>
 &lt;span class="nc">TargetSource&lt;/span> &lt;span class="n">targetSource&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getCustomTargetSource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanClass&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">beanName&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="c1">// 3.2、如果targetSource不为null 添加到targetSourcedBeans缓存，并创建AOP代理对象&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">targetSource&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="nc">StringUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hasLength&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">targetSourcedBeans&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="c1">// specificInterceptors即增强（包括前置增强、后置增强等等）&lt;/span>
&lt;span class="hll"> &lt;span class="nc">Object&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">specificInterceptors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getAdvicesAndAdvisorsForBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanClass&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">beanName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">targetSource&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span> &lt;span class="c1">//3.3、创建代理对象&lt;/span>
&lt;span class="hll"> &lt;span class="nc">Object&lt;/span> &lt;span class="n">proxy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createProxy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanClass&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">beanName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">specificInterceptors&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">targetSource&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span> &lt;span class="c1">//3.4、将代理类型放入proxyTypes从而允许后续的predictBeanType()调用获取&lt;/span>
 &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">proxyTypes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cacheKey&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">proxy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="o">());&lt;/span>
 &lt;span class="k">return&lt;/span> &lt;span class="n">proxy&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="o">}&lt;/span>

 &lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>HikariCP 源码分析 -- FastList</title><link>https://www.diguage.com/post/hikari-cp-source-analysis-fast-list/</link><pubDate>Sun, 02 Aug 2020 15:06:02 +0800</pubDate><guid>https://www.diguage.com/post/hikari-cp-source-analysis-fast-list/</guid><description>&lt;div class="paragraph">
&lt;p>在前面的文章 &lt;a href="https://www.diguage.com/post/hikari-cp-source-analysis-concurrent-bag/">HikariCP 源码分析 — ConcurrentBag&lt;/a> 中，D瓜哥分析了一下 HikariCP 中一个非常重要的数据结构 &lt;code>ConcurrentBag&lt;/code>。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>今天，继续再介绍 HikariCP 中另一个很关键的数据结构： &lt;code>FastList&lt;/code>。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>&lt;code>FastList&lt;/code> 本身的实现非常简单，要理解它的奥秘，就需要结合 Java 原生集合类的 &lt;code>ArrayList&lt;/code> 来比较性地看。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_构造函数">构造函数&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>先来对比一下两者的构造函数。先来看看 &lt;code>FastList&lt;/code>：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="title">&lt;code>FastList&lt;/code>&lt;/div>
&lt;div class="content">
&lt;pre class="rouge highlight">&lt;code data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">FastList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="no">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="nc">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="no">T&lt;/span>&lt;span class="o">&amp;gt;,&lt;/span> &lt;span class="nc">RandomAccess&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nc">Serializable&lt;/span>
&lt;span class="o">{&lt;/span>
 &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">serialVersionUID&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">4598088075242913858L&lt;/span>&lt;span class="o">;&lt;/span>

 &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="nc">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="kd">private&lt;/span> &lt;span class="no">T&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">elementData&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">;&lt;/span>

 &lt;span class="cm">/**
 * Construct a FastList with a default size of 32.
 * @param clazz the Class stored in the collection
 */&lt;/span>
 &lt;span class="nd">@SuppressWarnings&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;unchecked&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
 &lt;span class="kd">public&lt;/span> &lt;span class="nf">FastList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">)&lt;/span>
 &lt;span class="o">{&lt;/span>
 &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">elementData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="no">T&lt;/span>&lt;span class="o">[])&lt;/span> &lt;span class="nc">Array&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newInstance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">clazz&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">32&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">clazz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="o">}&lt;/span>

 &lt;span class="cm">/**
 * Construct a FastList with a specified size.
 * @param clazz the Class stored in the collection
 * @param capacity the initial size of the FastList
 */&lt;/span>
 &lt;span class="nd">@SuppressWarnings&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;unchecked&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
 &lt;span class="kd">public&lt;/span> &lt;span class="nf">FastList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">capacity&lt;/span>&lt;span class="o">)&lt;/span>
 &lt;span class="o">{&lt;/span>
 &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">elementData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="no">T&lt;/span>&lt;span class="o">[])&lt;/span> &lt;span class="nc">Array&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newInstance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">clazz&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">capacity&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">clazz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>源码剖析 Spring 循环依赖</title><link>https://www.diguage.com/post/spring-circular-dependence/</link><pubDate>Fri, 31 Jul 2020 18:33:30 +0800</pubDate><guid>https://www.diguage.com/post/spring-circular-dependence/</guid><description>&lt;div class="paragraph">
&lt;p>循环依赖在编程中是一个常见问题（当然，这并不是最佳实践）。并且，Spring 如何解决循环依赖这个问题在面试中也经常见。下面，D瓜哥就从源码的层面深入剖析一下这个问题。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_示例程序">示例程序&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>先展示一下示例程序：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight">&lt;code data-lang="java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">com.diguage.truman.context&lt;/span>&lt;span class="o">;&lt;/span>

&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.apache.commons.logging.Log&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.apache.commons.logging.LogFactory&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.junit.jupiter.api.Test&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.beans.factory.annotation.Autowired&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.context.annotation.Configuration&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.context.annotation.Import&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.context.annotation.ImportSelector&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.core.type.AnnotationMetadata&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.stereotype.Component&lt;/span>&lt;span class="o">;&lt;/span>

&lt;span class="cm">/**
 * @author D瓜哥, &lt;a href="https://www.diguage.com/" target="_blank">https://www.diguage.com/&lt;/a>
 * @since 2020-05-24 13:02
 */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">CircularDependenceSingletonTest&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="nc">Log&lt;/span> &lt;span class="n">log&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">LogFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLog&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">CircularDependenceSingletonTest&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>

 &lt;span class="nd">@Test&lt;/span>
 &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nc">AnnotationConfigApplicationContext&lt;/span> &lt;span class="n">applicationContext&lt;/span>
 &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nc">AnnotationConfigApplicationContext&lt;/span>&lt;span class="o">();&lt;/span>
 &lt;span class="n">applicationContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">register&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">Config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="n">applicationContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">refresh&lt;/span>&lt;span class="o">();&lt;/span>

 &lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">applicationContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="no">A&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">));&lt;/span>
 &lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">applicationContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="no">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">));&lt;/span>
 &lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">applicationContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="no">C&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">));&lt;/span>

 &lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-A--------&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="no">A&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">applicationContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="no">A&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">b&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-B--------&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="no">B&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">applicationContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="no">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">c&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;-C--------&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="no">C&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">applicationContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="no">C&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">a&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="o">}&lt;/span>

 &lt;span class="nd">@Configuration&lt;/span>
 &lt;span class="nd">@Import&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">AbcImportSelector&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
 &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Config&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="o">}&lt;/span>

 &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AbcImportSelector&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="nc">ImportSelector&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nd">@Override&lt;/span>
 &lt;span class="kd">public&lt;/span> &lt;span class="nc">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="nf">selectImports&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">AnnotationMetadata&lt;/span> &lt;span class="n">importingClassMetadata&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nc">String&lt;/span>&lt;span class="o">[]{&lt;/span>
 &lt;span class="no">A&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">(),&lt;/span>
 &lt;span class="no">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">(),&lt;/span>
 &lt;span class="no">C&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">()};&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="o">}&lt;/span>


 &lt;span class="nd">@Component&lt;/span>
 &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">A&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nd">@Autowired&lt;/span>
 &lt;span class="no">B&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="o">}&lt;/span>

 &lt;span class="nd">@Component&lt;/span>
 &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">B&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nd">@Autowired&lt;/span>
 &lt;span class="no">C&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="o">}&lt;/span>

 &lt;span class="nd">@Component&lt;/span>
 &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">C&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nd">@Autowired&lt;/span>
 &lt;span class="no">A&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>上述示例代码中的循环依赖情况如下：&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/spring-framework/circular-dependence.jpg" alt="循环依赖" width="98%"/>
&lt;/div>
&lt;div class="title">图 1. 循环依赖&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_源码剖析">源码剖析&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="sect2">
&lt;h3 id="_三级缓存">三级缓存&lt;/h3>
&lt;div class="paragraph">
&lt;p>D瓜哥在 &lt;a href="https://www.diguage.com/post/dive-into-spring-core-data-structure-bean-factory/#registry">深入剖析 Spring 核心数据结构：BeanFactory&lt;/a> 中，概要性地对 &lt;code>BeanFactory&lt;/code> 的属性做了一一说明。
而其中的“三级缓存”属性，则是解决循环依赖问题的关键所在：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;code>Map&amp;lt;String, Object&amp;gt; singletonObjects = new ConcurrentHashMap&amp;lt;&amp;gt;(256)&lt;/code>：Bean 名称到单例 Bean 的映射，用于存放完全初始化好的 Bean。可以理解成，这就是所谓的容器。这是一级缓存。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Map&amp;lt;String, Object&amp;gt; earlySingletonObjects = new HashMap&amp;lt;&amp;gt;(16)&lt;/code>：Bean 到“未成熟”单例 Bean 的映射。该 Bean 对象只是被创建出来，但是还没有注入依赖。在容器解决循环依赖时，用于存储中间状态。这是二级缓存。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Map&amp;lt;String, ObjectFactory&amp;lt;?&amp;gt;&amp;gt; singletonFactories = new HashMap&amp;lt;&amp;gt;(16)&lt;/code>：Bean 名称到 Bean 的 ObjectFactory 对象的映射，存放 Bean 工厂对象。在容器解决循环依赖时，用于存储中间状态。这是三级缓存。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="paragraph">
&lt;p>Bean 的获取过程就类似计算机缓存的作用过程：先从一级获取，失败再从二级、三级里面获取。在 &lt;code>org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#getSingleton(java.lang.String, boolean)&lt;/code> 方法中，可以明确看到整个过程：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="title">&lt;code>org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#getSingleton(beanName, allowEarlyReference)&lt;/code>&lt;/div>
&lt;div class="content">
&lt;pre class="rouge highlight">&lt;code data-lang="java">&lt;span class="cm">/**
 * Return the (raw) singleton object registered under the given name.
 * &amp;lt;p&amp;gt;Checks already instantiated singletons and also allows for an early
 * reference to a currently created singleton (resolving a circular reference).
 * @param beanName the name of the bean to look for
 * @param allowEarlyReference whether early references should be created or not
 * @return the registered singleton object, or {@code null} if none found
 */&lt;/span>
&lt;span class="nd">@Nullable&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="nc">Object&lt;/span> &lt;span class="nf">getSingleton&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">String&lt;/span> &lt;span class="n">beanName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">allowEarlyReference&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nc">Object&lt;/span> &lt;span class="n">singletonObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">singletonObjects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">singletonObject&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">isSingletonCurrentlyInCreation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">singletonObjects&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="n">singletonObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">earlySingletonObjects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">singletonObject&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">allowEarlyReference&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nc">ObjectFactory&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">singletonFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">singletonFactories&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">singletonFactory&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="n">singletonObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">singletonFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getObject&lt;/span>&lt;span class="o">();&lt;/span>
 &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">earlySingletonObjects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">singletonObject&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">singletonFactories&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">remove&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="k">return&lt;/span> &lt;span class="n">singletonObject&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>分布式锁之 Apache Curator InterProcessReadWriteLock</title><link>https://www.diguage.com/post/distributed-lock-apache-curator-interprocessreadwritelock/</link><pubDate>Wed, 22 Jul 2020 10:45:44 +0800</pubDate><guid>https://www.diguage.com/post/distributed-lock-apache-curator-interprocessreadwritelock/</guid><description>&lt;div class="paragraph">
&lt;p>在上一篇文章 &lt;a href="https://www.diguage.com/post/distributed-lock-apache-curator-interprocessmutex/">分布式锁之 Apache Curator InterProcessMutex&lt;/a> 中介绍了基于 ZooKeeper 实现的互斥锁。除此之外，还可以实现读写锁。这篇文章就来简要介绍一下 &lt;code>InterProcessReadWriteLock&lt;/code> 的实现原理。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>老规矩，先看看类的注释：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight">&lt;code data-lang="java">&lt;span class="cm">/**
 * &amp;lt;p&amp;gt;
 * A re-entrant read/write mutex that works across JVMs. Uses Zookeeper to hold the lock. All processes
 * in all JVMs that use the same lock path will achieve an inter-process critical section. Further, this mutex is
 * &amp;#34;fair&amp;#34; - each user will get the mutex in the order requested (from ZK&amp;#39;s point of view).
 * &amp;lt;/p&amp;gt;
 *
 * &amp;lt;p&amp;gt;
 * A read write lock maintains a pair of associated locks, one for read-only operations and one
 * for writing. The read lock may be held simultaneously by multiple reader processes, so long as
 * there are no writers. The write lock is exclusive.
 * &amp;lt;/p&amp;gt;
 *
 * &amp;lt;p&amp;gt;
 * &amp;lt;b&amp;gt;Reentrancy&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;
 * This lock allows both readers and writers to reacquire read or write locks in the style of a
 * re-entrant lock. Non-re-entrant readers are not allowed until all write locks held by the
 * writing thread/process have been released. Additionally, a writer can acquire the read lock, but not
 * vice-versa. If a reader tries to acquire the write lock it will never succeed.&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
 *
 * &amp;lt;b&amp;gt;Lock downgrading&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;
 * Re-entrancy also allows downgrading from the write lock to a read lock, by acquiring the write
 * lock, then the read lock and then releasing the write lock. However, upgrading from a read
 * lock to the write lock is not possible.
 * &amp;lt;/p&amp;gt;
 */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">InterProcessReadWriteLock&lt;/span>
&lt;span class="o">{&lt;/span>&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>分布式锁之 Apache Curator InterProcessMutex</title><link>https://www.diguage.com/post/distributed-lock-apache-curator-interprocessmutex/</link><pubDate>Tue, 21 Jul 2020 10:13:21 +0800</pubDate><guid>https://www.diguage.com/post/distributed-lock-apache-curator-interprocessmutex/</guid><description>&lt;div class="paragraph">
&lt;p>对分布式锁耳熟能详。不过，一直关注的是基于 Redis 实现的分布式锁。知道 ZooKeeper 也可以实现分布式锁。但是，原来的想法是把 Redis 那个思路切换到 ZooKeeper 上来实现就好。今天了解到 Apache Curator 内置了分布式锁的实现： &lt;code>InterProcessMutex&lt;/code>。查看了一下源码实现，发现跟基于 Redis 实现的源码相比，在思路上还是有很大不同的。所以，特别作文记录一下。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>先来看一下，整体流程：&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>&lt;span class="image">&lt;img src="https://www.diguage.com/images/distributed-system/InterProcessMutex-process.png" alt="InterProcessMutex process" width="95%"/>&lt;/span>&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>结合流程图和源码，加锁的过程是这样的：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>先判断本地是否有锁数据，如果有则对锁定次数自增一下，然后返回 &lt;code>true&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果没有锁数据，则尝试获取锁：&lt;/p>
&lt;div class="olist loweralpha">
&lt;ol class="loweralpha" type="a">
&lt;li>
&lt;p>在指定路径下创建临时顺序节点&lt;/p>
&lt;/li>
&lt;li>
&lt;p>获取指定路径下，所有节点，检查自身是否是序号最小的节点：&lt;/p>
&lt;div class="olist lowerroman">
&lt;ol class="lowerroman" type="i">
&lt;li>
&lt;p>如果自身序号最小，则获得锁；否则&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果自身不是序号最小的节点，则通过 &lt;code>while&lt;/code> 自旋 + &lt;code>wait(times)&lt;/code> 不断尝试获取锁，直到成功。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>获得锁后，把锁信息缓存在本地 &lt;code>ConcurrentMap&amp;lt;Thread, LockData&amp;gt; threadData&lt;/code> 变量中，方便计算重入。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在 ZooKeeper 中的结构大致如下：&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>&lt;span class="image">&lt;img src="https://www.diguage.com/images/distributed-system/InterProcessMutex-structure.png" alt="InterProcessMutex structure" width="95%"/>&lt;/span>&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>下面我们逐个方法进行分析说明。先来看一下 &lt;code>InterProcessMutex&lt;/code> 的注释：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight">&lt;code data-lang="java">&lt;span class="cm">/**
 * A re-entrant mutex that works across JVMs. Uses Zookeeper to hold the lock. All processes in all JVMs that
 * use the same lock path will achieve an inter-process critical section. Further, this mutex is
 * &amp;#34;fair&amp;#34; - each user will get the mutex in the order requested (from ZK&amp;#39;s point of view)
 */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">InterProcessMutex&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="nc">InterProcessLock&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nc">Revocable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nc">InterProcessMutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>Spring 扩展点实践：整合 Apache Dubbo（二）</title><link>https://www.diguage.com/post/spring-extensions-and-dubbo-2/</link><pubDate>Sat, 11 Jul 2020 16:20:00 +0800</pubDate><guid>https://www.diguage.com/post/spring-extensions-and-dubbo-2/</guid><description>&lt;div class="paragraph">
&lt;p>在 &lt;a href="https://www.diguage.com/post/spring-extensions-and-dubbo-1/" target="_blank" rel="noopener">Spring 扩展点实践：整合 Apache Dubbo（一）&lt;/a> 中，D瓜哥介绍了 Dubbo 如何使用 Spring 的插件机制与 Spring 整合。限于篇幅原因，上一篇文章只介绍到了服务提供者的注册。本篇文章继续上一篇文章的主题，继续介绍 Spring 与 Dubbo 的整合过程。先来讲解一下服务消费者的生成过程。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_dubbo_生成服务消费者的过程">Dubbo 生成服务消费者的过程&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>先来看看 XML 配置文件：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="title">&lt;code>dubbo-demo/dubbo-demo-xml/dubbo-demo-xml-consumer/src/main/resources/spring/dubbo-consumer.xml&lt;/code>&lt;/div>
&lt;div class="content">
&lt;pre class="rouge highlight">&lt;code data-lang="xml">&lt;span class="cp">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;beans&lt;/span> &lt;span class="na">xmlns:xsi=&lt;/span>&lt;span class="s">&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span>
 &lt;span class="na">xmlns:dubbo=&lt;/span>&lt;span class="s">&amp;#34;http://dubbo.apache.org/schema/dubbo&amp;#34;&lt;/span>
 &lt;span class="na">xmlns=&lt;/span>&lt;span class="s">&amp;#34;http://www.springframework.org/schema/beans&amp;#34;&lt;/span>
 &lt;span class="na">xsi:schemaLocation=&lt;/span>&lt;span class="s">&amp;#34;http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans.xsd
 http://dubbo.apache.org/schema/dubbo
 http://dubbo.apache.org/schema/dubbo/dubbo.xsd&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>

 &lt;span class="nt">&amp;lt;dubbo:application&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;demo-consumer&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>

 &lt;span class="nt">&amp;lt;dubbo:registry&lt;/span> &lt;span class="na">address=&lt;/span>&lt;span class="s">&amp;#34;zookeeper://127.0.0.1:2181&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>

 &lt;span class="nt">&amp;lt;dubbo:reference&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;demoService&amp;#34;&lt;/span> &lt;span class="na">check=&lt;/span>&lt;span class="s">&amp;#34;false&amp;#34;&lt;/span> &lt;span class="na">interface=&lt;/span>&lt;span class="s">&amp;#34;org.apache.dubbo.demo.DemoService&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>

&lt;span class="nt">&amp;lt;/beans&amp;gt;&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>我们先看一下 &lt;code>ReferenceBean&lt;/code> 类的声明：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="title">&lt;code>org.apache.dubbo.config.spring.ReferenceBean&lt;/code>&lt;/div>
&lt;div class="content">
&lt;pre class="rouge highlight">&lt;code data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ReferenceBean&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="no">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="nc">ReferenceConfig&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="no">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="nc">FactoryBean&lt;/span>&lt;span class="o">,&lt;/span>
 &lt;span class="nc">ApplicationContextAware&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nc">InitializingBean&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nc">DisposableBean&lt;/span> &lt;span class="o">{&lt;/span>

 &lt;span class="c1">// 此处省略 N 行代码&lt;/span>

 &lt;span class="nd">@Override&lt;/span>
 &lt;span class="kd">public&lt;/span> &lt;span class="nc">Object&lt;/span> &lt;span class="nf">getObject&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="k">return&lt;/span> &lt;span class="nf">get&lt;/span>&lt;span class="o">();&lt;/span>
 &lt;span class="o">}&lt;/span>

 &lt;span class="c1">// 此处省略 N 行代码&lt;/span>

 &lt;span class="nd">@Override&lt;/span>
 &lt;span class="nd">@SuppressWarnings&lt;/span>&lt;span class="o">({&lt;/span>&lt;span class="s">&amp;#34;unchecked&amp;#34;&lt;/span>&lt;span class="o">})&lt;/span>
 &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">afterPropertiesSet&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="nc">Exception&lt;/span> &lt;span class="o">{&lt;/span>

 &lt;span class="c1">// Initializes Dubbo&amp;#39;s Config Beans before @Reference bean autowiring&lt;/span>
 &lt;span class="n">prepareDubboConfigBeans&lt;/span>&lt;span class="o">();&lt;/span>

 &lt;span class="c1">// lazy init by default.&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">init&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="n">init&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="o">}&lt;/span>

 &lt;span class="c1">// eager init if necessary.&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">shouldInit&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="n">getObject&lt;/span>&lt;span class="o">();&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="o">}&lt;/span>

 &lt;span class="c1">// 此处省略 N 行代码&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>这个类实现了 &lt;code>FactoryBean&lt;/code> 接口，D瓜哥在 &lt;a href="https://www.diguage.com/post/spring-extensions-overview/#factory-bean">Spring 扩展点概览及实践：FactoryBean&lt;/a> 中对 &lt;code>FactoryBean&lt;/code> 介绍。所以，请在上面的 &lt;code>getObject()&lt;/code> 打个断点。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>另外，这个类还实现了 &lt;code>InitializingBean&lt;/code>，D瓜哥在 &lt;a href="https://www.diguage.com/post/spring-bean-lifecycle-overview/">Spring Bean 生命周期概述&lt;/a> 中介绍了这个接口的用途。不了解的，请移步。&lt;/p>
&lt;/div></description></item><item><title>Spring 扩展点实践：整合 Apache Dubbo（一）</title><link>https://www.diguage.com/post/spring-extensions-and-dubbo-1/</link><pubDate>Thu, 09 Jul 2020 16:28:35 +0800</pubDate><guid>https://www.diguage.com/post/spring-extensions-and-dubbo-1/</guid><description>&lt;div class="paragraph">
&lt;p>在上一篇文章 &lt;a href="https://www.diguage.com/post/spring-extensions-overview/" target="_blank" rel="noopener">Spring 扩展点概览及实践&lt;/a> 中介绍了 Spring 内部存在的扩展点。 &lt;a href="https://www.diguage.com/post/spring-extensions-and-mybatis/" target="_blank" rel="noopener">Spring 扩展点实践：整合 MyBATIS&lt;/a> 中，D瓜哥带大家了解了一下 MyBATIS 如何利用 Spring 的扩展点实现了与 Spring 的完美整合。现在，学以致用，我们继续来分析一下 Spring 与 Apache Dubbo 的整合流程。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_示例程序">示例程序&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>Apache Dubbo 仓库中就有很完整的示例。D瓜哥直接拿来使用就不再搭建示例程序了。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>首先，需要启动一个 ZooKeeper 实例。查看 Dubbo 的依赖可以看出，最新版代码依赖的 ZooKeeper 是 3.4.13 版。所以，为了最好的兼容性，就要选用 3.4.X 版的 ZooKeeper 服务器。D瓜哥直接使用 Docker 启动 ZooKeeper 了。命令如下：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight">&lt;code data-lang="bash">docker run &lt;span class="nt">--rm&lt;/span> &lt;span class="nt">--name&lt;/span> zookeeper &lt;span class="nt">-d&lt;/span> &lt;span class="nt">-p&lt;/span> 2181:2181 zookeeper:3.4.14&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>这次我们使用 &lt;a href="https://github.com/apache/dubbo" target="_blank" rel="noopener">Apache Dubbo&lt;/a> 的 &lt;code>dubbo-demo/dubbo-demo-xml&lt;/code> 示例。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>第二步，启动服务提供者程序，找到 &lt;code>DUBBO/dubbo-demo/dubbo-demo-xml/dubbo-demo-xml-provider/src/main/java/org/apache/dubbo/demo/provider/Application.java&lt;/code>，运行该类。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>第三步，运行服务消费者程序，找到 &lt;code>DUBBO/dubbo-demo/dubbo-demo-xml/dubbo-demo-xml-consumer/src/main/java/org/apache/dubbo/demo/consumer/Application.java&lt;/code>，运行该类。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>如果没有任何错误，则在终端可以看到 &lt;code>result: async result&lt;/code> 输出。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在开始正餐之前，D瓜哥先给大家来个开胃菜。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="spring-plugin">Spring 插件机制简介&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>不知道大家有没有想过一个问题：Spring 框架是如何支持越来越多的功能的？&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在D瓜哥了解到 Spring 的插件机制后，非常叹服 Spring 精巧的设计和灵活的扩展性。闲言少叙，好戏上演。&lt;/p>
&lt;/div></description></item><item><title>Kafka 常见面试题</title><link>https://www.diguage.com/post/kafka-interview-questions/</link><pubDate>Wed, 01 Jul 2020 18:08:51 +0800</pubDate><guid>https://www.diguage.com/post/kafka-interview-questions/</guid><description>&lt;div class="paragraph">
&lt;p>Kafka 是由 LinkedIn 开发的一个分布式的消息系统，使用 Scala 编写，它以可水平扩展和高吞吐率而被广泛使用。Kafka 本身设计也非常精巧，有很多关键的知识点需要注意。在面试中，也常常被问到。整理篇文章，梳理一下自己的知识点。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_架构设计问题">架构设计问题&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>Kafka 整体架构如下：&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/kafka/kafka-architecture.png" alt="Kafka 架构" width="98%"/>
&lt;/div>
&lt;div class="title">图 1. Kafka 架构&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>Kafka 架构分为以下几个部分&lt;/p>
&lt;/div>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Producer&lt;/strong>：消息生产者，就是向 Kafka Broker 发消息的客户端。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Consumer&lt;/strong>：消息消费者，向 Kafka Broker 取消息的客户端。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Topic&lt;/strong>：可以理解为一个队列，一个 Topic 又分为一个或多个分区。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Consumer Group&lt;/strong>：这是 Kafka 用来实现一个 Topic 消息的广播（发给所有的 Consumer）和单播（发给任意一个 Consumer）的手段。一个 Topic 可以有多个 Consumer Group。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Broker&lt;/strong>：一台 Kafka 服务器就是一个 Broker。一个集群由多个 Broker 组成。一个 Broker 可以容纳多个 Topic。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Partition&lt;/strong>：为了实现扩展性，一个非常大的 Topic 可以分布到多个 Broker上，每个 Partition 是一个有序的队列。Partition 中的每条消息都会被分配一个有序的id（offset）。将消息发给 Consumer，Kafka 只保证按一个 Partition 中的消息的顺序，不保证一个 Topic 的整体（多个 Partition 间）的顺序。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Offset&lt;/strong>：Kafka 的存储文件都是按照 offset.Kafka 来命名，用 offset 做名字的好处是方便查找。例如你想找位于 2049 的位置，只要找到 2048.Kafka 的文件即可。当然 the first offset 就是 00000000000.Kafka。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div></description></item><item><title>深入剖析 Spring 核心数据结构：BeanFactory</title><link>https://www.diguage.com/post/dive-into-spring-core-data-structure-bean-factory/</link><pubDate>Fri, 26 Jun 2020 15:30:08 +0800</pubDate><guid>https://www.diguage.com/post/dive-into-spring-core-data-structure-bean-factory/</guid><description>&lt;div class="paragraph">
&lt;p>在 &lt;a href="https://www.diguage.com/post/dive-into-spring-core-data-structure-bean-definition/" target="_blank" rel="noopener">深入剖析 Spring 核心数据结构：BeanDefinition&lt;/a> 中，介绍了 &lt;code>BeanDefinition&lt;/code>。网上很多文章介绍 &lt;code>BeanDefinition&lt;/code> 的 API，D瓜哥却要反其道而行之，从内部属性来分析一下。下面我们开始。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_继承体系">继承体系&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>Spring 非常好地遵循了面向对象的设计原则：面向接口编程。不放过任何可以提取出成接口的机会。虽然感觉似乎增加了类的继承关系，增加了一点的复杂度。但是，却带来了非常好的可扩展性。而 &lt;code>BeanFactory&lt;/code> 的继承体系就是一个非常典型的例子。我们来看一下它的继承体系：&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/spring-framework/BeanFactory.svg" alt="BeanFactory 继承体系" width="98%"/>
&lt;/div>
&lt;div class="title">图 1. BeanFactory 继承体系&lt;/div>
&lt;/div>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>&lt;code>AliasRegistry&lt;/code>：别名注册器。Spring 中，别名注册相关的功能就是从这里实现的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>SimpleAliasRegistry&lt;/code>：别名注册器的一个简单实现，从内部属性可以看出，它是把别名映射信息存到一个 &lt;code>Map&lt;/code> 中了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>DefaultSingletonBeanRegistry&lt;/code>：默认的单例 Bean 注册器，从内部属性来说，也是基于 &lt;code>Map&lt;/code> 实现的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>FactoryBeanRegistrySupport&lt;/code>： &lt;code>FactoryBean&lt;/code> 注册器。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>SingletonBeanRegistry&lt;/code>：单例 Bean 注册器。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>BeanDefinitionRegistry&lt;/code>： &lt;code>BeanDefinition&lt;/code> 注册器。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>BeanFactory&lt;/code>：容器的基类。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ListableBeanFactory&lt;/code>：在基本容器基础上，增加了遍历相关功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>HierarchicalBeanFactory&lt;/code>：在基本容器基础上，增加了父子上下级容器关联。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>AutowireCapableBeanFactory&lt;/code>：在基本容器基础上，增加了自动注入功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ConfigurableBeanFactory&lt;/code>：对容器增加可配置性，比如父级容器、&lt;code>ClassLoader&lt;/code>、&lt;code>TypeConverter&lt;/code> 等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ConfigurableListableBeanFactory&lt;/code>：可配置可遍历容器。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>AbstractBeanFactory&lt;/code>：容器的抽象实现类，实现了容器的基础功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>AbstractAutowireCapableBeanFactory&lt;/code>：带自动装配功能的抽象容器类。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>DefaultListableBeanFactory&lt;/code>：这是 Spring 内部使用的默认容器实现。也是 Spring 中最重要的一个类。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_核心属性">核心属性&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="sect2">
&lt;h3 id="registry">Registry&lt;/h3>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;code>Map&amp;lt;String, String&amp;gt; aliasMap = new ConcurrentHashMap&amp;lt;&amp;gt;(16)&lt;/code>：别名到 Bean 名称的映射。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>Map&amp;lt;String, Object&amp;gt; singletonObjects = new ConcurrentHashMap&amp;lt;&amp;gt;(256)&lt;/code>&lt;/strong>：Bean 名称到单例 Bean 的映射。可以理解成，这就是所谓的容器。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Map&amp;lt;String, Object&amp;gt; earlySingletonObjects = new HashMap&amp;lt;&amp;gt;(16)&lt;/code>：Bean 到“未成熟”单例 Bean 的映射。该 Bean 对象只是被创建出来，但是还没有注入依赖。在容器解决循环依赖时，用于存储中间状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Map&amp;lt;String, ObjectFactory&amp;lt;?&amp;gt;&amp;gt; singletonFactories = new HashMap&amp;lt;&amp;gt;(16)&lt;/code>：Bean 名称到 Bean 的 &lt;code>ObjectFactory&lt;/code> 对象的映射，在容器解决循环依赖时，用于存储中间状态。&lt;/p>
&lt;div class="paragraph">
&lt;p>关于这三个属性的进一步说明，请移步： &lt;a href="https://www.diguage.com//post/spring-circular-dependence/">源码剖析 Spring 循环依赖&lt;/a>。&lt;/p>
&lt;/div></description></item><item><title>深入剖析 Spring 核心数据结构：BeanDefinition</title><link>https://www.diguage.com/post/dive-into-spring-core-data-structure-bean-definition/</link><pubDate>Sun, 21 Jun 2020 21:18:57 +0800</pubDate><guid>https://www.diguage.com/post/dive-into-spring-core-data-structure-bean-definition/</guid><description>&lt;div class="paragraph">
&lt;p>林纳斯·托瓦兹（Linus Torvalds）说：“我从心底认为，优秀的程序员与平庸的程序员之间的区别，是在于认为自己的代码重要还是数据结构更加重要。平庸的程序员眼里只有代码，优秀的程序员则关注数据结构及之前的关系。” 也许很多人觉得 Spring 神秘莫测，但是如果了解了它的核心数据结构，很多问题迎刃而解。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>Spring 中两个数据结构最核心：① &lt;code>BeanDefinition&lt;/code>，用于表示 Bean 的定义；② &lt;code>BeanFactory&lt;/code>，用于表示整个 IoC 容器。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在前面文章 &lt;a href="https://www.diguage.com/post/spring-bean-lifecycle-overview/" target="_blank" rel="noopener">Spring Bean 生命周期概述&lt;/a>中，介绍了 Spring Bean 的生命周期。不知道大家有没有思考过 Spring 在内部是如何表示一个 Bean 的？本篇文章，就来聊一聊 &lt;code>BeanDefinition&lt;/code>&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_问题">问题&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>使用 Spring 时，尤其是使用 XML 配置的时候，也许我们会这样的问题：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>Bean 怎么表示？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Bean 的依赖怎么表示？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>init-method&lt;/code> 方法怎么存储？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Bean 的一些属性，比如 &lt;code>lazy-init&lt;/code> 等，怎么表示？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Bean 构造函数的参数怎么存储？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>…​&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="paragraph">
&lt;p>Java 也有类似的问题，比如怎么表示一个类？Java 通过反射 API 来解决这个问题：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;code>Class&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Method&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Field&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Constructor&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Annotation&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="paragraph">
&lt;p>但是，为什么 Spring 还要自己定义一套呢？主要原因是 Java 反射 API 不满足 Spring 的需求，比如，它没办法表示哪些类是 &lt;code>SCOPE_SINGLETON&lt;/code>，哪些类是 &lt;code>SCOPE_PROTOTYPE&lt;/code>。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>另外，Spring 的 Bean 抽象也并不是完全自定义的，它是基于 Java 反射 API 又增加了自定义功能，其核心 API 就是 &lt;code>BeanDefinition&lt;/code>。下面，我们来仔细看一下它的继承体系以及内部核心属性。&lt;/p>
&lt;/div></description></item><item><title>Spring AOP 处理流程概述</title><link>https://www.diguage.com/post/spring-aop-process-overview/</link><pubDate>Sat, 20 Jun 2020 19:16:35 +0800</pubDate><guid>https://www.diguage.com/post/spring-aop-process-overview/</guid><description>&lt;div class="paragraph">
&lt;p>AOP 是 Spring 框架的最核心的两个功能之一，在前面的 &lt;a href="https://www.diguage.com/post/spring-startup-process-overview/" target="_blank" rel="noopener">Spring 启动流程概述&lt;/a> 和 &lt;a href="https://www.diguage.com/post/spring-bean-lifecycle-overview/" target="_blank" rel="noopener">Spring Bean 生命周期概述&lt;/a> 两篇文章中，分别介绍了 Spring 启动过程和 Spring Bean 的生命周期，对 IoC 有了一个细致介绍。这里来细致分析一下 Spring AOP 的实现原理和处理流程。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_基本概念">基本概念&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>先来了解几个基本概念，D瓜哥私以为这些概念是 AOP 中最核心的内容，了解了基本概念，可以说基本上掌握了一半的 AOP 内容。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>学习概念最权威的地方，当然就是官方文档。所以，这些概念可以在 &lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#aop-introduction-defn" target="_blank" rel="noopener">Spring Framework Documentation: AOP Concepts&lt;/a> 中看到最权威的介绍。&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;strong>Join point(连接点)&lt;/strong>: 所谓的连接点是指那些被拦截到的点。在 Spring 中，连接点指的是方法，因为 Spring 只支持方法类型的连接点。在 Spring 中，使用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Pointcut(切入点)&lt;/strong>: 所谓的切入点，是指要对哪些 &lt;strong>Join point(连接点)&lt;/strong> 进行拦截的定义。如果 Join point(连接点) 是全集，那么 Pointcut(切入点) 就是被选中的子集。写 AOP 代码的时候，一般是用 Pointcut(切入点) 表达式进行对 Join point(连接点) 进行选择。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Advice(通知/增强)&lt;/strong>: 所谓的通知就是指拦截到 Join point(连接点) 之后所要做的事情。通知根据作用位置不同，又细分为：&lt;/p>
&lt;div class="olist loweralpha">
&lt;ol class="loweralpha" type="a">
&lt;li>
&lt;p>&lt;strong>Before advice(前置通知)&lt;/strong>: 在 Join point(连接点) 之前运行的通知。这种通知，不能阻止执行流程继续到 Join point(连接点)。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>After returning advice(后置通知)&lt;/strong>: 在 Join point(连接点) 之后运行的通知。当然，如果在 Join point(连接点) 执行过程中，抛出异常，则可能就不执行了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>After throwing advice(异常通知)&lt;/strong>: 方法抛出异常后，将会执行的通知。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>After (finally) advice(最终通知)&lt;/strong>: 无论如何都会执行的通知，即使抛出异常。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Around advice(环绕通知)&lt;/strong>: 围绕在 Join point(连接点) 的通知，方法执行前和执行后，都可以执行自定义行为。同时，也可以决定是返回 Join point(连接点) 的返回值，还是返回自定义的返回值。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Spring Bean 生命周期概述</title><link>https://www.diguage.com/post/spring-bean-lifecycle-overview/</link><pubDate>Sat, 20 Jun 2020 17:33:07 +0800</pubDate><guid>https://www.diguage.com/post/spring-bean-lifecycle-overview/</guid><description>&lt;div class="paragraph">
&lt;p>在 &lt;a href="https://www.diguage.com/post/spring-startup-process-overview/" target="_blank" rel="noopener">Spring 启动流程概述&lt;/a> 中，分析了 Spring 的启动流程。本文就来说明一下 Spring Bean 整个生命周期。如果有不清楚的地方，可以参考上文的“附录：启动日志”。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>直接上图：Spring Bean 生命周期流程图。内容较多，图片文字偏小，请放大看（矢量图，可以任意放大）：&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/spring-framework/spring-bean-lifecycle.svg" alt="Spring Bean 生命周期流程图" width="98%"/>
&lt;/div>
&lt;div class="title">图 1. Spring Bean 生命周期流程图&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>下面是文字说明。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_bean_生命周期简述">Bean 生命周期简述&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>调用 &lt;code>InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation&lt;/code>，主要是判断 &lt;code>AnnotationAwareAspectJAutoProxyCreator&lt;/code> 是否可以生成代理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用构造函数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用 &lt;code>MergedBeanDefinitionPostProcessor#postProcessMergedBeanDefinition&lt;/code>，主要是通过 &lt;code>CommonAnnotationBeanPostProcessor&lt;/code>、 &lt;code>AutowiredAnnotationBeanPostProcessor&lt;/code> 收集依赖信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;span class="line-through">&lt;code>InstantiationAwareBeanPostProcessor#postProcessAfterInstantiation&lt;/code>，这步什么也没做。&lt;/span>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用 &lt;code>InstantiationAwareBeanPostProcessor#postProcessProperties&lt;/code>，主要是完成依赖注入。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用 &lt;code>AutowiredAnnotationBeanPostProcessor#setBeanFactory&lt;/code>，注入 &lt;code>BeanFactory&lt;/code> 等相关信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用 &lt;code>BeanPostProcessor#postProcessBeforeInitialization&lt;/code>，主要是注入 &lt;code>ApplicationContext&lt;/code> 等相关信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用 &lt;code>InitializingBean#afterPropertiesSet&lt;/code>、 &lt;code>init-method&lt;/code> 方法&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用 &lt;code>BeanPostProcessor#postProcessAfterInitialization&lt;/code>，主要是生成 AOP 代理类。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_bean_生命周期详解">Bean 生命周期详解&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>从 &lt;code>getBean()&lt;/code> 方法获取 Bean 时，如果缓存中没有对应的 Bean，则会创建 Bean，整个流程如下：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;code>InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation&lt;/code> — 目前有如下四个：&lt;/p>
&lt;div class="olist loweralpha">
&lt;ol class="loweralpha" type="a">
&lt;li>
&lt;p>&lt;code>ImportAwareBeanPostProcessor&lt;/code> — 继承父类实现，无所事事。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>AnnotationAwareAspectJAutoProxyCreator&lt;/code> — 继承父类实现，判断是否属于基础切面类，如果有指定的 Target 则生成代理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>CommonAnnotationBeanPostProcessor&lt;/code> — 无所事事。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>AutowiredAnnotationBeanPostProcessor&lt;/code> — 继承父类实现，无所事事。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Spring 启动流程概述</title><link>https://www.diguage.com/post/spring-startup-process-overview/</link><pubDate>Sat, 13 Jun 2020 00:31:25 +0800</pubDate><guid>https://www.diguage.com/post/spring-startup-process-overview/</guid><description>&lt;div class="paragraph">
&lt;p>对于 Spring 启动流程和 Bean 的生命周期，总有一些小地方搞的不是很清楚，干脆直接通过修改代码增加日志输出，使用断点单步调试，把整个流程捋顺了一点点的。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>除了加载配置文件或者基础配置类外，Spring 的启动过程几乎都被封装在 &lt;code>AbstractApplicationContext#refresh&lt;/code> 方法中，可以说弄清楚了这个方法的执行过程，就摸清楚了 Spring 启动全流程，下面的流程分析也是以这个方法为骨架来展开的。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_流程概要">流程概要&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>下面完整流程有些太复杂，所以，提炼一个简要的过程，方便糊弄面试官，哈哈哈😆&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>创建容器，读取 &lt;code>applicationContext.register(Config.class)&lt;/code> 指定的配置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>准备 &lt;code>BeanFactory&lt;/code>，注册容器本身和 &lt;code>BeanFactory&lt;/code> 实例，以及注册环境配置信息等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>执行 &lt;code>BeanDefinitionRegistryPostProcessor#postProcessBeanDefinitionRegistry&lt;/code> 注册 &lt;code>BeanDefinition&lt;/code>。有三点需要注意：&lt;/p>
&lt;div class="olist loweralpha">
&lt;ol class="loweralpha" type="a">
&lt;li>
&lt;p>目前只有一个 &lt;code>ConfigurationClassPostProcessor&lt;/code> 实现类，Spring 中大量的 Bean 都是在这一步被该类注册到容器中的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>执行顺序是 ① &lt;code>PriorityOrdered&lt;/code> ② &lt;code>Ordered&lt;/code> ③ 普通的顺序来执行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在执行上一步时，如果发现注册了 &lt;code>BeanDefinitionRegistryPostProcessor&lt;/code> 类型的 Bean，就会在循环里继续调用 &lt;code>postProcessBeanDefinitionRegistry&lt;/code> 方法。MyBATIS 和 Spring 整合的 &lt;code>MapperScannerConfigurer&lt;/code> 类就是在这一步执行的。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>执行 &lt;code>BeanFactoryPostProcessor#postProcessBeanFactory&lt;/code> 方法。目前只有一个 &lt;code>ConfigurationClassPostProcessor&lt;/code> 实现类。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>注册 &lt;code>CommonAnnotationBeanPostProcessor&lt;/code> 和 &lt;code>AutowiredAnnotationBeanPostProcessor&lt;/code> 为 &lt;code>BeanPostProcessor&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>注册 &lt;code>ApplicationEventMulticaster&lt;/code>，用于广播事件的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>注册 &lt;code>ApplicationListener&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>预加载以及注册所有非懒加载的 Bean&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_启动时序图">启动时序图&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>Spring 启动流程的时序图如下：&lt;/p>
&lt;/div></description></item><item><title>Spring 扩展点实践：整合 MyBATIS</title><link>https://www.diguage.com/post/spring-extensions-and-mybatis/</link><pubDate>Thu, 28 May 2020 20:06:46 +0800</pubDate><guid>https://www.diguage.com/post/spring-extensions-and-mybatis/</guid><description>&lt;div class="paragraph">
&lt;p>在上一篇文章 &lt;a href="https://www.diguage.com/post/spring-extensions-overview/" target="_blank" rel="noopener">Spring 扩展点概览及实践&lt;/a> 中介绍了 Spring 内部存在的扩展点。学以致用，现在来分析一下 Spring 与 MyBATIS 的整合流程。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_示例程序">示例程序&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>为了方便分析源码，先根据官方文档 &lt;a href="https://mybatis.org/spring/getting-started.html" target="_blank" rel="noopener">mybatis-spring – MyBatis-Spring | Getting Started&lt;/a> 搭建起一个简单实例。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>数据库方面，直接使用功能了 MySQL 示例数据库： &lt;a href="https://dev.mysql.com/doc/employee/en/" target="_blank" rel="noopener">MySQL : Employees Sample Database&lt;/a>，需要的话，自行下载。&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight">&lt;code data-lang="java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">com.diguage.truman.mybatis&lt;/span>&lt;span class="o">;&lt;/span>

&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.mysql.cj.jdbc.Driver&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.zaxxer.hikari.HikariDataSource&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.apache.ibatis.session.Configuration&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.junit.jupiter.api.Test&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.mybatis.spring.SqlSessionFactoryBean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.mybatis.spring.annotation.MapperScan&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.beans.factory.annotation.Autowired&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.context.annotation.Bean&lt;/span>&lt;span class="o">;&lt;/span>

&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.sql.DataSource&lt;/span>&lt;span class="o">;&lt;/span>

&lt;span class="cm">/**
 * @author D瓜哥, &lt;a href="https://www.diguage.com/" target="_blank">https://www.diguage.com/&lt;/a>
 * @since 2020-05-29 17:11
 */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MybatisTest&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nd">@Test&lt;/span>
 &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nc">AnnotationConfigApplicationContext&lt;/span> &lt;span class="n">context&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nc">AnnotationConfigApplicationContext&lt;/span>&lt;span class="o">();&lt;/span>
 &lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">register&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">Config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">refresh&lt;/span>&lt;span class="o">();&lt;/span>
 &lt;span class="nc">EmployeesMapper&lt;/span> &lt;span class="n">employeesMapper&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">EmployeesMapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="nc">Employees&lt;/span> &lt;span class="n">employees&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">employeesMapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getById&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">10001&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="nc">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">employees&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="o">}&lt;/span>

 &lt;span class="nd">@org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">springframework&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">annotation&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Configuration&lt;/span>
 &lt;span class="nd">@MapperScan&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">basePackages&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;com.diguage.truman.mybatis&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
 &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Config&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nd">@Bean&lt;/span>
 &lt;span class="kd">public&lt;/span> &lt;span class="nc">DataSource&lt;/span> &lt;span class="nf">dataSource&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nc">HikariDataSource&lt;/span> &lt;span class="n">dataSource&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nc">HikariDataSource&lt;/span>&lt;span class="o">();&lt;/span>
 &lt;span class="n">dataSource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setUsername&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;root&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="n">dataSource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setPassword&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;123456&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="n">dataSource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setDriverClassName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">Driver&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">());&lt;/span>
 &lt;span class="n">dataSource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setJdbcUrl&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jdbc:mysql://localhost:3306/employees?useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;autoReconnectForPools=true&amp;amp;autoReconnect=true&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="k">return&lt;/span> &lt;span class="n">dataSource&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="o">}&lt;/span>

 &lt;span class="nd">@Bean&lt;/span>
 &lt;span class="kd">public&lt;/span> &lt;span class="nc">SqlSessionFactoryBean&lt;/span> &lt;span class="nf">sqlSessionFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@Autowired&lt;/span> &lt;span class="nc">DataSource&lt;/span> &lt;span class="n">dataSource&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nc">SqlSessionFactoryBean&lt;/span> &lt;span class="n">factoryBean&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nc">SqlSessionFactoryBean&lt;/span>&lt;span class="o">();&lt;/span>
 &lt;span class="n">factoryBean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setDataSource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">dataSource&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="nc">Configuration&lt;/span> &lt;span class="n">configuration&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nc">Configuration&lt;/span>&lt;span class="o">();&lt;/span>
 &lt;span class="n">configuration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setMapUnderscoreToCamelCase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="n">factoryBean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setConfiguration&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">configuration&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="k">return&lt;/span> &lt;span class="n">factoryBean&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="title">EmployeesMapper&lt;/div>
&lt;div class="content">
&lt;pre class="rouge highlight">&lt;code data-lang="java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">com.diguage.truman.mybatis&lt;/span>&lt;span class="o">;&lt;/span>

&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.apache.ibatis.annotations.Param&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.apache.ibatis.annotations.Select&lt;/span>&lt;span class="o">;&lt;/span>

&lt;span class="cm">/**
 * @author D瓜哥, &lt;a href="https://www.diguage.com/" target="_blank">https://www.diguage.com/&lt;/a>
 * @since 2020-05-29 17:23
 */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">EmployeesMapper&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nd">@Select&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;SELECT * FROM employees WHERE emp_no = #{id}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
 &lt;span class="nc">Employees&lt;/span> &lt;span class="nf">getById&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@Param&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="nc">Integer&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="title">Employees&lt;/div>
&lt;div class="content">
&lt;pre class="rouge highlight">&lt;code data-lang="java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">com.diguage.truman.mybatis&lt;/span>&lt;span class="o">;&lt;/span>

&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.Date&lt;/span>&lt;span class="o">;&lt;/span>

&lt;span class="cm">/**
 * @author D瓜哥, &lt;a href="https://www.diguage.com/" target="_blank">https://www.diguage.com/&lt;/a>
 * @since 2020-05-29 17:24
 */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Employees&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nc">Integer&lt;/span> &lt;span class="n">empNo&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="nc">Date&lt;/span> &lt;span class="n">birthDate&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="nc">String&lt;/span> &lt;span class="n">firstName&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="nc">String&lt;/span> &lt;span class="n">lastName&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="nc">String&lt;/span> &lt;span class="n">gender&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="nc">Date&lt;/span> &lt;span class="n">hireDate&lt;/span>&lt;span class="o">;&lt;/span>

 &lt;span class="nd">@Override&lt;/span>
 &lt;span class="kd">public&lt;/span> &lt;span class="nc">String&lt;/span> &lt;span class="nf">toString&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;Employees{&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span>
 &lt;span class="s">&amp;#34;empNo=&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">empNo&lt;/span> &lt;span class="o">+&lt;/span>
 &lt;span class="s">&amp;#34;, birthDate=&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">birthDate&lt;/span> &lt;span class="o">+&lt;/span>
 &lt;span class="s">&amp;#34;, firstName=&amp;#39;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">firstName&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="sc">&amp;#39;\&amp;#39;&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span>
 &lt;span class="s">&amp;#34;, lastName=&amp;#39;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">lastName&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="sc">&amp;#39;\&amp;#39;&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span>
 &lt;span class="s">&amp;#34;, gender=&amp;#39;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">gender&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="sc">&amp;#39;\&amp;#39;&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span>
 &lt;span class="s">&amp;#34;, hireDate=&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">hireDate&lt;/span> &lt;span class="o">+&lt;/span>
 &lt;span class="sc">&amp;#39;}&amp;#39;&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>整个实例代码中，只有 &lt;code>@MapperScan(basePackages = &amp;#34;com.diguage.truman.mybatis&amp;#34;)&lt;/code> 这个注解和 MyBATIS 的配置相关，我们就从这里开始吧。&lt;/p>
&lt;/div></description></item><item><title>Spring 扩展点概览及实践</title><link>https://www.diguage.com/post/spring-extensions-overview/</link><pubDate>Tue, 26 May 2020 17:14:20 +0800</pubDate><guid>https://www.diguage.com/post/spring-extensions-overview/</guid><description>&lt;div class="paragraph">
&lt;p>学习 Spring 代码，最重要的是掌握 Spring 有哪些扩展点，可以利用这些扩展点对 Spring 做什么扩展操作。说得更具体一点，如果自己开发一个框架，如何与 Spring 进行整合，如果对 Spring 的扩展点有一个比较清晰的认识，势必会事半功倍。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_import">&lt;code>@Import&lt;/code>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>先来看一下 &lt;code>@Import&lt;/code> 注解的定义：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight">&lt;code data-lang="java">&lt;span class="nd">@Target&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">ElementType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TYPE&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Retention&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">RetentionPolicy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RUNTIME&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Documented&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nd">@interface&lt;/span> &lt;span class="nc">Import&lt;/span> &lt;span class="o">{&lt;/span>

 &lt;span class="cm">/**
 * {@link Configuration @Configuration}, {@link ImportSelector},
 * {@link ImportBeanDefinitionRegistrar}, or regular component classes to import.
 */&lt;/span>
 &lt;span class="nc">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;[]&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">();&lt;/span>

&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>从声明可以看出，使用时，只需要指定 &lt;code>Class&lt;/code> 实例即可；从方法的文档中可以看出，&lt;code>Class&lt;/code> 实例可以分为三种：&lt;code>ImportSelector&lt;/code>、&lt;code>ImportBeanDefinitionRegistrar&lt;/code> 和常规组件类。示例如下：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight">&lt;code data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="nd">@Import&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">LogImportSelector&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Config&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在 &lt;code>org.springframework.context.annotation.ConfigurationClassParser#processImports&lt;/code> 方法中，集中了对 &lt;code>@Import&lt;/code> 注解的处理。从代码可以非常清晰地看出，分了三种情况进行处理：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;code>ImportSelector&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ImportBeanDefinitionRegistrar&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>常规组件 &lt;code>Class&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="paragraph">
&lt;p>下面分别对其进行介绍。&lt;/p>
&lt;/div>
&lt;div class="sect2">
&lt;h3 id="_importselector">&lt;code>ImportSelector&lt;/code>&lt;/h3>
&lt;div class="paragraph">
&lt;p>先来看一下 &lt;code>ImportSelector&lt;/code> 接口的定义：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight">&lt;code data-lang="java">&lt;span class="cm">/**
 * Interface to be implemented by types that determine which @{@link Configuration}
 * class(es) should be imported based on a given selection criteria, usually one or
 * more annotation attributes.
 *
 * &amp;lt;p&amp;gt;{@code ImportSelector} implementations are usually processed in the same way
 * as regular {@code @Import} annotations, however, it is also possible to defer
 * selection of imports until all {@code @Configuration} classes have been processed
 * (see {@link DeferredImportSelector} for details).
 *
 * @since 3.1
 * @see DeferredImportSelector
 * @see Import
 * @see ImportBeanDefinitionRegistrar
 * @see Configuration
 */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">ImportSelector&lt;/span> &lt;span class="o">{&lt;/span>

 &lt;span class="cm">/**
 * Select and return the names of which class(es) should be imported based on
 * the {@link AnnotationMetadata} of the importing @{@link Configuration} class.
 * @return the class names, or an empty array if none
 */&lt;/span>
 &lt;span class="nc">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="nf">selectImports&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">AnnotationMetadata&lt;/span> &lt;span class="n">importingClassMetadata&lt;/span>&lt;span class="o">);&lt;/span>

 &lt;span class="cm">/**
 * Return a predicate for excluding classes from the import candidates, to be
 * transitively applied to all classes found through this selector&amp;#39;s imports.
 * &amp;lt;p&amp;gt;If this predicate returns {@code true} for a given fully-qualified
 * class name, said class will not be considered as an imported configuration
 * class, bypassing class file loading as well as metadata introspection.
 * @return the filter predicate for fully-qualified candidate class names
 * of transitively imported configuration classes, or {@code null} if none
 * @since 5.2.4
 */&lt;/span>
 &lt;span class="nd">@Nullable&lt;/span>
 &lt;span class="k">default&lt;/span> &lt;span class="nc">Predicate&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nc">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">getExclusionFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="o">}&lt;/span>

&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>HikariCP 源码分析 -- ConcurrentBag</title><link>https://www.diguage.com/post/hikari-cp-source-analysis-concurrent-bag/</link><pubDate>Wed, 06 May 2020 17:12:55 +0800</pubDate><guid>https://www.diguage.com/post/hikari-cp-source-analysis-concurrent-bag/</guid><description>&lt;div class="paragraph">
&lt;p>以前无意间搜资料了解到 HikariCP，一下子就被它的简洁代码和卓越性能吸引住了。以前也有翻过它的代码，但是不是很系统，最近再次翻阅，正好做些笔记，方便以后学习。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>D瓜哥最近在学习 Java 并发知识。那就从 HikariCP 自定义的并发集合 &lt;code>ConcurrentBag&lt;/code> 开始学习。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在 HikariCP 的 Wiki 中，有 &lt;a href="https://github.com/brettwooldridge/HikariCP/wiki/Down-the-Rabbit-Hole#concurrentbag" target="_blank" rel="noopener">Down the Rabbit Hole · ConcurrentBag&lt;/a> 的章节来专门介绍 &lt;code>ConcurrentBag&lt;/code>：&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>&lt;code>ConcurrentBag&lt;/code> 的灵感借鉴自 C# .NET 的 &lt;code>ConcurrentBag&lt;/code> 类。但是实现却是完全不同的。这里的 &lt;code>ConcurrentBag&lt;/code> 有如下特性：&lt;/p>
&lt;/div>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>A lock-free design&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ThreadLocal caching&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Queue-stealing&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Direct hand-off optimizations&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="paragraph">
&lt;p>下面，通过代码来对此做个说明。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在 &lt;code>ConcurrentBag&lt;/code> 类的定义中，声明了集合元素必须是 &lt;code>IConcurrentBagEntry&lt;/code> 的子类。先来看看这个接口的定义：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight">&lt;code data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">IConcurrentBagEntry&lt;/span>
&lt;span class="o">{&lt;/span>
 &lt;span class="kt">int&lt;/span> &lt;span class="no">STATE_NOT_IN_USE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="kt">int&lt;/span> &lt;span class="no">STATE_IN_USE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="kt">int&lt;/span> &lt;span class="no">STATE_REMOVED&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="kt">int&lt;/span> &lt;span class="no">STATE_RESERVED&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">;&lt;/span>

 &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">compareAndSet&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">expectState&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">newState&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="kt">void&lt;/span> &lt;span class="nf">setState&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">newState&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="kt">int&lt;/span> &lt;span class="nf">getState&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>接下来，看一下成员变量：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight">&lt;code data-lang="java">&lt;span class="c1">// 存放共享元素&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="nc">CopyOnWriteArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="no">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sharedList&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">weakThreadLocals&lt;/span>&lt;span class="o">;&lt;/span>

&lt;span class="c1">// 在 ThreadLocal 缓存线程本地元素，避免线程争用&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="nc">ThreadLocal&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nc">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nc">Object&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">threadList&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="nc">IBagStateListener&lt;/span> &lt;span class="n">listener&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="nc">AtomicInteger&lt;/span> &lt;span class="n">waiters&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">volatile&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">closed&lt;/span>&lt;span class="o">;&lt;/span>

&lt;span class="c1">// 接力队列&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="nc">SynchronousQueue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="no">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">handoffQueue&lt;/span>&lt;span class="o">;&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在 &lt;code>ConcurrentBag&lt;/code> 开头的 JavaDoc 中就做了明确说明：&lt;/p>
&lt;/div>
&lt;div class="sidebarblock">
&lt;div class="content">
&lt;div class="paragraph">
&lt;p>Note that items that are &amp;#34;borrowed&amp;#34; from the bag are not actually removed from any collection, so garbage collection will not occur even if the reference is abandoned. Thus care must be taken to &amp;#34;requite&amp;#34; borrowed objects otherwise a memory leak will result. Only the &amp;#34;remove&amp;#34; method can completely remove an object from the bag.&lt;/p>
&lt;/div></description></item><item><title>推荐几本 Java 并发编程的书</title><link>https://www.diguage.com/post/java-concurrent-books/</link><pubDate>Wed, 25 Mar 2020 16:32:12 +0800</pubDate><guid>https://www.diguage.com/post/java-concurrent-books/</guid><description>&lt;div class="paragraph">
&lt;p>最近，D瓜哥的一个小伙伴向我抱怨，Java 并发是个大坑，问我怎么看？我回答，当然是用眼睛看啊…&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>D瓜哥觉得，想学好 Java 并发，最重要的还是啃书。幸运的是，Java 中还是有不少关于并发的优秀书籍可以看。正好利用这个机会，把看过的、个人认为还不错的书推荐一波。没有看过的就不多言了。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_java并发编程实战">Java并发编程实战&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>如果只选一本书来深入研究并发，那肯定是这本书。&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/java-concurrent-books/java-concurrency-in-practice.jpg" alt="java concurrency in practice" width="60%"/>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>&lt;a href="https://book.douban.com/subject/10484692/" target="_blank" rel="noopener">Java并发编程实战 (豆瓣)&lt;/a> — 这本书是必看的。JDK 中 JUC 就是这本书的作者们写的。虽然书名含有 &lt;code>Java&lt;/code> 一次，但是，里面更多是原理性的东西，各种语言都适用。只是例子少了一些。这本书需要多读几遍。（据说翻译不行，推荐看英文版）&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>放个英文版图片镇楼：&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/java-concurrent-books/java-concurrency-in-practice-en.jpg" alt="java concurrency in practice en" width="60%"/>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_java并发编程的艺术">Java并发编程的艺术&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/java-concurrent-books/art-of-java-concurrency-programming.jpg" alt="art of java concurrency programming" width="60%"/>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>&lt;a href="https://book.douban.com/subject/26591326/" target="_blank" rel="noopener">Java并发编程的艺术 (豆瓣)&lt;/a> — 这本书也不错，讲了很多源码方面的内容，非常棒。另外，在讲解 Double Lock 方面的知识时，涉及了很多 Java Memory Model 方面的知识，可以先看看 &lt;a href="https://book.douban.com/subject/34907497/" target="_blank" rel="noopener">深入理解Java虚拟机（第3版）(豆瓣)&lt;/a> 最后两章的内容，来提前补充一下这么方面的知识。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_实战java高并发程序设计">实战Java高并发程序设计&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/java-concurrent-books/java-concurrency-in-action.jpg" alt="java concurrency in action" width="60%"/>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>&lt;a href="https://book.douban.com/subject/30358019/" target="_blank" rel="noopener">实战Java高并发程序设计（第2版） (豆瓣)&lt;/a> — 这本书也不错，针对 Java 8 写的，Java 8 中的很多新知识都有涉猎，例子也很全面。广度和深度，得到了兼顾，非常棒。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_java编程思想">Java编程思想&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/java-concurrent-books/thinking-in-java.jpg" alt="thinking in java" width="60%"/>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>&lt;a href="https://book.douban.com/subject/2130190/" target="_blank" rel="noopener">Java编程思想（第4版）(豆瓣)&lt;/a> — 虽然这本书已经出来十余年了，但是依然经典。第 21 章 并发，用大量的例子和陈述来介绍并发。非常棒。美中不足，是针对 Java 5 编写的，现在已经 Java 8 了。不过，作者又出了一本书，可以理解成升级版。&lt;/p>
&lt;/div></description></item><item><title>只要一部计算机，就可以创造出无限的世界</title><link>https://www.diguage.com/post/computer-create-world/</link><pubDate>Tue, 21 Apr 2009 00:00:00 +0800</pubDate><guid>https://www.diguage.com/post/computer-create-world/</guid><description>&lt;div class="paragraph">
&lt;p>曾经写给学弟学妹的一封信。我觉得还行，发出来，希望对刚学计算机专业的朋友有所帮助。当然，如果哪位朋友有更好的想法，也请留言，大家讨论讨论。原文如下：&lt;/p>
&lt;/div>
&lt;div class="sidebarblock">
&lt;div class="content">
&lt;div class="title">致师弟师妹的一封信&lt;/div>
&lt;div class="paragraph">
&lt;p>各位朋友：&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>大家好！&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>从本周开始，我必须专心为我的前程奋斗了。很可惜不能和大家一起学习了。这封信就算是我和大家的一个告别吧。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>首先，感谢史老师给我提供这个和大家一起学习和交流的机会，让我和大家一起度过了一段特殊而愉快的时光。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>其次，我应该感谢大家。由于本人水平有限，也许我没能让大家从我这里学到太多知识，但是大家却让我学会了很多东西，锻炼了我很多方面的能力。单凭这一点，我就应该感谢大家。同时，很多人把我当朋友，更使我感激不尽。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>再次，在这短暂而又宝贵的大学时光里，大家走的路应该和我的基本一样。我以一个过来人的身份，和大家分享一下我的学习经验吧，希望可以让大家少走甚至不走弯路。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>先说一点我们所学科目的情况吧。&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>Linux：一定要动手敲指令。在我们一年半的学习时光里，我认为Linux是我们所学的所有实践性学科里面最简单的一科了！只要把指令记好用熟就行了！另外，指令不需要背，用多了自然就记住了。（相信95%的同学都知道cd是什么意思吧！为什么呢？因为用它的次数多！）多提一点，一定要多尝试！&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Java或者C#或者PHP（由于个人比较喜欢Java，所以，一下描述Java的地方，你可以同样换成C#或在PHP等）：这是我们大家必须要下苦功夫学好的课！而且一定一定要学精！它们在我们的课程体系结构中的作用，就像是地基对于这个房子的作用！根基不好，房子很难建高的！即使建好也是豆腐渣工程。毕竟“空中楼阁”只存在于我们的想象中。它们是学习JSP、ASP.NET、J2EE、“游戏开发”、网页开发等等的基础，Java或者C#或者PHP学不会，这些课很难学好！（我这里有Java的教学视频，感兴趣的同学可以来我寝室拷贝。也可以上网下载：http://www.verycd.com/topics/93279/（请下载J2SE的））&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据库：重点是关系模型、 SQL语句以及后面的数据库设计。做动态网站的技术、做桌面程序，甚至做手机应用等，都会用到数据库！以后工作中数据模型设计、数据查询等都要求有比较扎实的数据库基础才行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据结构：我个人认为学习数据结构就是学习一种解决问题的思想。其实，类库已经实现了我们所学的所有的数据结构，到时会用就行了！&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="paragraph">
&lt;p>现在NBA正在进行季后赛，就用乔丹的一句话，作为所有学科的一个共同的建议送给大家：&lt;/p>
&lt;/div>
&lt;div class="quoteblock">
&lt;blockquote>
&lt;div class="paragraph">
&lt;p>I can accept failure, but I can’t accept not trying.&lt;/p>
&lt;/div>
&lt;/blockquote>
&lt;div class="attribution">
— Michael Jordan
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>其实学习就是不断尝试，不断总结，不断进取的一个过程。我可以用我的尝试告你一个正确的结果，但是自己尝试出来的结果印象更加深刻！&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>再说一点我的个人的学习感触吧。我个人认为，这些比我们大家在学校学到知识更为重要！知识马上就会过时，但是学习的方法却可以带领我们走的更远。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>&lt;strong>一、享受学习。&lt;/strong>如果我们把学习当成像玩游戏、听音乐一样的娱乐活动时，我想这会给我们一种全新的感觉。Study hard，have fun，make history！ By Jeff Bezos &amp;amp; Joy Lee （努力学习，乐在其中，并创造历史！—Jeff Bezos（Amazon.com的创办者兼CEO，Joy Lee就是我。(*&lt;sup>__&lt;/sup>*) 嘻嘻…… 这句话是我从他的一句话里改编过来的！））&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>其实，学计算机学科非常有趣！Linux里面，几行指令，我们就可以顺利的让鼠标在两个操作系统自由转换！Java里面几行，几十行代码就有一个漂亮的窗口！C#里面随便一个拖拽，也是一个不错的窗口！“只要一部计算机，就可以创造出无限的世界。”（出自蔡学镛《写程序，好好玩》，《Java夜未眠》里面的一篇，本书是本很搞笑的编程感触散文集，推荐看看。）加油吧！相信你行！&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>&lt;strong>二、坚持不懈。&lt;/strong>任何事情都不是可以一蹴而就的，都需要我们坚持！再送给大家一句话：失败只有一种，那就是半途而废！&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>&lt;strong>三、舍我其谁的豪迈和霸气。&lt;/strong>“Horse’s，Gosling能创造出来Java，我就不信我学不会！一个破Java，我还不放到眼里呢！！”，“别人能创造出来，我就不相信我学不会？！”不过，也要给大家提醒一句：“战略上，藐视敌人；战术上，重视敌人”！一定要下功夫学习才行！&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>&lt;strong>四、信心。&lt;/strong>一定要相信自己的能力！你是独一无二，无可替代的！信心能让你从一个更高的角度看待你的学习！能给你一种驾驭知识的成就感！这种感觉能让你从学习中找到乐趣！&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>&lt;strong>五、行动！&lt;/strong>上面的大道理，我们大家都懂！但是，谁实际做到呢？伟大与平凡的区别也许就在于这一点吧。我以我自己的高中、大学对比来看，行动与否结果绝对是不一样的！只想不做，最多是个空想家！所以，大家一定要“坚持不懈的行动”！&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>最后，送给大家一句话：&lt;strong>你充满了潜能，但你的努力还远远不够！&lt;/strong>再次怀念我们共同的学习时光！&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>祝大家学有所成！&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>D瓜哥&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div></description></item></channel></rss>