<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>系统架构 on "地瓜哥"博客网</title><link>https://www.diguage.com/categories/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/</link><description>Recent content in 系统架构 on "地瓜哥"博客网</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 23 Jul 2025 21:36:25 +0800</lastBuildDate><atom:link href="https://www.diguage.com/categories/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/index.xml" rel="self" type="application/rss+xml"/><item><title>玩转 Kubernetes（一）：离线安装 Kubernetes 2</title><link>https://www.diguage.com/post/play-with-kubernetes-01-install-kubernetes-offline-2/</link><pubDate>Mon, 10 Feb 2025 21:46:32 +0800</pubDate><guid>https://www.diguage.com/post/play-with-kubernetes-01-install-kubernetes-offline-2/</guid><description>&lt;div class="paragraph">
&lt;p>在 &lt;a href="https://www.diguage.com/post/play-with-kubernetes-01-install-kubernetes-offline/" target="_blank" rel="noopener">玩转 Kubernetes（一）：离线安装 Kubernetes 1&lt;/a> 中，D瓜哥基于 Kubespray 进行魔改的脚本搭建起来容器镜像仓库。但是，每次都魔改着实麻烦，所以，探索 Kubespray 原生支持才是更为委托的长久之计。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>经过多次探索，终于，可以几乎无需魔改就可以利用 Kubespray 原生支持进行 Kubernetes 的离线安装。&lt;/p>
&lt;/div>
&lt;div class="admonitionblock tip">
&lt;table>
&lt;tbody>&lt;tr>
&lt;td class="icon">
&lt;i class="fa icon-tip" title="Tip">&lt;/i>
&lt;/td>
&lt;td class="content">
以下是在 Mac 上的操作，在 Linux 等系统上操作类似。
&lt;/td>
&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_按照_python_依赖">按照 Python 依赖&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>在 Mac 的虚拟机离线安装 Kubernetes，使用 Mac 当做容器镜像服务器和二进制安装文件下载服务器是一个非常好的选择。为此，需要在完成一些基本的操作。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>由于运行 Kubespray，需要一个 Python 环境以及相关依赖，所以，就需要先安装相关依赖。&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">&lt;span class="c"># 配置 Python 镜像&lt;/span>
pip config &lt;span class="nb">set &lt;/span>global.index-url https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple

&lt;span class="c"># 进入 Kubespray 的上层目录&lt;/span>
&lt;span class="nb">cd&lt;/span> /PATH/TO/kubespray/..

&lt;span class="c"># 按照 Python 相关依赖&lt;/span>
&lt;span class="nv">VENVDIR&lt;/span>&lt;span class="o">=&lt;/span>kubespray-venv
&lt;span class="nv">KUBESPRAYDIR&lt;/span>&lt;span class="o">=&lt;/span>kubespray
python3 &lt;span class="nt">-m&lt;/span> venv &lt;span class="nv">$VENVDIR&lt;/span>
&lt;span class="nb">source&lt;/span> &lt;span class="nv">$VENVDIR&lt;/span>/bin/activate
&lt;span class="nb">cd&lt;/span> &lt;span class="nv">$KUBESPRAYDIR&lt;/span>
pip &lt;span class="nb">install&lt;/span> &lt;span class="nt">-U&lt;/span> &lt;span class="nt">-r&lt;/span> requirements.txt&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_生成镜像列表及二进制文件列表">生成镜像列表及二进制文件列表&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>安装完相关依赖，就需要生成相关文件列表：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">&lt;span class="c"># 生成镜像列表以及相关二进制文件列表&lt;/span>
&lt;span class="nb">cd&lt;/span> /PATH/TO/kubespray/contrib/offline

./generate_list.sh&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="admonitionblock tip">
&lt;table>
&lt;tbody>&lt;tr>
&lt;td class="icon">
&lt;i class="fa icon-tip" title="Tip">&lt;/i>
&lt;/td>
&lt;td class="content">
注意：大多数情况下，我们的安装目标是 Linux。所以，建议这步操作在 Linux 上完成，这样得到的下载文件列表是 Linux 格式的。在 Mac 上完成，那么部分文件的格式就是 Mac 的，不能用于 Linux 的安装。
&lt;/td>
&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;/div></description></item><item><title>玩转 Kubernetes（一）：离线安装 Kubernetes 1</title><link>https://www.diguage.com/post/play-with-kubernetes-01-install-kubernetes-offline/</link><pubDate>Tue, 14 Jan 2025 16:13:19 +0800</pubDate><guid>https://www.diguage.com/post/play-with-kubernetes-01-install-kubernetes-offline/</guid><description>&lt;div class="paragraph">
&lt;p>在 &lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-3/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（三）：链路追踪&lt;/a> 等几篇文章中，D瓜哥分享了如何使用 Docker Compose 在本地搭建起来一套应用可观测性环境。感觉还不够好玩，毕竟正在在企业中，Kubernetes 已经是绝对的主流。要玩就玩最具挑战性的东西，玩最符合企业所需的技能和工具。所以，打算将上面那套简易玩具，按照企业级的要求，搬到 Kubernetes 上去。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>如果想玩 Kubernetes，首先面临的一个问题就是 Kubernetes 集群的搭建。本来是一个非常简单的事情，但是由于众所周知的原因，变得非常具有挑战性。经过各种探索和多次试验，发现一种“离线”安装方式，感觉是一个不错的方式。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>本方法是基于 &lt;a href="https://kubespray.io/#/" target="_blank" rel="noopener">Kubespray&lt;/a> 的一种安装办法，Kubespray 是由 Kubernetes SIG 小组来负责维护的一整套安装方式。既可以支持在裸机环境上安装，也支持云上环境安装。而且，只需要简单几行可以复制粘贴的命令，即可完成安装工作。非常适合入门玩耍使用。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>本安装方法所需的软件，D瓜哥都已经上传到 GitHub，如果需要下载，请移步： &lt;a href="https://github.com/diguage/k8s-packages/releases/tag/2.26.0" target="_blank" rel="noopener">Kubespray-2.26.0 安装包大全&lt;/a>。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_搭建服务器集群">搭建服务器集群&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>这里推荐使用 &lt;a href="https://www.vagrantup.com/" target="_blank" rel="noopener">Vagrant&lt;/a> 搭建集群。搭配 &lt;a href="https://www.virtualbox.org/" target="_blank" rel="noopener">VirtualBox&lt;/a>，只需要一个配置文件，就可以轻轻松松搭建一个 Linux 服务器集群。搭建集群的配置文件 &lt;code>Vagrantfile&lt;/code> 如下：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="ruby">&lt;span class="c1"># -*- mode: ruby -*-&lt;/span>
&lt;span class="c1"># vi: set ft=ruby :&lt;/span>
&lt;span class="c1"># @author D瓜哥 · &lt;a href="https://www.diguage.com/" target="_blank">https://www.diguage.com/&lt;/a>&lt;/span>

&lt;span class="c1"># All Vagrant configuration is done below. The &amp;#34;2&amp;#34; in Vagrant.configure&lt;/span>
&lt;span class="c1"># configures the configuration version (we support older styles for&lt;/span>
&lt;span class="c1"># backwards compatibility). Please don&amp;#39;t change it unless you know what&lt;/span>
&lt;span class="c1"># you&amp;#39;re doing.&lt;/span>

&lt;span class="no">Vagrant&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">configure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="o">|&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="o">|&lt;/span>
 &lt;span class="c1"># The most common configuration options are documented and commented below.&lt;/span>
 &lt;span class="c1"># For a complete reference, please see the online documentation at&lt;/span>
 &lt;span class="c1"># &lt;a href="https://docs.vagrantup.com" target="_blank">https://docs.vagrantup.com&lt;/a>&lt;/span>

 &lt;span class="c1"># 三节点集群&lt;/span>
 &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nf">each&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="o">|&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">|&lt;/span>
 &lt;span class="n">config&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">define&lt;/span> &lt;span class="s2">&amp;#34;node&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="o">|&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="o">|&lt;/span>

 &lt;span class="c1"># Every Vagrant development environment requires a box. You can search for&lt;/span>
 &lt;span class="c1"># boxes at &lt;a href="https://vagrantcloud.com/search" target="_blank">https://vagrantcloud.com/search&lt;/a>&lt;/span>
 &lt;span class="c1"># &lt;a href="https://portal.cloud.hashicorp.com/vagrant/discover/bento/ubuntu-24.04" target="_blank">https://portal.cloud.hashicorp.com/vagrant/discover/bento/ubuntu-24.04&lt;/a>&lt;/span>
 &lt;span class="c1"># &lt;a href="https://portal.cloud.hashicorp.com/vagrant/discover/alvistack/ubuntu-24.04" target="_blank">https://portal.cloud.hashicorp.com/vagrant/discover/alvistack/ubuntu-24.04&lt;/a>&lt;/span>
 &lt;span class="n">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">box&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;alvistack/ubuntu-24.04&amp;#34;&lt;/span>
 &lt;span class="n">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">box_version&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;20250210.0.0&amp;#34;&lt;/span>

 &lt;span class="c1"># 设置虚拟机的主机名&lt;/span>
 &lt;span class="n">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">hostname&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;node&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>

 &lt;span class="n">config&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">boot_timeout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">600&lt;/span>

 &lt;span class="c1"># Disable automatic box update checking. If you disable this, then&lt;/span>
 &lt;span class="c1"># boxes will only be checked for updates when the user runs&lt;/span>
 &lt;span class="c1"># `vagrant box outdated`. This is not recommended.&lt;/span>
 &lt;span class="c1"># config.vm.box_check_update = false&lt;/span>

 &lt;span class="c1"># Create a forwarded port mapping which allows access to a specific port&lt;/span>
 &lt;span class="c1"># within the machine from a port on the host machine. In the example below,&lt;/span>
 &lt;span class="c1"># accessing &amp;#34;localhost:8080&amp;#34; will access port 80 on the guest machine.&lt;/span>
 &lt;span class="c1"># NOTE: This will enable public access to the opened port&lt;/span>
 &lt;span class="c1"># config.vm.network &amp;#34;forwarded_port&amp;#34;, guest: 80, host: 8080&lt;/span>

 &lt;span class="c1"># Create a forwarded port mapping which allows access to a specific port&lt;/span>
 &lt;span class="c1"># within the machine from a port on the host machine and only allow access&lt;/span>
 &lt;span class="c1"># via 127.0.0.1 to disable public access&lt;/span>
 &lt;span class="c1"># config.vm.network &amp;#34;forwarded_port&amp;#34;, guest: 80, host: 8080, host_ip: &amp;#34;127.0.0.1&amp;#34;&lt;/span>

 &lt;span class="c1"># Create a private network, which allows host-only access to the machine&lt;/span>
 &lt;span class="c1"># using a specific IP.&lt;/span>
 &lt;span class="c1"># 设置虚拟机的IP&lt;/span>
 &lt;span class="n">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">network&lt;/span> &lt;span class="s2">&amp;#34;private_network&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">ip: &lt;/span>&lt;span class="s2">&amp;#34;10.0.2.&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">auto_config: &lt;/span>&lt;span class="kp">true&lt;/span>

 &lt;span class="c1"># Create a public network, which generally matched to bridged network.&lt;/span>
 &lt;span class="c1"># Bridged networks make the machine appear as another physical device on&lt;/span>
 &lt;span class="c1"># your network.&lt;/span>
 &lt;span class="c1"># config.vm.network &amp;#34;public_network&amp;#34;&lt;/span>

 &lt;span class="c1"># Share an additional folder to the guest VM. The first argument is&lt;/span>
 &lt;span class="c1"># the path on the host to the actual folder. The second argument is&lt;/span>
 &lt;span class="c1"># the path on the guest to mount the folder. And the optional third&lt;/span>
 &lt;span class="c1"># argument is a set of non-required options.&lt;/span>
 &lt;span class="c1"># 设置主机与虚拟机的共享目录，根据需要开启&lt;/span>
 &lt;span class="n">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">synced_folder&lt;/span> &lt;span class="s2">&amp;#34;/path/to/&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;/data&amp;#34;&lt;/span>


 &lt;span class="c1"># Disable the default share of the current code directory. Doing this&lt;/span>
 &lt;span class="c1"># provides improved isolation between the vagrant box and your host&lt;/span>
 &lt;span class="c1"># by making sure your Vagrantfile isn&amp;#39;t accessible to the vagrant box.&lt;/span>
 &lt;span class="c1"># If you use this you may want to enable additional shared subfolders as&lt;/span>
 &lt;span class="c1"># shown above.&lt;/span>
 &lt;span class="c1"># config.vm.synced_folder &amp;#34;.&amp;#34;, &amp;#34;/vagrant&amp;#34;, disabled: true&lt;/span>

 &lt;span class="c1"># Provider-specific configuration so you can fine-tune various&lt;/span>
 &lt;span class="c1"># backing providers for Vagrant. These expose provider-specific options.&lt;/span>
 &lt;span class="c1"># Example for VirtualBox:&lt;/span>

 &lt;span class="n">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">provider&lt;/span> &lt;span class="s2">&amp;#34;virtualbox&amp;#34;&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="o">|&lt;/span>&lt;span class="n">vb&lt;/span>&lt;span class="o">|&lt;/span>
 &lt;span class="c1"># 设置虚拟机的名称&lt;/span>
 &lt;span class="c1"># vb.name = &amp;#34;node#{i}&amp;#34;&lt;/span>

 &lt;span class="c1"># if node.vm.hostname == &amp;#34;node1&amp;#34;&lt;/span>
 &lt;span class="c1"># # Display the VirtualBox GUI when booting the machine&lt;/span>
 &lt;span class="c1"># vb.gui = true&lt;/span>
 &lt;span class="c1"># end&lt;/span>

 &lt;span class="c1"># Customize the amount of memory on the VM:&lt;/span>
 &lt;span class="n">vb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">memory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;6144&amp;#34;&lt;/span>

 &lt;span class="c1"># 设置虚拟机的CPU个数&lt;/span>
 &lt;span class="n">vb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">cpus&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>
 &lt;span class="k">end&lt;/span>

 &lt;span class="c1"># View the documentation for the provider you are using for more&lt;/span>
 &lt;span class="c1"># information on available options.&lt;/span>

 &lt;span class="c1"># Enable provisioning with a shell script. Additional provisioners such as&lt;/span>
 &lt;span class="c1"># Ansible, Chef, Docker, Puppet and Salt are also available. Please see the&lt;/span>
 &lt;span class="c1"># documentation for more information about their specific syntax and use.&lt;/span>
 &lt;span class="c1"># config.vm.provision &amp;#34;shell&amp;#34;, inline: &amp;lt;&amp;lt;-SHELL&lt;/span>
 &lt;span class="c1"># sudo yum makecache --refresh&lt;/span>
 &lt;span class="c1"># sudo yum install -y tcpdump&lt;/span>
 &lt;span class="c1"># sudo yum install -y nc&lt;/span>
 &lt;span class="c1"># sudo yum install -y net-tools&lt;/span>
 &lt;span class="c1"># SHELL&lt;/span>
 &lt;span class="k">end&lt;/span>
 &lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>killercoda CKA：Troubleshooting - 3</title><link>https://www.diguage.com/post/killercoda-cka-troubleshooting-3/</link><pubDate>Thu, 26 Dec 2024 19:54:28 +0800</pubDate><guid>https://www.diguage.com/post/killercoda-cka-troubleshooting-3/</guid><description>&lt;div class="sect1">
&lt;h2 id="_troubleshooting_service_account_role_role_binding_issue">1. Troubleshooting - Service account, role, role binding Issue&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>&lt;a href="https://killercoda.com/sachin/course/CKA/sa-cr-crb-issue" target="_blank" rel="noopener">Troubleshooting - Service account, role, role binding Issue&lt;/a>&lt;/p>
&lt;/div>
&lt;div class="sidebarblock">
&lt;div class="content">
&lt;div class="paragraph">
&lt;p>You have a service account named &lt;code>dev-sa&lt;/code>, a Role named &lt;code>dev-role-cka&lt;/code>, and a RoleBinding named &lt;code>dev-role-binding-cka&lt;/code>. we are trying to &lt;code>create&lt;/code> &lt;code>list&lt;/code> and &lt;code>get&lt;/code> the &lt;code>pods&lt;/code> and &lt;code>services&lt;/code>. However, using &lt;code>dev-sa&lt;/code> service account is not able to perform these operations. fix this issue.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">&lt;span class="c"># @author D瓜哥 · &lt;a href="https://www.diguage.com" target="_blank">https://www.diguage.com&lt;/a>&lt;/span>

&lt;span class="nv">$ &lt;/span>kubectl get serviceaccounts dev-sa &lt;span class="nt">-o&lt;/span> yaml
apiVersion: v1
kind: ServiceAccount
metadata:
 creationTimestamp: &lt;span class="s2">&amp;#34;2025-01-22T09:48:06Z&amp;#34;&lt;/span>
 name: dev-sa
 namespace: default
 resourceVersion: &lt;span class="s2">&amp;#34;2270&amp;#34;&lt;/span>
 uid: 48b68f34-8c19-4477-9631-4f368f6ecc66

&lt;span class="nv">$ &lt;/span>kubectl get role dev-role-cka
NAME CREATED AT
dev-role-cka 2025-01-22T09:48:06Z

&lt;span class="nv">$ &lt;/span>kubectl get role dev-role-cka &lt;span class="nt">-o&lt;/span> yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
 creationTimestamp: &lt;span class="s2">&amp;#34;2025-01-22T09:48:06Z&amp;#34;&lt;/span>
 name: dev-role-cka
 namespace: default
 resourceVersion: &lt;span class="s2">&amp;#34;2271&amp;#34;&lt;/span>
 uid: 7a011481-8edd-4417-a1b8-8d15290d3e9f
rules:
- apiGroups:
 - &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
 resources:
 - secrets
 verbs:
 - get

&lt;span class="nv">$ &lt;/span>kubectl get rolebindings dev-role-binding-cka &lt;span class="nt">-o&lt;/span> yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
 creationTimestamp: &lt;span class="s2">&amp;#34;2025-01-22T09:48:07Z&amp;#34;&lt;/span>
 name: dev-role-binding-cka
 namespace: default
 resourceVersion: &lt;span class="s2">&amp;#34;2272&amp;#34;&lt;/span>
 uid: 888af489-86b6-4d38-a723-a8ff13656d2b
roleRef:
 apiGroup: rbac.authorization.k8s.io
 kind: Role
 name: dev-role-cka
subjects:
- kind: ServiceAccount
 name: dev-sa
 namespace: default

&lt;span class="c"># 将 Role 删掉，重建即可&lt;/span>
&lt;span class="nv">$ &lt;/span>kubectl delete role dev-role-cka &lt;span class="nt">--force&lt;/span> &lt;span class="nt">--grace-period&lt;/span> 0
Warning: Immediate deletion does not &lt;span class="nb">wait &lt;/span>&lt;span class="k">for &lt;/span>confirmation that the running resource has been terminated. The resource may &lt;span class="k">continue &lt;/span>to run on the cluster indefinitely.
role.rbac.authorization.k8s.io &lt;span class="s2">&amp;#34;dev-role-cka&amp;#34;&lt;/span> force deleted

&lt;span class="nv">$ &lt;/span>kubectl create role dev-role-cka &lt;span class="nt">--resource&lt;/span>&lt;span class="o">=&lt;/span>pods,services &lt;span class="nt">--verb&lt;/span>&lt;span class="o">=&lt;/span>create,list,get
role.rbac.authorization.k8s.io/dev-role-cka created

&lt;span class="nv">$ &lt;/span>kubectl get role dev-role-cka &lt;span class="nt">-o&lt;/span> yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
 creationTimestamp: &lt;span class="s2">&amp;#34;2025-01-22T09:49:46Z&amp;#34;&lt;/span>
 name: dev-role-cka
 namespace: default
 resourceVersion: &lt;span class="s2">&amp;#34;2414&amp;#34;&lt;/span>
 uid: b3d7fc62-f029-4f4b-88a5-99ee9840af05
rules:
- apiGroups:
 - &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
 resources:
 - pods
 - services
 verbs:
 - create
 - list
 - get&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>killercoda CKA：Troubleshooting - 2</title><link>https://www.diguage.com/post/killercoda-cka-troubleshooting-2/</link><pubDate>Tue, 24 Dec 2024 19:54:28 +0800</pubDate><guid>https://www.diguage.com/post/killercoda-cka-troubleshooting-2/</guid><description>&lt;div class="sect1">
&lt;h2 id="_troubleshooting_persistent_volume_persistent_volume_claim_issue">1. Troubleshooting - Persistent Volume, Persistent Volume Claim - Issue&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>&lt;a href="https://killercoda.com/sachin/course/CKA/pv-pvc-issue" target="_blank" rel="noopener">Troubleshooting - Persistent Volume, Persistent Volume Claim - Issue&lt;/a>&lt;/p>
&lt;/div>
&lt;div class="sidebarblock">
&lt;div class="content">
&lt;div class="paragraph">
&lt;p>&lt;code>my-pvc&lt;/code> Persistent Volume Claim is stuck in a Pending state, fix this issue, make sure it is in Bound state&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">&lt;span class="c"># @author D瓜哥 · &lt;a href="https://www.diguage.com" target="_blank">https://www.diguage.com&lt;/a>&lt;/span>

&lt;span class="nv">$ &lt;/span>kubectl get pvc my-pvc &lt;span class="nt">-o&lt;/span> wide
NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS VOLUMEATTRIBUTESCLASS AGE VOLUMEMODE
my-pvc Pending standard &amp;lt;&lt;span class="nb">unset&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> 38s Filesystem

&lt;span class="nv">$ &lt;/span>kubectl get pv my-pv &lt;span class="nt">-o&lt;/span> wide
NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS VOLUMEATTRIBUTESCLASS REASON AGE VOLUMEMODE
my-pv 100Mi RWO Retain Available standard &amp;lt;&lt;span class="nb">unset&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> 51s Filesystem

&lt;span class="nv">$ &lt;/span>kubectl get pvc my-pvc &lt;span class="nt">-o&lt;/span> yaml | &lt;span class="nb">tee &lt;/span>pv.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
 annotations:
 kubectl.kubernetes.io/last-applied-configuration: |
 &lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;apiVersion&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;v1&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;kind&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;PersistentVolumeClaim&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;metadata&amp;#34;&lt;/span>:&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;annotations&amp;#34;&lt;/span>:&lt;span class="o">{}&lt;/span>,&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;my-pvc&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;namespace&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;default&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span>,&lt;span class="s2">&amp;#34;spec&amp;#34;&lt;/span>:&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;accessModes&amp;#34;&lt;/span>:[&lt;span class="s2">&amp;#34;ReadWriteMany&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span>,&lt;span class="s2">&amp;#34;resources&amp;#34;&lt;/span>:&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;requests&amp;#34;&lt;/span>:&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;storage&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;150Mi&amp;#34;&lt;/span>&lt;span class="o">}}&lt;/span>,&lt;span class="s2">&amp;#34;storageClassName&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;standard&amp;#34;&lt;/span>&lt;span class="o">}}&lt;/span>
 creationTimestamp: &lt;span class="s2">&amp;#34;2025-01-20T13:08:41Z&amp;#34;&lt;/span>
 finalizers:
 - kubernetes.io/pvc-protection
 name: my-pvc
 namespace: default
 resourceVersion: &lt;span class="s2">&amp;#34;2002&amp;#34;&lt;/span>
 uid: a4c6c044-4118-47a4-97b9-ceb69fac3bc2
spec:
 accessModes:
 - ReadWriteMany
 resources:
 requests:
 storage: 150Mi
 storageClassName: standard
 volumeMode: Filesystem
status:
 phase: Pending

&lt;span class="nv">$ &lt;/span>kubectl get pv my-pv &lt;span class="nt">-o&lt;/span> yaml
apiVersion: v1
kind: PersistentVolume
metadata:
 annotations:
 kubectl.kubernetes.io/last-applied-configuration: |
 &lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;apiVersion&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;v1&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;kind&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;PersistentVolume&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;metadata&amp;#34;&lt;/span>:&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;annotations&amp;#34;&lt;/span>:&lt;span class="o">{}&lt;/span>,&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;my-pv&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span>,&lt;span class="s2">&amp;#34;spec&amp;#34;&lt;/span>:&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;accessModes&amp;#34;&lt;/span>:[&lt;span class="s2">&amp;#34;ReadWriteOnce&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span>,&lt;span class="s2">&amp;#34;capacity&amp;#34;&lt;/span>:&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;storage&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;100Mi&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span>,&lt;span class="s2">&amp;#34;hostPath&amp;#34;&lt;/span>:&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;path&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;/mnt/data&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span>,&lt;span class="s2">&amp;#34;persistentVolumeReclaimPolicy&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;Retain&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;storageClassName&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;standard&amp;#34;&lt;/span>&lt;span class="o">}}&lt;/span>
 creationTimestamp: &lt;span class="s2">&amp;#34;2025-01-20T13:08:41Z&amp;#34;&lt;/span>
 finalizers:
 - kubernetes.io/pv-protection
 name: my-pv
 resourceVersion: &lt;span class="s2">&amp;#34;2003&amp;#34;&lt;/span>
 uid: 85a371c4-0931-4b57-87ea-fc1fceb674c1
spec:
 accessModes:
 - ReadWriteOnce
 capacity:
 storage: 100Mi
 hostPath:
 path: /mnt/data
 &lt;span class="nb">type&lt;/span>: &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
 persistentVolumeReclaimPolicy: Retain
 storageClassName: standard
 volumeMode: Filesystem

&lt;span class="nv">$ &lt;/span>vim pv.yaml
&lt;span class="c"># 两个问题：&lt;/span>
&lt;span class="c"># 1、 PVC 和 PV 的 accessModes 不一致，改为 ReadWriteOnce即可&lt;/span>
&lt;span class="c"># 2、 PVC 的存储是 150Mi，而 PV 只有 100Mi，也改为 100Mi 即可。&lt;/span>

&lt;span class="nv">$ &lt;/span>kubectl delete &lt;span class="nt">-f&lt;/span> pv.yaml &lt;span class="nt">--force&lt;/span> &lt;span class="nt">--grace-period&lt;/span> 0
Warning: Immediate deletion does not &lt;span class="nb">wait &lt;/span>&lt;span class="k">for &lt;/span>confirmation that the running resource has been terminated. The resource may &lt;span class="k">continue &lt;/span>to run on the cluster indefinitely.
persistentvolumeclaim &lt;span class="s2">&amp;#34;my-pvc&amp;#34;&lt;/span> force deleted

&lt;span class="nv">$ &lt;/span>kubectl apply &lt;span class="nt">-f&lt;/span> pv.yaml
persistentvolumeclaim/my-pvc created

&lt;span class="nv">$ &lt;/span>kubectl get pvc my-pvc &lt;span class="nt">-o&lt;/span> wide
NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS VOLUMEATTRIBUTESCLASS AGE VOLUMEMODE
my-pvc Bound my-pv 100Mi RWO standard &amp;lt;&lt;span class="nb">unset&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> 10s Filesystem&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>killercoda CKA：Troubleshooting - 1</title><link>https://www.diguage.com/post/killercoda-cka-troubleshooting-1/</link><pubDate>Sun, 22 Dec 2024 19:54:28 +0800</pubDate><guid>https://www.diguage.com/post/killercoda-cka-troubleshooting-1/</guid><description>&lt;div class="sect1">
&lt;h2 id="_troubleshooting_pod_issue">1. Troubleshooting - Pod Issue&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>&lt;a href="https://killercoda.com/sachin/course/CKA/pod-issue" target="_blank" rel="noopener">Troubleshooting - Pod Issue&lt;/a>&lt;/p>
&lt;/div>
&lt;div class="sidebarblock">
&lt;div class="content">
&lt;div class="paragraph">
&lt;p>&lt;code>hello-kubernetes&lt;/code> pod not running, fix that issue&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">&lt;span class="c"># @author D瓜哥 · &lt;a href="https://www.diguage.com" target="_blank">https://www.diguage.com&lt;/a>&lt;/span>

&lt;span class="nv">$ &lt;/span>kubectl get pod
NAME READY STATUS RESTARTS AGE
hello-kubernetes 0/1 RunContainerError 2 &lt;span class="o">(&lt;/span>6s ago&lt;span class="o">)&lt;/span> 29s

&lt;span class="nv">$ &lt;/span>kubectl describe pod hello-kubernetes
Name: hello-kubernetes
Namespace: default
Priority: 0
Service Account: default
Node: node01/172.30.2.2
Start Time: Mon, 20 Jan 2025 07:21:57 +0000
Labels: &amp;lt;none&amp;gt;
Annotations: cni.projectcalico.org/containerID: 2e010161283b56bfd70d604c31ece3dc3189882f1e24c2ea57647dbaec3b2bdb
 cni.projectcalico.org/podIP: 192.168.1.4/32
 cni.projectcalico.org/podIPs: 192.168.1.4/32
Status: Running
IP: 192.168.1.4
IPs:
 IP: 192.168.1.4
Containers:
 echo-container:
 Container ID: containerd://4f01851fcb908cd7bd1031a1726b8b75873d69fb246a5eebdd5c3dc003be7c19
 Image: redis
 Image ID: docker.io/library/redis@sha256:ca65ea36ae16e709b0f1c7534bc7e5b5ac2e5bb3c97236e4fec00e3625eb678d
 Port: &amp;lt;none&amp;gt;
 Host Port: &amp;lt;none&amp;gt;
 Command:
 shell
 &lt;span class="nt">-c&lt;/span>
 &lt;span class="k">while &lt;/span>&lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do &lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;Hello Kubernetes&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nb">sleep &lt;/span>5&lt;span class="p">;&lt;/span> &lt;span class="k">done
 &lt;/span>State: Waiting
 Reason: CrashLoopBackOff
 Last State: Terminated
 Reason: StartError
 Message: failed to create containerd task: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: &lt;span class="nb">exec&lt;/span>: &lt;span class="s2">&amp;#34;shell&amp;#34;&lt;/span>: executable file not found &lt;span class="k">in&lt;/span> &lt;span class="nv">$PATH&lt;/span>: unknown
 Exit Code: 128
 Started: Thu, 01 Jan 1970 00:00:00 +0000
 Finished: Mon, 20 Jan 2025 07:22:20 +0000
 Ready: False
 Restart Count: 2
 Environment: &amp;lt;none&amp;gt;
 Mounts:
 /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-xk5qj &lt;span class="o">(&lt;/span>ro&lt;span class="o">)&lt;/span>
Conditions:
 Type Status
 PodReadyToStartContainers True
 Initialized True
 Ready False
 ContainersReady False
 PodScheduled True
Volumes:
 kube-api-access-xk5qj:
 Type: Projected &lt;span class="o">(&lt;/span>a volume that contains injected data from multiple sources&lt;span class="o">)&lt;/span>
 TokenExpirationSeconds: 3607
 ConfigMapName: kube-root-ca.crt
 ConfigMapOptional: &amp;lt;nil&amp;gt;
 DownwardAPI: &lt;span class="nb">true
&lt;/span>QoS Class: BestEffort
Node-Selectors: &amp;lt;none&amp;gt;
Tolerations: node.kubernetes.io/not-ready:NoExecute &lt;span class="nv">op&lt;/span>&lt;span class="o">=&lt;/span>Exists &lt;span class="k">for &lt;/span>300s
 node.kubernetes.io/unreachable:NoExecute &lt;span class="nv">op&lt;/span>&lt;span class="o">=&lt;/span>Exists &lt;span class="k">for &lt;/span>300s
Events:
 Type Reason Age From Message
 &lt;span class="nt">----&lt;/span> &lt;span class="nt">------&lt;/span> &lt;span class="nt">----&lt;/span> &lt;span class="nt">----&lt;/span> &lt;span class="nt">-------&lt;/span>
 Normal Scheduled 41s default-scheduler Successfully assigned default/hello-kubernetes to node01
 Normal Pulled 35s kubelet Successfully pulled image &lt;span class="s2">&amp;#34;redis&amp;#34;&lt;/span> &lt;span class="k">in &lt;/span>5.57s &lt;span class="o">(&lt;/span>5.57s including waiting&lt;span class="o">)&lt;/span>&lt;span class="nb">.&lt;/span> Image size: 45006722 bytes.
 Normal Pulled 33s kubelet Successfully pulled image &lt;span class="s2">&amp;#34;redis&amp;#34;&lt;/span> &lt;span class="k">in &lt;/span>422ms &lt;span class="o">(&lt;/span>422ms including waiting&lt;span class="o">)&lt;/span>&lt;span class="nb">.&lt;/span> Image size: 45006722 bytes.
 Normal Pulling 19s &lt;span class="o">(&lt;/span>x3 over 40s&lt;span class="o">)&lt;/span> kubelet Pulling image &lt;span class="s2">&amp;#34;redis&amp;#34;&lt;/span>
 Normal Created 18s &lt;span class="o">(&lt;/span>x3 over 35s&lt;span class="o">)&lt;/span> kubelet Created container echo-container
 Warning Failed 18s &lt;span class="o">(&lt;/span>x3 over 34s&lt;span class="o">)&lt;/span> kubelet Error: failed to create containerd task: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: &lt;span class="nb">exec&lt;/span>: &lt;span class="s2">&amp;#34;shell&amp;#34;&lt;/span>: executable file not found &lt;span class="k">in&lt;/span> &lt;span class="nv">$PATH&lt;/span>: unknown
 Normal Pulled 18s kubelet Successfully pulled image &lt;span class="s2">&amp;#34;redis&amp;#34;&lt;/span> &lt;span class="k">in &lt;/span>467ms &lt;span class="o">(&lt;/span>467ms including waiting&lt;span class="o">)&lt;/span>&lt;span class="nb">.&lt;/span> Image size: 45006722 bytes.
 Warning BackOff 6s &lt;span class="o">(&lt;/span>x4 over 32s&lt;span class="o">)&lt;/span> kubelet Back-off restarting failed container echo-container &lt;span class="k">in &lt;/span>pod hello-kubernetes_default&lt;span class="o">(&lt;/span>5a459cd4-866a-4e57-8d44-ae83156e1e0b&lt;span class="o">)&lt;/span>

&lt;span class="nv">$ &lt;/span>kubectl get pod hello-kubernetes &lt;span class="nt">-o&lt;/span> yaml | &lt;span class="nb">tee &lt;/span>pod.yaml
apiVersion: v1
kind: Pod
metadata:
 annotations:
 cni.projectcalico.org/containerID: 2e010161283b56bfd70d604c31ece3dc3189882f1e24c2ea57647dbaec3b2bdb
 cni.projectcalico.org/podIP: 192.168.1.4/32
 cni.projectcalico.org/podIPs: 192.168.1.4/32
 kubectl.kubernetes.io/last-applied-configuration: |
 &lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;apiVersion&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;v1&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;kind&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;Pod&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;metadata&amp;#34;&lt;/span>:&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;annotations&amp;#34;&lt;/span>:&lt;span class="o">{}&lt;/span>,&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;hello-kubernetes&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;namespace&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;default&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span>,&lt;span class="s2">&amp;#34;spec&amp;#34;&lt;/span>:&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;containers&amp;#34;&lt;/span>:[&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;command&amp;#34;&lt;/span>:[&lt;span class="s2">&amp;#34;shell&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;-c&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;while true; do echo &amp;#39;Hello Kubernetes&amp;#39;; sleep 5; done&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span>,&lt;span class="s2">&amp;#34;image&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;redis&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;echo-container&amp;#34;&lt;/span>&lt;span class="o">}]}}&lt;/span>
 creationTimestamp: &lt;span class="s2">&amp;#34;2025-01-20T07:21:57Z&amp;#34;&lt;/span>
 name: hello-kubernetes
 namespace: default
 resourceVersion: &lt;span class="s2">&amp;#34;2157&amp;#34;&lt;/span>
 uid: 5a459cd4-866a-4e57-8d44-ae83156e1e0b
spec:
 containers:
 - &lt;span class="nb">command&lt;/span>:
 - shell
 - &lt;span class="nt">-c&lt;/span>
 - &lt;span class="k">while &lt;/span>&lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do &lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;Hello Kubernetes&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nb">sleep &lt;/span>5&lt;span class="p">;&lt;/span> &lt;span class="k">done
 &lt;/span>image: redis
 imagePullPolicy: Always
 name: echo-container
 resources: &lt;span class="o">{}&lt;/span>
 terminationMessagePath: /dev/termination-log
 terminationMessagePolicy: File
 volumeMounts:
 - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
 name: kube-api-access-xk5qj
 readOnly: &lt;span class="nb">true
 &lt;/span>dnsPolicy: ClusterFirst
 enableServiceLinks: &lt;span class="nb">true
 &lt;/span>nodeName: node01
 preemptionPolicy: PreemptLowerPriority
 priority: 0
 restartPolicy: Always
 schedulerName: default-scheduler
 securityContext: &lt;span class="o">{}&lt;/span>
 serviceAccount: default
 serviceAccountName: default
 terminationGracePeriodSeconds: 30
 tolerations:
 - effect: NoExecute
 key: node.kubernetes.io/not-ready
 operator: Exists
 tolerationSeconds: 300
 - effect: NoExecute
 key: node.kubernetes.io/unreachable
 operator: Exists
 tolerationSeconds: 300
 volumes:
 - name: kube-api-access-xk5qj
 projected:
 defaultMode: 420
 sources:
 - serviceAccountToken:
 expirationSeconds: 3607
 path: token
 - configMap:
 items:
 - key: ca.crt
 path: ca.crt
 name: kube-root-ca.crt
 - downwardAPI:
 items:
 - fieldRef:
 apiVersion: v1
 fieldPath: metadata.namespace
 path: namespace
&lt;span class="c"># 省略了 status 字段&lt;/span>

&lt;span class="nv">$ &lt;/span>vim pod.yaml
&lt;span class="c"># 根据提示，没有 shell，将 shell 修改为 sh 即可。&lt;/span>

&lt;span class="nv">$ &lt;/span>kubectl replace &lt;span class="nt">-f&lt;/span> pod.yaml
Error from server &lt;span class="o">(&lt;/span>Conflict&lt;span class="o">)&lt;/span>: error when replacing &lt;span class="s2">&amp;#34;pod.yaml&amp;#34;&lt;/span>: Operation cannot be fulfilled on pods &lt;span class="s2">&amp;#34;hello-kubernetes&amp;#34;&lt;/span>: the object has been modified&lt;span class="p">;&lt;/span> please apply your changes to the latest version and try again

&lt;span class="c"># 不能替换，就直接删除，再重建&lt;/span>

&lt;span class="nv">$ &lt;/span>kubectl delete &lt;span class="nt">-f&lt;/span> pod.yaml &lt;span class="nt">--force&lt;/span> &lt;span class="nt">--grace-period&lt;/span> 0
Warning: Immediate deletion does not &lt;span class="nb">wait &lt;/span>&lt;span class="k">for &lt;/span>confirmation that the running resource has been terminated. The resource may &lt;span class="k">continue &lt;/span>to run on the cluster indefinitely.
pod &lt;span class="s2">&amp;#34;hello-kubernetes&amp;#34;&lt;/span> force deleted

&lt;span class="nv">$ &lt;/span>kubectl apply &lt;span class="nt">-f&lt;/span> pod.yaml
pod/hello-kubernetes created

&lt;span class="nv">$ &lt;/span>kubectl get pod
NAME READY STATUS RESTARTS AGE
hello-kubernetes 1/1 Running 0 5s&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>killercoda CKA：Workloads &amp; Scheduling</title><link>https://www.diguage.com/post/killercoda-cka-workloads-scheduling/</link><pubDate>Fri, 20 Dec 2024 19:54:28 +0800</pubDate><guid>https://www.diguage.com/post/killercoda-cka-workloads-scheduling/</guid><description>&lt;div class="sect1">
&lt;h2 id="_workloads_scheduling_pod">1. Workloads &amp;amp; Scheduling - Pod&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>&lt;a href="https://killercoda.com/sachin/course/CKA/pod" target="_blank" rel="noopener">Workloads &amp;amp; Scheduling - Pod&lt;/a>&lt;/p>
&lt;/div>
&lt;div class="sidebarblock">
&lt;div class="content">
&lt;div class="paragraph">
&lt;p>Fresher deployed a pod named &lt;code>my-pod&lt;/code>. However, while specifying the resource limits, they mistakenly given &lt;code>100Mi&lt;/code> storage limit instead of &lt;code>50Mi&lt;/code>&lt;/p>
&lt;/div>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>node doesn’t have sufficient resources, So change it to &lt;code>50Mi&lt;/code> only.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">&lt;span class="c"># @author D瓜哥 · &lt;a href="https://www.diguage.com" target="_blank">https://www.diguage.com&lt;/a>&lt;/span>

&lt;span class="nv">$ &lt;/span>kubectl get pod my-pod &lt;span class="nt">-o&lt;/span> yaml | &lt;span class="nb">tee &lt;/span>pod.yaml
apiVersion: v1
kind: Pod
metadata:
 annotations:
 cni.projectcalico.org/containerID: 8414bfefda21fa6ca74ef8d499c92a22ae6cc0dbb6d0bc4d82eb0129a795d75d
 cni.projectcalico.org/podIP: 192.168.1.4/32
 cni.projectcalico.org/podIPs: 192.168.1.4/32
 kubectl.kubernetes.io/last-applied-configuration: |
 &lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;apiVersion&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;v1&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;kind&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;Pod&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;metadata&amp;#34;&lt;/span>:&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;annotations&amp;#34;&lt;/span>:&lt;span class="o">{}&lt;/span>,&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;my-pod&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;namespace&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;default&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span>,&lt;span class="s2">&amp;#34;spec&amp;#34;&lt;/span>:&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;containers&amp;#34;&lt;/span>:[&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;image&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;nginx:latest&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;my-container&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;resources&amp;#34;&lt;/span>:&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;limits&amp;#34;&lt;/span>:&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;memory&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;100Mi&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span>,&lt;span class="s2">&amp;#34;requests&amp;#34;&lt;/span>:&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;memory&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;50Mi&amp;#34;&lt;/span>&lt;span class="o">}}}]}}&lt;/span>
 creationTimestamp: &lt;span class="s2">&amp;#34;2025-01-14T07:53:50Z&amp;#34;&lt;/span>
 name: my-pod
 namespace: default
 resourceVersion: &lt;span class="s2">&amp;#34;2026&amp;#34;&lt;/span>
 uid: fcf1e97e-cec0-45b0-b82d-766ad0c51823
spec:
 containers:
 - image: nginx:latest
 imagePullPolicy: Always
 name: my-container
 resources:
 limits:
 memory: 100Mi
 requests:
 memory: 50Mi
 terminationMessagePath: /dev/termination-log
 terminationMessagePolicy: File
 volumeMounts:
 - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
 name: kube-api-access-thchj
 readOnly: &lt;span class="nb">true
 &lt;/span>dnsPolicy: ClusterFirst
 enableServiceLinks: &lt;span class="nb">true
 &lt;/span>nodeName: node01
 preemptionPolicy: PreemptLowerPriority
 priority: 0
 restartPolicy: Always
 schedulerName: default-scheduler
 securityContext: &lt;span class="o">{}&lt;/span>
 serviceAccount: default
 serviceAccountName: default
 terminationGracePeriodSeconds: 30
 tolerations:
 - effect: NoExecute
 key: node.kubernetes.io/not-ready
 operator: Exists
 tolerationSeconds: 300
 - effect: NoExecute
 key: node.kubernetes.io/unreachable
 operator: Exists
 tolerationSeconds: 300
 volumes:
 - name: kube-api-access-thchj
 projected:
 defaultMode: 420
 sources:
 - serviceAccountToken:
 expirationSeconds: 3607
 path: token
 - configMap:
 items:
 - key: ca.crt
 path: ca.crt
 name: kube-root-ca.crt
 - downwardAPI:
 items:
 - fieldRef:
 apiVersion: v1
 fieldPath: metadata.namespace
 path: namespace
&lt;span class="c"># 省略没用的 status 字段&lt;/span>

&lt;span class="nv">$ &lt;/span>vim pod.yaml
&lt;span class="c"># 将 limit 中，100Mi 改为 50Mi&lt;/span>

&lt;span class="nv">$ &lt;/span>kubectl delete &lt;span class="nt">-f&lt;/span> pod.yaml &lt;span class="nt">--force&lt;/span> &lt;span class="nt">--grace-period&lt;/span> 0
Warning: Immediate deletion does not &lt;span class="nb">wait &lt;/span>&lt;span class="k">for &lt;/span>confirmation that the running resource has been terminated. The resource may &lt;span class="k">continue &lt;/span>to run on the cluster indefinitely.
pod &lt;span class="s2">&amp;#34;my-pod&amp;#34;&lt;/span> force deleted

&lt;span class="nv">$ &lt;/span>kubectl apply &lt;span class="nt">-f&lt;/span> pod.yaml
pod/my-pod created&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>killercoda CKA：Storage</title><link>https://www.diguage.com/post/killercoda-cka-storage/</link><pubDate>Thu, 19 Dec 2024 19:54:28 +0800</pubDate><guid>https://www.diguage.com/post/killercoda-cka-storage/</guid><description>&lt;div class="sect1">
&lt;h2 id="_storage_persistent_volume">1. Storage - Persistent Volume&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>&lt;a href="https://killercoda.com/sachin/course/CKA/pv" target="_blank" rel="noopener">Storage - Persistent Volume&lt;/a>&lt;/p>
&lt;/div>
&lt;div class="sidebarblock">
&lt;div class="content">
&lt;div class="paragraph">
&lt;p>Create a PersistentVolume (PV) named &lt;code>black-pv-cka&lt;/code> with the following specifications:&lt;/p>
&lt;/div>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>Volume Type: &lt;code>hostPath&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Path: &lt;code>/opt/black-pv-cka&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Capacity: &lt;code>50Mi&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">&lt;span class="c"># @author D瓜哥 · &lt;a href="https://www.diguage.com" target="_blank">https://www.diguage.com&lt;/a>&lt;/span>

&lt;span class="nv">$ &lt;/span>vim pv.yaml
&lt;span class="c"># 编写 YAML 文件&lt;/span>

&lt;span class="nv">$ &lt;/span>&lt;span class="nb">cat &lt;/span>pv.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
 name: black-pv-cka
spec:
 capacity:
 storage: 50Mi
 accessModes:
 - ReadWriteOnce
 persistentVolumeReclaimPolicy: Retain
 hostPath:
 path: /opt/black-pv-cka

&lt;span class="nv">$ &lt;/span>kubectl apply &lt;span class="nt">-f&lt;/span> pv.yaml
persistentvolume/black-pv-cka created&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_storage_persistent_volume_claim">2. Storage - Persistent Volume Claim&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>&lt;a href="https://killercoda.com/sachin/course/CKA/pvc" target="_blank" rel="noopener">Storage - Persistent Volume Claim&lt;/a>&lt;/p>
&lt;/div></description></item><item><title>killercoda CKA：Services &amp; Networking</title><link>https://www.diguage.com/post/killercoda-cka-services-networking/</link><pubDate>Wed, 18 Dec 2024 19:54:28 +0800</pubDate><guid>https://www.diguage.com/post/killercoda-cka-services-networking/</guid><description>&lt;div class="sect1">
&lt;h2 id="_services_networking_services">1. Services &amp;amp; Networking - Services&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>&lt;a href="https://killercoda.com/sachin/course/CKA/svc" target="_blank" rel="noopener">Services &amp;amp; Networking - Services&lt;/a>&lt;/p>
&lt;/div>
&lt;div class="sidebarblock">
&lt;div class="content">
&lt;div class="paragraph">
&lt;p>You have an existing Nginx pod named &lt;code>nginx-pod&lt;/code>. Perform the following steps:&lt;/p>
&lt;/div>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>Expose the &lt;code>nginx-pod&lt;/code> internally within the cluster using a Service named &lt;code>nginx-service&lt;/code> .&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;code>port forwarding&lt;/code> to service to access the Welcome content of &lt;code>nginx-pod&lt;/code> using the &lt;code>curl&lt;/code> command.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">&lt;span class="c"># @author D瓜哥 · &lt;a href="https://www.diguage.com" target="_blank">https://www.diguage.com&lt;/a>&lt;/span>

&lt;span class="nv">$ &lt;/span>kubectl get pod &lt;span class="nt">--show-labels&lt;/span>
NAME READY STATUS RESTARTS AGE LABELS
nginx-pod 1/1 Running 0 8m48s &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>nginx

&lt;span class="nv">$ &lt;/span>&lt;span class="nb">cat &lt;/span>svc.yaml
apiVersion: v1
kind: Service
metadata:
 name: nginx-service
spec:
 selector:
 app: nginx
 ports:
 - name: http
 protocol: TCP
 port: 80
 targetPort: 80

&lt;span class="nv">$ &lt;/span>kubectl apply &lt;span class="nt">-f&lt;/span> svc.yaml
service/nginx-service created

&lt;span class="nv">$ &lt;/span>kubectl port-forward service/nginx-service 8081:80
Forwarding from 127.0.0.1:8081 -&amp;gt; 80
Forwarding from &lt;span class="o">[&lt;/span>::1]:8081 -&amp;gt; 80
Handling connection &lt;span class="k">for &lt;/span>8081


&lt;span class="c"># 打开另外一个终端&lt;/span>
&lt;span class="nv">$ &lt;/span>curl localhost:8081
&amp;lt;&lt;span class="o">!&lt;/span>DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;&lt;span class="nb">head&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;
&amp;lt;style&amp;gt;
html &lt;span class="o">{&lt;/span> color-scheme: light dark&lt;span class="p">;&lt;/span> &lt;span class="o">}&lt;/span>
body &lt;span class="o">{&lt;/span> width: 35em&lt;span class="p">;&lt;/span> margin: 0 auto&lt;span class="p">;&lt;/span>
font-family: Tahoma, Verdana, Arial, sans-serif&lt;span class="p">;&lt;/span> &lt;span class="o">}&lt;/span>
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Welcome to nginx!&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;For online documentation and support please refer to
&amp;lt;a &lt;span class="nv">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;http://nginx.org/&amp;#34;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>nginx.org&amp;lt;/a&amp;gt;.&amp;lt;br/&amp;gt;
Commercial support is available at
&amp;lt;a &lt;span class="nv">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;http://nginx.com/&amp;#34;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>nginx.com&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Thank you &lt;span class="k">for &lt;/span>using nginx.&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>killercoda CKA：Architecture, Installation &amp; Maintenance</title><link>https://www.diguage.com/post/killercoda-cka-architecture-installation-maintenance/</link><pubDate>Mon, 16 Dec 2024 19:54:28 +0800</pubDate><guid>https://www.diguage.com/post/killercoda-cka-architecture-installation-maintenance/</guid><description>&lt;div class="sect1">
&lt;h2 id="_architecture_installation_maintenance_create_pod">1. Architecture, Installation &amp;amp; Maintenance - Create Pod&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>&lt;a href="https://killercoda.com/sachin/course/CKA/pod-create" target="_blank" rel="noopener">Architecture, Installation &amp;amp; Maintenance - Create Pod&lt;/a>&lt;/p>
&lt;/div>
&lt;div class="sidebarblock">
&lt;div class="content">
&lt;div class="paragraph">
&lt;p>Create a pod called &lt;code>sleep-pod&lt;/code> using the &lt;code>nginx&lt;/code> image and also &lt;code>sleep&lt;/code> (using &lt;code>command&lt;/code> ) for give any value for seconds.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">&lt;span class="c"># @author D瓜哥 · &lt;a href="https://www.diguage.com" target="_blank">https://www.diguage.com&lt;/a>&lt;/span>

&lt;span class="nv">$ &lt;/span>&lt;span class="nb">cat &lt;/span>nginx.yaml
apiVersion: v1
kind: Pod
metadata:
 name: sleep-pod
spec:
 containers:
 - name: nginx
 image: nginx
 &lt;span class="nb">command&lt;/span>:
 - &lt;span class="nb">sleep&lt;/span>
 - &lt;span class="s2">&amp;#34;3600&amp;#34;&lt;/span>

&lt;span class="nv">$ &lt;/span>kubectl apply &lt;span class="nt">-f&lt;/span> nginx.yaml
pod/sleep-pod created

&lt;span class="nv">$ &lt;/span>kubectl get pod
NAME READY STATUS RESTARTS AGE
sleep-pod 1/1 Running 0 5s&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>理解数据库分片</title><link>https://www.diguage.com/post/understanding-database-sharding/</link><pubDate>Sun, 01 Dec 2024 15:42:01 +0800</pubDate><guid>https://www.diguage.com/post/understanding-database-sharding/</guid><description>&lt;div class="sidebarblock">
&lt;div class="content">
&lt;div class="paragraph">
&lt;p>最近在 DigitalOcean 社区看到一篇文章，讲解数据库分片架构的，感觉非常不错，图文并茂，翻译过来，分享给需要的朋友。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_介绍">介绍&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>任何应用程序或网站，如果出现大幅增长，最终都需要进行扩展，以适应流量的增加。对于数据驱动型应用程序和网站来说，在进行扩展时必须确保数据的安全性和完整性。很难预测一个网站或应用程序会变得多受欢迎，或者它的受欢迎程度会维持多久，这就是为什么一些组织会选择一种允许他们动态扩展数据库的数据库架构。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在这篇概念性文章中，我们将讨论这样一种数据库架构：分片数据库。近年来，分片数据库受到了广泛关注，但很多人并不清楚什么是分片数据库，也不知道在哪些情况下分片数据库才有意义。我们将介绍什么是分片、分片的一些主要优点和缺点，以及几种常见的分片方法。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_什么是分片">什么是分片？&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>分片是一种与水平分区相关的数据库架构模式，即把一个表的行分成多个不同的表，称为分区。每个分区都有相同的模式和列，但也有完全不同的行。同样，每个分区中的数据都是唯一的，与其他分区中的数据无关。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>从水平分区与垂直分区的关系角度来思考水平分区可能会有所帮助。在垂直分区表中，整个列都被分离出来并放入新的、不同的表中。一个垂直分区中的数据独立于所有其他分区中的数据，每个分区都有不同的行和列。下图说明了如何对表格进行水平和垂直分区：&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/databases/sharding-1.png" alt="水平分区与垂直分区" width="95%"/>
&lt;/div>
&lt;div class="title">图 1. 水平分区与垂直分区&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>分片是指将数据分割成两个或多个较小的块，称为逻辑分片。然后，逻辑分片分布在不同的数据库节点上，称为物理分片，物理分片可容纳多个逻辑分片。尽管如此，所有分片中保存的数据共同代表了一个完整的逻辑数据集。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>数据库分片是无共享架构的典范。这意味着分片是独立的，它们不共享任何相同的数据或计算资源。不过，在某些情况下，将某些表复制到每个分片中作为参考表是有意义的。例如，假设有一个应用程序的数据库依赖于重量测量的固定转换率。通过将包含必要转换率数据的表复制到每个分片中，有助于确保每个分片中都包含查询所需的所有数据。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>通常，分片是在应用程序级实现的，这意味着应用程序包含定义向哪个分片传输读写的代码。不过，有些数据库管理系统内置了分片功能，允许你直接在数据库级实施分片。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>鉴于以上对分片的概述，让我们来看看这种数据库架构的一些优点和缺点。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_分片的优点">分片的优点&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>对数据库进行分片的主要吸引力在于，它有助于促进水平扩展，也称为向外扩展，横向扩展。水平扩展是指在现有堆栈中添加更多机器，以分散负载，允许更多流量和更快处理。这通常与垂直扩展（也称向上扩展）形成对比，后者涉及升级现有服务器的硬件，通常是增加更多内存或 CPU。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在一台机器上运行一个关系数据库，并根据需要通过升级其计算资源来扩大其规模相对简单。但归根结底，任何非分布式数据库在存储和计算能力方面都是有限的，因此可以自由横向扩展，会让你的设置更加灵活。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>一些人选择分片数据库架构的另一个原因是为了加快查询响应速度。在未分片的数据库上提交查询时，数据库可能需要搜索查询表中的每一行，然后才能找到所需的结果集。对于使用大型单体数据库的应用程序来说，查询速度会慢得令人望而却步。不过，通过将一个表分片成多个表后，查询需要处理的行数就会减少，返回结果集的速度也会快得多。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>分片还可以减轻中断造成的影响，从而提高应用程序的可靠性。如果您的应用程序或网站依赖的是未分片的数据库，中断有可能导致整个应用程序不可用。 而使用分片数据库时，故障可能只影响单个分片。尽管这可能会导致部分用户无法使用应用程序或网站的某些部分，但总体影响仍小于整个数据库崩溃的影响。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_分片的缺点">分片的缺点&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>虽然分片可以使数据库的扩展更容易并提高性能，但它也会带来一些限制。在此，我们将讨论其中的一些限制，以及为什么要避免使用分片。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>人们在使用分片时遇到的第一个困难是正确实施分片数据库架构的复杂性。如果操作不当，分片过程很有可能导致数据丢失或表损坏。即使操作正确，分片也可能对团队的工作流程产生重大影响。用户必须跨多个分片位置管理数据，而不是从一个入口点访问和管理数据，这可能会对某些团队造成干扰。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>用户在对数据库进行分片后有时会遇到一个问题，那就是分片最终会变得不平衡。举例来说，假设你的数据库有两个独立的分片，一个用于存储姓氏以字母 A 至 M 开头的客户，另一个用于存储姓氏以字母 N 至 Z 开头的客户。然而，你的应用程序为大量姓氏以字母 G 开头的人提供服务。 A-M 分区已成为所谓的数据库热点。在这种情况下，分片给数据库带来的任何好处都会被速度变慢和崩溃所抵消。数据库很可能需要修复和重新分片，以使数据分布更均匀。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>另一个主要缺点是，一旦数据库被分片，就很难将其恢复到未分片的架构。数据库分片前的任何备份都不包括分片后写入的数据。 因此，要重建未分片的原始架构，就需要将新的分片数据与旧的备份合并，或者将分片后的数据库变回单一数据库，这两种方法都会耗费大量成本和时间。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>最后一个需要考虑的缺点是，并非每个数据库引擎都支持分片。例如，PostgreSQL 不包括自动分片功能，但可以手动分片 PostgreSQL 数据库。 有一些 Postgres 变种确实包含自动分片功能，但它们往往落后于最新的 PostgreSQL 版本，而且缺乏某些其他功能。一些专门的数据库技术（如 MySQL Cluster 或某些数据库即服务产品（如 MongoDB Atlas））确实包含自动分片功能，但这些数据库管理系统的普通版本并不包含。因此，分片通常需要“自己开发”。这意味着通常很难找到分片文档或故障排除技巧。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>当然，这些只是分片前需要考虑的一些一般性问题。根据其用例，对数据库进行分片可能会有更多潜在的缺点。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>现在，我们已经介绍了分片的一些缺点和优点，下面将介绍几种不同的分片数据库架构。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_分片架构">分片架构&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>一旦决定对数据库进行分片，接下来需要考虑的就是如何分片。在运行查询或将输入数据分发到分片表或数据库时，将数据分发到正确的分片至关重要。否则，可能会导致数据丢失或查询缓慢。在本节中，我们将介绍几种常见的分片架构，每种架构都使用略有不同的流程在分片间分发数据。&lt;/p>
&lt;/div>
&lt;div class="sect2">
&lt;h3 id="_基于键的分片">基于键的分片&lt;/h3>
&lt;div class="paragraph">
&lt;p>基于密钥的分片，也称为基于散列的分片，涉及使用从新写入的数据中提取的值，例如客户的 ID 编号、客户端应用程序的 IP 地址、邮政编码等并将其输入散列函数，以确定数据应进入哪个分片。散列函数是一种输入数据（如客户电子邮件）并输出离散值（即散列值）的函数。在分片的情况下，散列值是一个分片 ID，用于确定输入的数据将存储在哪个分片上。整个过程如下：&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/databases/sharding-2.png" alt="基于键的分片" width="95%"/>
&lt;/div>
&lt;div class="title">图 2. 基于键的分片&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>为确保条目以一致的方式放置于正确的分片，输入散列函数的值都应来自同一列。此列被称为分片键。简单来说，分片键与主键类似，都是用于为单个行建立唯一标识符的列。从广义上讲，分片键应该是静态的，也就是说，它不应该包含可能会随时间变化的值。否则，会增加更新操作的工作量，并可能降低性能。&lt;/p>
&lt;/div></description></item><item><title>基于 Docker 搭建开发环境（三）：链路追踪</title><link>https://www.diguage.com/post/building-a-develop-environment-based-on-docker-3/</link><pubDate>Sun, 20 Oct 2024 16:50:11 +0800</pubDate><guid>https://www.diguage.com/post/building-a-develop-environment-based-on-docker-3/</guid><description>&lt;div class="paragraph">
&lt;p>&lt;strong>基于 Docker 搭建开发环境系列&lt;/strong>:&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-1/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（一）：数据库+监控&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-2/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（二）：EFK 日志套件&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-3/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（三）：链路追踪&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在上一篇文章 &lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-1/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（一）：数据库+监控&lt;/a> 和 &lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-2/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（二）：EFK 日志套件&lt;/a> 两篇文章中，分别介绍了“数据库+监控”和“EFK 日志套件”。这篇文章给大家分享一下如何在本地搭建起一套简单的分布式链路追踪。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在 AI 的帮助下，如同砍瓜切菜一样，非常迅速地就完成了 &lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-2/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（二）：EFK 日志套件&lt;/a> 的搭建。原以为搞这个也会分分钟的问题，结果应用的追踪数据一致无法正常发送到 Jaeger 中，各种改端口号都不行。后来，无意间看了 OpenTelemetry 的配置文档，增加了一个协议配置，全部流程竟然通了，非常神奇！&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>站在更高的视角去看，链路追踪其实是可观测性的一部分，包括上篇文章的日志，也是可观测性的一部分。日志、追踪、度量，三者是相辅相成的。&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/it/observability.png" alt="可观测性" width="95%"/>
&lt;/div>
&lt;div class="title">图 1. 可观测性&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在 OpenTelemetry 出现之前，日志、追踪、度量是分离的，三者各各自为战。而 OpenTelemetry 的出现，则是试图将三者统一。目前 OpenTelemetry 是云原生架构中，最炙手可热的分布式链路追踪解决方案，它提供了一套相关标准，各个厂商可以在这套标准之上进行各种各样的组件开发，大家可以根据自己的需要，选择不同的组件，进行可插拔式的安装。&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/it/opentelemetry-collection.webp" alt="OpenTelemetry 的野心" width="95%"/>
&lt;/div>
&lt;div class="title">图 2. OpenTelemetry 的野心&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在这篇文章中，链路追踪的解决方案选择的是 OpenTelemetry + OpenTelemetry Collector + Jaeger。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_opentelemetry">OpenTelemetry&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>OpenTelemetry 并不需要在 Docker 中启动或者配置什么。在目前的架构中，Jaeger 是作为 OpenTelemetry 的一个实现来出现的。 OpenTelemetry 需要做的就是下载一个 Java Agent，执行 &lt;code>docker/config/opentelemetry/download-opentelemetry-agent.sh&lt;/code> 脚本即可下载最新版的 Java Agent。在业务应用启动时，增加如下 JVM 参数：&lt;/p>
&lt;/div></description></item><item><title>基于 Docker 搭建开发环境（二）：EFK 日志套件</title><link>https://www.diguage.com/post/building-a-develop-environment-based-on-docker-2/</link><pubDate>Thu, 17 Oct 2024 22:42:11 +0800</pubDate><guid>https://www.diguage.com/post/building-a-develop-environment-based-on-docker-2/</guid><description>&lt;div class="paragraph">
&lt;p>&lt;strong>基于 Docker 搭建开发环境系列&lt;/strong>:&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-1/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（一）：数据库+监控&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-2/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（二）：EFK 日志套件&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-3/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（三）：链路追踪&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在上一篇文章 &lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-1/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（一）：数据库+监控&lt;/a> 中，介绍了一下如何使用 Docker 搭建起 MySQL + NACOS + Prometheus + Grafana 集成数据库、注册中心+配置管理、监控的开发环境。这篇文章来介绍一下如何在原来的基础上接入 Elasticsearch + Fluentd + Kibana 套件，并且将 NACOS 的日志接入到 Elasticsearch 里。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_elasticsearch">Elasticsearch&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>由于 Elasticsearch 8+ 的版本修改了安全策略，不允许 Kibana 使用超级管理员 &lt;code>elastic&lt;/code> 连接 Elasticsearch，这里选用 7.x 版本做演示。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>还有一点需要提醒，在设置 Elasticsearch 的超级管理员 &lt;code>elastic&lt;/code> 的账户密码时，如果密码是全部的阿拉伯数字，那么需要用双引号或者单引号括起来。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在测试中，还遇到一个磁盘过载导致的只读问题。解决方式如下：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;code>curl -X GET &amp;#34;localhost:9200/_cat/allocation?v&amp;amp;pretty&amp;#34;&lt;/code> 查看磁盘使用情况&lt;/p>
&lt;/li>
&lt;li>
&lt;p>解除只读状态&lt;/p>
&lt;div class="openblock">
&lt;div class="content">
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">&lt;span class="nv">$ &lt;/span>curl &lt;span class="nt">-X&lt;/span> PUT &lt;span class="s2">&amp;#34;localhost:9200/test/_settings&amp;#34;&lt;/span> &lt;span class="nt">-H&lt;/span> &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> &lt;span class="nt">-d&lt;/span>&lt;span class="s1">&amp;#39;
{
 &amp;#34;index.blocks.read_only_allow_delete&amp;#34;: null
}
&amp;#39;&lt;/span>&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>基于 Docker 搭建开发环境（一）：数据库+监控</title><link>https://www.diguage.com/post/building-a-develop-environment-based-on-docker-1/</link><pubDate>Wed, 16 Oct 2024 21:48:11 +0800</pubDate><guid>https://www.diguage.com/post/building-a-develop-environment-based-on-docker-1/</guid><description>&lt;div class="paragraph">
&lt;p>&lt;strong>基于 Docker 搭建开发环境系列&lt;/strong>:&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-1/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（一）：数据库+监控&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-2/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（二）：EFK 日志套件&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/building-a-develop-environment-based-on-docker-3/" target="_blank" rel="noopener">基于 Docker 搭建开发环境（三）：链路追踪&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="paragraph">
&lt;p>去年，很多同事要换 Mac 本，所以，写了 &lt;a href="https://www.diguage.com/post/install-software-for-new-mac/" target="_blank" rel="noopener">新 Mac 安装软件脚本&lt;/a>，方便大家一键换机。最近想玩一下 Spring Cloud 以及相关周边的部署、监控等开源解决方案。由于组件众多及为了便于迁移和共享，计划基于 Docker 及 Docker Compose 搭建一套相关的开发环境。记录一下，方便有相同需求的朋友借鉴。&lt;/p>
&lt;/div>
&lt;div class="admonitionblock tip">
&lt;table>
&lt;tbody>&lt;tr>
&lt;td class="icon">
&lt;i class="fa icon-tip" title="Tip">&lt;/i>
&lt;/td>
&lt;td class="content">
最新版的 Docker 在下载镜像时，会先访问一下 Docker 的官方站点。由于国内众所周知的网络情况，访问 Docker 官方站点总失败。所以，即使配置了国内 Docker 镜像站点也会失败。只需要将 Docker 软件回滚到 4.30.0 即可。（Mac 下验证有效，其他操作系统待进一步验证。）
&lt;/td>
&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_mysql">MySQL&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>开发中，最常用的应该就是数据库了。所以，先来搞 MySQL 数据库。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>创建如下目录结构，并添加相关相关文件：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">&lt;span class="nv">$ &lt;/span>tree
&lt;span class="nb">.&lt;/span>
├── README.adoc
├── clean.sh
├── data
│ └── mysql
│ └── .gitkeep
├── docker
│ ├── config
│ │ └── mysql
│ │ └── init.sql
│ ├── &lt;span class="nb">env&lt;/span>
│ │ └── mysql.env
│ └── images
│ └── mysql.dockerfile
└── docker-compose.yml&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>再谈 DDD 是银弹吗？</title><link>https://www.diguage.com/post/is-ddd-a-silver-bullet-2/</link><pubDate>Sat, 07 Sep 2024 22:04:19 +0800</pubDate><guid>https://www.diguage.com/post/is-ddd-a-silver-bullet-2/</guid><description>&lt;div class="paragraph">
&lt;p>在 &lt;a href="https://www.diguage.com/post/is-ddd-a-silver-bullet/" target="_blank" rel="noopener">DDD 是银弹吗？&lt;/a> 中，D瓜哥分享了关于领域驱动设计的三个问题。最近在读一本书 &lt;a href="https://book.douban.com/subject/35731315/" target="_blank" rel="noopener">《架构设计2.0：大型分布式系统架构方法论与实践》&lt;/a>。（这本书还不错，推荐）这本书中，花了两个章节的篇幅，重点谈论了领域驱动设计。引用书中的观点，结合个人开发经验，再来谈一谈 DDD 是否是银弹？&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_软件建模的困难">软件建模的困难&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>首先，必须面对的一个事实是：软件建模，困难重重；尤其是对于复杂业务的建模，更是难上加难。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>对于复杂业务的软件开发，其生命周期大概分为如下五个阶段：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;strong>确定业务目标和业务价值。&lt;/strong>&lt;/p>
&lt;div class="paragraph">
&lt;p>比如某消费信贷业务。&lt;/p>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>目标被拆解成一系列核心功能点。&lt;/strong>&lt;/p>
&lt;div class="paragraph">
&lt;p>比如消费信贷下的授信、交易、账务等。&lt;/p>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>围绕这些功能点定义业务流程、业务规则，以及整个过程设计什么样的业务数据或业务对象。&lt;/strong>&lt;/p>
&lt;div class="paragraph">
&lt;p>比如账单分期金额必须大于 100 元。&lt;/p>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>领域建模。&lt;/strong>&lt;/p>
&lt;div class="paragraph">
&lt;p>比如对账务系统进行建模。&lt;/p>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>基于领域模型做技术架构的设计。&lt;/strong>&lt;/p>
&lt;div class="paragraph">
&lt;p>比如是否要做读写分离？是否要做分库分表等？&lt;/p>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="paragraph">
&lt;p>软件建模的本质是找出现实世界中的“不变形”。但是，现实世界中，唯一不变的就是这个世界在不断变化！所以，建模的过程也是一个反复的过程。如下图：&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/develop/develop-lifecycle.svg" alt="复杂业务软件开发的生命周期" width="95%"/>
&lt;/div>
&lt;div class="title">图 1. 复杂业务软件开发的生命周期&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_几乎不存在稳定的领域模型">几乎不存在稳定的领域模型&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>我们追求一个稳定的领域模型，但是，现实却给了我们重重一击：稳定的模型几乎不可能做到。原因如下：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;strong>意识问题。&lt;/strong>&lt;/p>
&lt;div class="paragraph">
&lt;p>在消费、业务及产品等关注的是业务流程。唯独开发人员要将业务流程转化成业务模型。&lt;/p>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>现实世界的复杂性。&lt;/strong>&lt;/p>
&lt;div class="paragraph">
&lt;p>现实业务是复杂的，建模只是抽取了一个现实业务某一时刻的业务形态。但是，业务形态会有变化的，比如取现前期不可分期，后期业务迭代可能就会运行进行分期。&lt;/p>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>迭代速度。&lt;/strong>&lt;/p>
&lt;div class="paragraph">
&lt;p>互联网公司要求“小步快跑，快速迭代”。这与模型的稳定其实是矛盾的。为了业务的迭代速度，只能牺牲模型的稳定性，为了赶工期，只能在模型上不断打补丁。&lt;/p>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>火候的掌握。&lt;/strong>&lt;/p>
&lt;div class="openblock">
&lt;div class="content">
&lt;div class="paragraph">
&lt;p>开发人员的设计能力无法一蹴而就。既需要思考，又需要反复练习。在快速的业务迭代和人员流动下，开发人员根本没有时间锤炼自己的设计能力。那么，对于设计火候的掌握，也就很难达到理想中的水平。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_领域驱动设计的困难">领域驱动设计的困难&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>书中总结了实施领域驱动设计的五个困难，D瓜哥逐一谈谈自己的看法：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;strong>领域驱动设计本身只是一套思维方法，而不是要严格执行的标准，所以其本身弹性很大。&lt;/strong>&lt;/p>
&lt;div class="paragraph">
&lt;p>这个问题，D瓜哥在上一篇文章中已经讨论过了。弹性太大，就有太多值得商榷的地方，也许初次开发，还可以按照某个人的想法一以贯之。但是，随着参与维护的人员增多，每个人都会不由自主地会带入个人的一些想法，各种想法的碰撞，必然就会引入代码结构的混乱。&lt;/p>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>思维方式的转换很难。&lt;/strong>&lt;/p>
&lt;div class="paragraph">
&lt;p>绝大多数面向业务的开发人员，尤其是 Java 开发人员，对三层架构已经有根深蒂固的认识。思维方式已经被打上深深的烙印，想要改变，坦白讲，极其困难。尤其是，没有一个统一的标准和广泛认可的实现范例，完全靠摸着石头过河，必然会“一千个读者，就有一千个哈姆雷特。”&lt;/p>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>领域驱动设计的实施需要强大的技术基础实施来保证。&lt;/strong>&lt;/p>
&lt;div class="paragraph">
&lt;p>D瓜哥私以为这个倒不是什么问题。针对技术问题，尤其是一些共性问题，都有成熟的解决方案。只要能合理搭积木，就可以解决相应的问题。&lt;/p>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>大量存量的老系统，重构成本大于收益，没有重构动力。&lt;/strong>&lt;/p>
&lt;div class="openblock">
&lt;div class="content">
&lt;div class="paragraph">
&lt;p>编程第一准则：代码能跑就不要动。重构引入的问题谁来解决？重构带来的事故谁来负责？这个时候必须祭出这张图了：&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/common/bug-code-run.jpeg" alt="代码能跑就不要动" width="95%"/>
&lt;/div>
&lt;div class="title">图 2. 代码能跑就不要动&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>当然，私以为不是程序员反感重构代码，更多是因为下面这个因素。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>在互联网的快速开发迭代面前，很少有人可以静下心来在软件方法论层面去精雕细琢，更多的是快速堆砌功能，完成业务需求开发。&lt;/strong>&lt;/p>
&lt;div class="openblock">
&lt;div class="content">
&lt;div class="paragraph">
&lt;p>业务的快速迭代，导致根本没有时间让开发人员去优化代码。可口的饭菜需要恰当的火候和足够的时间，优雅的软件建模也需要恰当的火候和足够的时间。精心地软件建模需要三个月，业务让你一个月上线，而且还是加班加点才能干完。结合实际来看，绝大多数情况都会想业务妥协吧？！&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_领域驱动设计的出路">领域驱动设计的出路&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>书中的观点是做个折中：&lt;strong>在宏观层面，遵循领域驱动设计的方法论；在微观层面，不严格遵循领域驱动设计的方法论。&lt;/strong>&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>D瓜哥是这样理解的：可以利用领域驱动设计里面的限界上下文的思想，把领域做个分割，划分成业务更聚合的子域。在子域内部，提炼出统一语言，来规范业务、产品和开发沟通的业务术语。在子域交互的接口层面，进行精心设计，精雕细琢。至于子域及接口的内部实现，就交给开发团队自己决策，只要满足对应的技术指标（比如每秒要支撑多大的访问量）即可。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在部门内部讨论时，D瓜哥还给出了一个更具操作性和落地性的方案：现实面临的问题是代码冗余，技术欠债，不容易维护。&lt;strong>先放下关于领域驱动设计的无谓讨论，利用每一次开发的机会，把冗余代码删除，把代码重构和优化，一步一步地精炼代码，即使不谈领域驱动设计，相信在逐步重构和优化下，技术欠债会逐渐弥补，可维护性也会逐步提高。&lt;/strong>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>DDD 是银弹吗？</title><link>https://www.diguage.com/post/is-ddd-a-silver-bullet/</link><pubDate>Wed, 28 Aug 2024 19:27:44 +0800</pubDate><guid>https://www.diguage.com/post/is-ddd-a-silver-bullet/</guid><description>&lt;div class="quoteblock">
&lt;blockquote>
&lt;div class="paragraph">
&lt;p>史前时期最骇人的景象，莫过于一群巨兽在焦油坑里做垂死前的挣扎。不妨闭上眼睛想像一下，你看到了一群恐龙、长毛象、剑齿虎正在奋力挣脱焦油的束缚，但越挣扎，焦油就缠得越紧，就算他再强壮、再厉害，最后，都难逃灭顶的命运。过去十年间，大型系统的软件开发工作就像是掉进了焦油坑里……&lt;/p>
&lt;/div>
&lt;/blockquote>
&lt;div class="attribution">
— 佛瑞德·布鲁克斯（Frederick P. Brooks）&lt;br/>
&lt;cite>《人月神话》&lt;/cite>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>应该早在 2019 年，在 &lt;a href="https://coolshell.cn/" target="_blank" rel="noopener">左耳朵耗子哥&lt;/a> 的推荐下阅读了 &lt;a href="https://book.douban.com/subject/5344973/" target="_blank" rel="noopener">《领域驱动设计》&lt;/a>，并将读书摘要整理成几篇文章：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/domain-driven-design-1/" target="_blank" rel="noopener">《领域驱动设计》读书笔记（一）：运用领域模型&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/domain-driven-design-2/" target="_blank" rel="noopener">《领域驱动设计》读书笔记（二）：模型驱动设计的构造块&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/domain-driven-design-3/" target="_blank" rel="noopener">《领域驱动设计》读书笔记（三）：通过重构来加深理解&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/domain-driven-design-4/" target="_blank" rel="noopener">《领域驱动设计》读书笔记（四）：战略设计&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="paragraph">
&lt;p>部门要搞 DDD 和体系化建设，正好有一个核心项目要做重构，领导让实践一下领域驱动设计，苦于没有范例可以参考，感觉无处下手，所以又读了 &lt;a href="https://book.douban.com/subject/35235992/" target="_blank" rel="noopener">《中台架构与实现·基于DDD和微服务》&lt;/a>（最早读的是极客时间专栏，后专栏编撰成该书）。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>后来，又陆陆续续看了好多领域驱动设计的相关文章。对于领域驱动设计，即了解过，也实践过。所以，结合自身的经历和体会，谈一谈我的感受。不吹不黑，重点谈三个问题。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_如何快速上手">1. 如何快速上手？&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>上面介绍了一下D瓜哥的个人经历，是付出了一点的时间和精力的，由此引出了第一个问题：&lt;strong>如何快速上手？&lt;/strong>对于一个工作多年，经验丰富，也算勤奋好学的高级码农，上手还如此困难重重，那么对于一个刚刚参加工作的职场新人，上手是否会更加困难？又该如何克服这个困难？&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>任何一家公司，尤其是大型技术公司，都是由初中高级工程师组成的，而且成员人数也是由多到少，参与实际开发工作，大概率也会由多到少，初级开发工程师干了大量的实际编码工作。如果无法吸引大多数的初级工程师参与进来，只有个别的高级工程师去落地，那么，所谓的领域驱动设计，只能成为空中楼阁，海市蜃楼。华而不实，无法落地。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>但是，由于经验少，这对于初级工程师来说，也许是一个优势。毕竟，一张白纸，可以画出各种美丽的画卷。中高级工程师已经习惯于传统的开发模式，思维已经定格。但是，初级工程师，反倒是嗷嗷待哺，更容易塑性。可惜的是，现在没有好的示例可以学习。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_哪里有可以参考的示例">2. 哪里有可以参考的示例？&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>快速上手的最好办法，就是给一个完整的示例，拿来直接抄作业。对于入门的程序员，学东西上手最快的办法就是抄代码。把示例代码，拿过来改吧改吧就能跑起来，无形中就学会怎么写代码了。对于传统的三层架构，有太多的示例可以来学习了，比如 &lt;a href="https://github.com/springside/springside4" target="_blank" rel="noopener">SpringSide&lt;/a>。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>从 &lt;a href="https://book.douban.com/subject/1418618/" target="_blank" rel="noopener">《Domain-Driven Design》&lt;/a> 这本书在 2003 年出版到现在，已经有 21 年了。到现在为止，也没有见到一个开源的、能运行起来的基于领域驱动设计的项目。也可能是鄙人孤陋寡闻，坐井观天，没有发现。如果谁发现了，欢迎向我反馈。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>作为对比，我们来看一下 Spring 的发展过程。Spring 的思想最早是在 &lt;a href="https://book.douban.com/subject/1426848/" target="_blank" rel="noopener">《J2EE Development without EJB》&lt;/a> 这本书里出现的，这本书是在 2004 年 6 月出版的。这本书出版后，开源社区根据这本书里面的思想及代码片段，开发出了 Spring 框架。在两年后，Spring 之父 Rod Johnson 接着出版了 &lt;a href="https://book.douban.com/subject/1440851/" target="_blank" rel="noopener">《Professional Java Development with the Spring Framework》&lt;/a>，系统介绍了一下 Spring 框架的各种使用案例。到 2008 年我上大学的时候，在国内的培训行业，已经开始重点讲解 Spring 了。&lt;/p>
&lt;/div>
&lt;div class="admonitionblock tip">
&lt;table>
&lt;tbody>&lt;tr>
&lt;td class="icon">
&lt;i class="fa icon-tip" title="Tip">&lt;/i>
&lt;/td>
&lt;td class="content">
其实，D瓜哥想拿传统的三层架构的发展来做对比，可惜没有找到更确切的时间线。
&lt;/td>
&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;/div>
&lt;div class="paragraph">
&lt;p>期待一个完整的、基于领域驱动设计的、能正常运行起来的开源项目尽早出现！&lt;/p>
&lt;/div></description></item><item><title>JVM GC 性能测试（三）：真实流量</title><link>https://www.diguage.com/post/gc-performance-real-qps/</link><pubDate>Wed, 01 May 2024 12:12:12 +0800</pubDate><guid>https://www.diguage.com/post/gc-performance-real-qps/</guid><description>&lt;div class="paragraph">
&lt;p>&lt;strong>JVM GC 性能测试系列&lt;/strong>:&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-comparison-method/" target="_blank" rel="noopener">JVM GC 性能对比方法&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-same-qps/" target="_blank" rel="noopener">JVM GC 性能测试（一）：相同流量&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-incremental-qps/" target="_blank" rel="noopener">JVM GC 性能测试（二）：递增流量&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-real-qps/" target="_blank" rel="noopener">JVM GC 性能测试（三）：真实流量&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;hr/>
&lt;div class="paragraph">
&lt;p>书接上文，在 &lt;a href="https://www.diguage.com/post/gc-performance-incremental-qps/" target="_blank" rel="noopener">JVM GC 性能测试（二）：递增流量&lt;/a> 的最后，D瓜哥提到了一个问题，对于在 &lt;a href="https://www.diguage.com/post/gc-performance-same-qps/" target="_blank" rel="noopener">JVM GC 性能测试（一）：相同流量&lt;/a> 和 &lt;a href="https://www.diguage.com/post/gc-performance-incremental-qps/" target="_blank" rel="noopener">JVM GC 性能测试（二）：递增流量&lt;/a> 中存在的巨大 QPS 差异疑惑不解。所以，D瓜哥决定将测试机器接入到线上环境，在真实访问中，观察各个 GC 的表现。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_一言以蔽之">一言以蔽之&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>J21-Gen-ZGC 和 J21-G1 无论在稳定性，吞吐量以及响应时效性上都非常优秀。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>再极端峰值情况，J21-G1 是更好的选择，更加稳定，不容易出凸点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>日常使用，J21-Gen-ZGC 响应性更好，接口耗时更低。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="sidebarblock">
&lt;div class="content">
&lt;div class="paragraph">
&lt;p>鉴于 OpenJDK 21 G1 GC 一如既往的惊艳表现，D瓜哥准备整理一下 G1 GC 的主要优化，敬请关注： &lt;a href="https://www.diguage.com/post/main-optimization-of-garbage-first-collector/" target="_blank" rel="noopener">Java G1 垃圾收集器主要优化&lt;/a>。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_服务调用监控数据">1. 服务调用监控数据&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>监控服务调用的相关数据，这是对于用户来说，感知最强烈的相关数据，也是直接关系到服务质量的数据。&lt;/p>
&lt;/div>
&lt;div class="sect2">
&lt;h3 id="_服务调用次数">1.1. 服务调用次数&lt;/h3>
&lt;div class="paragraph">
&lt;p>从调用次数上来看，五个分组没有大的变化，可以说根本没有达到系统的极限峰值。当然，这才是正常现象，如果日常运行都爆峰值，那说明系统早该扩容了。&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/gc-performance-3/api-qps-second.jpg" alt="服务调用次数（秒级）" width="95%"/>
&lt;/div>
&lt;div class="title">图 1. 服务调用次数（秒级）&lt;/div>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/gc-performance-3/api-qps-minute.jpg" alt="服务调用次数（分钟级）" width="95%"/>
&lt;/div>
&lt;div class="title">图 2. 服务调用次数（分钟级）&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect2">
&lt;h3 id="api-qps-time">1.2. 服务调用耗时&lt;/h3>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>整体上讲，J21-Gen-ZGC 的耗时更短，从数据上来看，TP999 能比 J21-G1 的少 10~20ms；TP99 更加夸张，J21-Gen-ZGC 的耗时只有 J21-G1 的一半。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>J21-Gen-ZGC 和 J21-G1 还是一如既往的稳。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>这次测试中，J17-ZGC 也很稳，有些出乎意料。但是，结合下面 &lt;a href="#jvm-cpu">JVM CPU 使用率&lt;/a> 和 &lt;a href="#os-cpu">系统 CPU 使用率&lt;/a> 来看，J17-ZGC 和 J21-ZGC 的 CPU 使用率早早就达到 90%+，再结合上面两个测试，从稳定性来看，J17-ZGC 和 J21-ZGC 只能被排除掉。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div></description></item><item><title>JVM GC 性能测试（二）：递增流量</title><link>https://www.diguage.com/post/gc-performance-incremental-qps/</link><pubDate>Tue, 30 Apr 2024 00:29:00 +0800</pubDate><guid>https://www.diguage.com/post/gc-performance-incremental-qps/</guid><description>&lt;div class="paragraph">
&lt;p>&lt;strong>JVM GC 性能测试系列&lt;/strong>:&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-comparison-method/" target="_blank" rel="noopener">JVM GC 性能对比方法&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-same-qps/" target="_blank" rel="noopener">JVM GC 性能测试（一）：相同流量&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-incremental-qps/" target="_blank" rel="noopener">JVM GC 性能测试（二）：递增流量&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-real-qps/" target="_blank" rel="noopener">JVM GC 性能测试（三）：真实流量&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;hr/>
&lt;div class="paragraph">
&lt;p>在上一篇文章 &lt;a href="https://www.diguage.com/post/gc-performance-same-qps/" target="_blank" rel="noopener">JVM GC 性能测试（一）：相同流量&lt;/a> 中，D瓜哥使用一个总量请求对所有分组的所有机器进行性能测试。但是，经过测试发现了一个问题，同时产生了另外一个问题，有两个问题没有得到很好的解答：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>由于服务响应时长直接关系到服务调用次数，当某一台机器出现问题时，整体调用次数就会急剧下降，调用次数加不上去。一个机器出问题，所有机器的访问量就上不去了。这是测试中发现的一个问题。当然，这属于测试工具的问题，别不是 GC 的问题。但是，也影响到我们的压测，也需要解决。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>上次测试，这是针对某一个指定服务调用量进行性能测试，那么，无法确定每个 GC 能支撑的极限调用峰值。另外，在极限峰值和超极限峰值的情况下，各个 GC 的表现如何？这个也有待验证。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="paragraph">
&lt;p>针对上述两个问题，设计了本次测试。测试方法如下：&lt;/p>
&lt;/div>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>各个分组使用一套相同的流量策略：&lt;/p>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>各个分组几乎同时开始执行测试任务；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用量从低到高，以此同时使用相关的调用量进行测试；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>除最开始预热阶段的调用量外，后续每个调用量都持续进行十分钟的测试。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>针对每个 GC 分组单独设定一套调用发量程序，这个保证各个 GC 分组直接不相互影响。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最后，再分析调用量相同时段的各个 GC 表现，就可以看到各个 GC 的极限峰值。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="admonitionblock tip">
&lt;table>
&lt;tbody>&lt;tr>
&lt;td class="icon">
&lt;i class="fa icon-tip" title="Tip">&lt;/i>
&lt;/td>
&lt;td class="content">
为了保留更多细节，本文所有截图都是在 34 吋带鱼屏下，使用全屏模式展示并截图的。如果看不清楚，可以右击在新页面打开图片来查看。
&lt;/td>
&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;/div>
&lt;div class="paragraph">
&lt;p>具体流量及时间段：&lt;/p>
&lt;/div>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>750， 23:14:30 ~ 23:19:30&lt;/p>
&lt;/li>
&lt;li>
&lt;p>800， 23:19:30 ~ 23:29:30&lt;/p>
&lt;/li>
&lt;li>
&lt;p>850， 23:29:30 ~ 23:39:30&lt;/p>
&lt;/li>
&lt;li>
&lt;p>900， 23:39:30 ~ 23:49:30&lt;/p>
&lt;/li>
&lt;li>
&lt;p>950， 23:49:30 ~ 23:59:30&lt;/p>
&lt;/li>
&lt;li>
&lt;p>1000，23:59:30 ~ 00:09:30&lt;/p>
&lt;/li>
&lt;li>
&lt;p>1050，00:09:30 ~ 00:19:30&lt;/p>
&lt;/li>
&lt;li>
&lt;p>1100，00:19:30 ~ 00:29:30&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div></description></item><item><title>JVM GC 性能测试（一）：相同流量</title><link>https://www.diguage.com/post/gc-performance-same-qps/</link><pubDate>Thu, 25 Apr 2024 22:02:47 +0800</pubDate><guid>https://www.diguage.com/post/gc-performance-same-qps/</guid><description>&lt;div class="paragraph">
&lt;p>&lt;strong>JVM GC 性能测试系列&lt;/strong>:&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-comparison-method/" target="_blank" rel="noopener">JVM GC 性能对比方法&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-same-qps/" target="_blank" rel="noopener">JVM GC 性能测试（一）：相同流量&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-incremental-qps/" target="_blank" rel="noopener">JVM GC 性能测试（二）：递增流量&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-real-qps/" target="_blank" rel="noopener">JVM GC 性能测试（三）：真实流量&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;hr/>
&lt;div class="paragraph">
&lt;p>在上一篇文章 &lt;a href="https://www.diguage.com/post/gc-performance-comparison-method/" target="_blank" rel="noopener">JVM GC 性能对比方法&lt;/a> 介绍了性能对比的方法，这篇文章就根据该方法对上述提到的5种 JVM GC 进行性能测试。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在正式测试之前，D瓜哥进行了多次小流量试探性测试，来探索一个合适的量。找到一个比较平稳的量后，乘以机器数量，获得一个每秒总计请求量，最后使用该总量数据去做压测。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>根据多次测试的数据来看，最后选择的是每台每秒 500 QPS，5 个分组，每个分组 5 台机器，所以，每秒的请求总量是： 500 * 5 * 5 = 12500 QPS；每个分组每分钟的总量是：500 * 5 * 60 = 150000 QPS。使用每台机器以此使用 100 QPS，200 QPS，300 QPS，400 QPS 各运行一分钟来对系统进行预热。最后以每台每秒 500 QPS 的访问量来对测试机器进行持续十分钟的性能测试，最后分析这十分钟的相关数据。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_一言以蔽之">一言以蔽之&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>服务稳定性：J21-Gen-ZGC、J21-G1、J8-G1 稳定性最好；J17-ZGC 有轻微波动；J21-ZGC 有剧烈波动；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>服务耗时 TP999：J21-Gen-ZGC &amp;lt; J17-ZGC &amp;lt; J21-G1 &amp;lt; J8-G1 &amp;lt; J21-ZGC；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CPU 消耗：J21-G1 &amp;lt; J8-G1 &amp;lt; J17-ZGC &amp;lt; J21-Gen-ZGC &amp;lt; J21-ZGC；&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>JVM GC 性能对比方法</title><link>https://www.diguage.com/post/gc-performance-comparison-method/</link><pubDate>Wed, 24 Apr 2024 19:52:47 +0800</pubDate><guid>https://www.diguage.com/post/gc-performance-comparison-method/</guid><description>&lt;div class="paragraph">
&lt;p>&lt;strong>JVM GC 性能测试系列&lt;/strong>:&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-comparison-method/" target="_blank" rel="noopener">JVM GC 性能对比方法&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-same-qps/" target="_blank" rel="noopener">JVM GC 性能测试（一）：相同流量&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-incremental-qps/" target="_blank" rel="noopener">JVM GC 性能测试（二）：递增流量&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/gc-performance-real-qps/" target="_blank" rel="noopener">JVM GC 性能测试（三）：真实流量&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;hr/>
&lt;div class="paragraph">
&lt;p>现在部门内部绝大部分应用都还在使用 OpenJDK 8，计划推进部门升级 JDK 到 OpenJDK21。本着实事求是，用数据说话的原则，准备对如下 GC 做性能测试：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>OpenJDK 8 G1 GC（以下称 J8-G1。具体版本号：1.8.0_321-b07。）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>OpenJDK 17 ZGC（以下称 J17-ZGC。具体版本号：17.0.9+9。）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>OpenJDK 21 G1（以下称 J21-G1。具体版本号：21.0.2+13-LTS。）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>OpenJDK 21 ZGC（以下称 J21-ZGC。具体版本号：21.0.2+13-LTS。）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>OpenJDK 21 Gen ZGC（以下称 J21-Gen-ZGC。具体版本号：21.0.2+13-LTS。）&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="admonitionblock note">
&lt;table>
&lt;tbody>&lt;tr>
&lt;td class="icon">
&lt;i class="fa icon-note" title="Note">&lt;/i>
&lt;/td>
&lt;td class="content">
所有 OpenJDK 版本都是选用相同大版本号里的最高的版本。所有的机器都是 4C8G 的配置，JVM 堆栈内存设置为 4608M 。
&lt;/td>
&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;/div>
&lt;div class="paragraph">
&lt;p>为了减少不必要的干扰，JVM 相关参数也尽可能做到了一致或者接近。（等测试完，D瓜哥会把相关参数也分享出来。）&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_测试对象">测试对象&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>由于D瓜哥所处的部门是一个直接面向用户的线上业务部门，所以，大部分系统是直接面对用户，接受用户访问的在线业务系统。所以，为了服务线上业务系统的需求，测试对象的选择就限定在了类似的场景中。测试对象是线上接受用户访问的一个服务。结构如下：&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/gc-performance/api.svg" alt="压测接口依赖关系图" width="95%"/>
&lt;/div>
&lt;div class="title">图 1. 压测接口依赖关系图&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>该接口有外部依赖服务，也有数据库查询，是一个微服务架构下典型的在线服务接口。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_测试方法">测试方法&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>原本计划是想直接通过上线，将线上不同分组的机器使用不同的 GC 来做测试，但是，这样面临好几个问题：&lt;/p>
&lt;/div></description></item><item><title>JVM 剖析花园：2 - 透明大页</title><link>https://www.diguage.com/post/jvm-anatomy-quarks-02-transparent-huge-pages/</link><pubDate>Sat, 13 Jan 2024 19:24:37 +0800</pubDate><guid>https://www.diguage.com/post/jvm-anatomy-quarks-02-transparent-huge-pages/</guid><description>&lt;div class="sect1">
&lt;h2 id="_问题">问题&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>什么是大页（Large Page）？什么是透明大页（Transparent Huge Page）？它对我有什么帮助？&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_理论">理论&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>虚拟内存现在已被视为理所当然。现在只有少数人还记得，更不用说做一些“真实模式”编程了，在这种情况下，你会接触到实际的物理内存。相反，每个进程都有自己的虚拟内存空间，该空间被映射到实际内存上。例如，两个进程在相同的虚拟地址 &lt;code>0x42424242&lt;/code> 上拥有不同的数据，而这些数据将由不同的物理内存支持。现在，当程序访问该地址时，应将虚拟地址转换为物理地址。&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/os/virtual-address-space-and-physical-address-space-relationship.svg" alt="虚拟内存地址与物理内存地址之间的关系" width="95%"/>
&lt;/div>
&lt;div class="title">图 1. 虚拟内存地址与物理内存地址之间的关系&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>这通常由操作系统维护 &lt;a href="https://en.wikipedia.org/wiki/Page_table" target="_blank" rel="noopener">“页表”&lt;/a>，硬件通过“页表遍历”来实现地址转换。如果在页面粒度上维护翻译，整个过程就会变得简单。但这样做的成本并不低，而且每次内存访问都需要这样做！因此，还需要对最新的翻译进行小型缓存，即 &lt;a href="https://en.wikipedia.org/wiki/Translation_lookaside_buffer" target="_blank" rel="noopener">转译后备缓冲区（Translation Lookaside Buffer (TLB)）&lt;/a>。TLB 通常很小，只有不到 100 个条目，因为它的速度至少要与 L1 缓存相当，甚至更快。对于许多工作负载来说，TLB 未命中和相关的页表遍历需要大量时间。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>既然我们无法将 TLB 做得更大，那么我们可以做其他事情：制作更大的页面！大多数硬件有 4K 基本页和 2M/4M/1G “大页”。用更大的页来覆盖相同的区域，还能使页表本身更小，从而降低页表遍历的成本。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在 Linux 世界中，至少有两种不同的方法可以在应用程序中实现这一点：&lt;/p>
&lt;/div>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.kernel.org/doc/Documentation/vm/hugetlbpage.txt" target="_blank" rel="noopener">&lt;strong>hugetlbfs&lt;/strong>&lt;/a>。切出系统内存的一部分，将其作为虚拟文件系统公开，让应用程序通过 &lt;code>mmap(2)&lt;/code> 从其中获取。这是一个特殊的接口，需要操作系统配置和应用程序更改才能使用。这也是一种“要么全有，要么全无”的交易：分配给 &lt;code>hugetlbfs&lt;/code>（持久部分）的空间不能被普通进程使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.kernel.org/doc/Documentation/vm/transhuge.txt" target="_blank" rel="noopener">&lt;strong>透明大页（Transparent Huge Pages (THP)）&lt;/strong>&lt;/a>。让应用程序像往常一样分配内存，但尽量以透明方式为应用程序提供大容量页面支持的存储空间。理想情况下，不需要更改应用程序，但我们会看到应用程序如何从了解 THP 的可用性中获益。但在实际应用中，会产生内存开销（因为会为小文件分配整个大页面）或时间开销（因为 THP 有时需要对内存进行碎片整理以分配页面）。好在有一个中间方案：通过 &lt;code>madvise(2)&lt;/code> 可以让应用程序告诉 Linux 在哪里使用 THP。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="paragraph">
&lt;p>不明白为什么术语中会交替使用 &amp;#34;large &amp;#34;和 &amp;#34;huge&amp;#34;。总之，OpenJDK 支持这两种模式：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">&lt;span class="nv">$ &lt;/span>java &lt;span class="nt">-XX&lt;/span>:+PrintFlagsFinal 2&amp;gt;&amp;amp;1 | &lt;span class="nb">grep &lt;/span>Huge
 bool UseHugeTLBFS &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span> &lt;span class="o">{&lt;/span>product&lt;span class="o">}&lt;/span> &lt;span class="o">{&lt;/span>default&lt;span class="o">}&lt;/span>
 bool UseTransparentHugePages &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span> &lt;span class="o">{&lt;/span>product&lt;span class="o">}&lt;/span> &lt;span class="o">{&lt;/span>default&lt;span class="o">}&lt;/span>
&lt;span class="nv">$ &lt;/span>java &lt;span class="nt">-XX&lt;/span>:+PrintFlagsFinal 2&amp;gt;&amp;amp;1 | &lt;span class="nb">grep &lt;/span>LargePage
 bool UseLargePages &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span> &lt;span class="o">{&lt;/span>pd product&lt;span class="o">}&lt;/span> &lt;span class="o">{&lt;/span>default&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>JVM 剖析花园：1 - 锁粗化及循环</title><link>https://www.diguage.com/post/jvm-anatomy-quarks-01-lock-coarsening-for-loops/</link><pubDate>Sat, 13 Jan 2024 16:08:36 +0800</pubDate><guid>https://www.diguage.com/post/jvm-anatomy-quarks-01-lock-coarsening-for-loops/</guid><description>&lt;div class="quoteblock">
&lt;blockquote>
&lt;div class="paragraph">
&lt;p>“JVM 剖析花园”是由 JVM 研发专家及性能极客 &lt;a href="https://shipilev.net/" target="_blank" rel="noopener">Aleksey Shipilëv&lt;/a> 撰写的一个系列文章，专门介绍一些有关 JVM 的基本知识。笔者也是前几年无意间发现的一片宝藏文章。早就有翻译过来，介绍给大家的想法，可惜一直未能付诸实践。最近在查资料时，无意间又翻到了这个系列，遂下定决心，完成这个萌发已久的小想法。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>为了便于理解，对该系列的名字做了微调，原文是“JVM Anatomy Quarks”，将原文的“Quarks”（夸克）翻译为了“花园”。&lt;/p>
&lt;/div>
&lt;/blockquote>
&lt;/div>
&lt;div class="paragraph">
&lt;p>“JVM 解剖花园”是一个正在进行中的小型系列文章，每篇文章都会介绍一些有关 JVM 的基本知识。这个名字强调了一个事实，即单篇文章不能孤立地看待，这里描述的大部分内容都会很容易地相互影响。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>阅读这篇文章大约需要 5-10 分钟。因此，它只针对单一主题、单一测试、单一基准和单一观察进行深入探讨。这里的证据和讨论可能是轶事，并没有对错误、一致性、写作风格、语法和语义错误、重复或一致性进行实际审查。请自行承担使用和/或信任的风险。&lt;/p>
&lt;/div>
&lt;div class="admonitionblock note">
&lt;table>
&lt;tbody>&lt;tr>
&lt;td class="icon">
&lt;i class="fa icon-note" title="Note">&lt;/i>
&lt;/td>
&lt;td class="content">
以上是该系列介绍。这里介绍一次，后续文章不再赘述。
&lt;/td>
&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_问题">问题&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>众所周知，Hotspot 可以进行 &lt;a href="https://en.wikipedia.org/wiki/Java_performance#Escape_analysis_and_lock_coarsening" target="_blank" rel="noopener">锁粗化优化&lt;/a>，有效合并多个相邻的锁定块，从而减少锁定开销。它能有效地对如下代码做优化：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="java">&lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="c1">// statements 1&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="c1">// statements 2&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>优化后：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="java">&lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="c1">// statements 1&lt;/span>
 &lt;span class="c1">// statements 2&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>现在，今天提出的一个有趣问题是：Hotspot 是否会对循环进行这种优化？例如：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="java">&lt;span class="k">for&lt;/span> &lt;span class="o">(...)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="c1">// something&lt;/span>
 &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>是否会被优化成如下这样：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="java">&lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="k">for&lt;/span> &lt;span class="o">(...)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="c1">// something&lt;/span>
 &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>理论上，没有什么能阻止我们这样做。我们甚至可以把这种优化看作是 &lt;a href="https://en.wikipedia.org/wiki/Loop_unswitching" target="_blank" rel="noopener">循环判断外提&lt;/a>，只不过这里是针对锁而已。然而，这样做的缺点是有可能使锁变得过于粗糙，从而导致特定线程在执行大循环时占用锁。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_实验">实验&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>要回答这个问题，最简单的方法就是找到当前 Hotspot 优化的正面证据。幸运的是，有了 &lt;a href="https://github.com/openjdk/jmh" target="_blank" rel="noopener">JMH&lt;/a>，这一切都变得非常简单。它不仅有助于建立基准，还有助于工程中最重要的部分—​基准分析。让我们从一个简单的基准检查程序开始：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="java">&lt;span class="nd">@Fork&lt;/span>&lt;span class="o">(...,&lt;/span> &lt;span class="n">jvmArgsPrepend&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="s">&amp;#34;-XX:-UseBiasedLocking&amp;#34;&lt;/span>&lt;span class="o">})&lt;/span>
&lt;span class="nd">@State&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">Scope&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Benchmark&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LockRoach&lt;/span> &lt;span class="o">{&lt;/span> &lt;i class="conum" data-value="1">&lt;/i>&lt;b>(1)&lt;/b>
 &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">;&lt;/span>

 &lt;span class="nd">@Benchmark&lt;/span>
 &lt;span class="nd">@CompilerControl&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">CompilerControl&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Mode&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">DONT_INLINE&lt;/span>&lt;span class="o">)&lt;/span>
 &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="n">x&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mh">0x42&lt;/span>&lt;span class="o">;&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="colist arabic">
&lt;table>
&lt;tbody>&lt;tr>
&lt;td>&lt;i class="conum" data-value="1">&lt;/i>&lt;b>1&lt;/b>&lt;/td>
&lt;td>完整代码在 &lt;a href="https://shipilev.net/jvm/anatomy-quarks/1-lock-coarsening-for-loops/LockRoach.java" target="_blank" rel="noopener">这里&lt;/a>。&lt;/td>
&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;/div>
&lt;div class="paragraph">
&lt;p>这里有几个重要的技巧：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>使用 &lt;code>-XX:-UseBiasedLocking&lt;/code> 禁用偏向锁可以避免更长的预热时间，因为偏向锁不会立即启动，而是会在初始化阶段等待 5 秒（参见 &lt;code>BiasedLockingStartupDelay&lt;/code> 选项）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>禁用 &lt;code>@Benchmark&lt;/code> 的方法内联有助于在反汇编时将其分离。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>增加一个神奇的数字 &lt;code>0x42&lt;/code>，有助于在反汇编中快速找到增量。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>GC 调优成功案例：减少新生代的大小</title><link>https://www.diguage.com/post/gc-tuning-success-story-reducing-young-gen-size/</link><pubDate>Sat, 06 Jan 2024 16:51:18 +0800</pubDate><guid>https://www.diguage.com/post/gc-tuning-success-story-reducing-young-gen-size/</guid><description>&lt;div class="paragraph">
&lt;p>当对垃圾回收性能做调优时，不仅能改善垃圾回收暂停时间，还能改善整个应用程序的响应时间并降低云计算成本。最近，我们帮助调整了一个流行应用程序的垃圾回收行为。仅仅是一个微小的改动，就带来了巨大的改善。让我们在这篇文章中讨论一下这个垃圾回收调整的成功案例。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_垃圾收集关键绩效指标">垃圾收集关键绩效指标&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>有句名言叫“无法衡量的东西就无法优化”。说到垃圾回收的调整，您只需关注 3 个主要关键绩效指标 (KPI)：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>GC 暂停时间&lt;/p>
&lt;/li>
&lt;li>
&lt;p>GC 吞吐量&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CPU 消耗量&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="paragraph">
&lt;p>垃圾回收运行时，会暂停应用程序。“GC 停顿时间”表示应用程序在垃圾回收事件中停顿的时间。该指标以秒或毫秒为单位。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>“GC 吞吐量”表示应用程序处理客户事务的总时间与处理垃圾回收活动的总时间之比。该指标以百分比为单位。例如，如果有人说他的应用程序的 GC 吞吐量是 98%，这表明该应用程序有 98% 的时间用于处理客户活动，其余 2% 的时间用于处理垃圾回收活动。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>即使是处理一个简单的请求，现代应用程序也会创建成千上万个对象。因此，垃圾收集器必须在后台不断运行，以释放为每个请求创建的成千上万个对象。因此，垃圾回收往往会消耗大量的 CPU。因此，在调整垃圾回收性能时，还应研究 CPU 消耗。要了解有关这些 KPI 的更多信息，请参阅： 内存调整： &lt;a href="https://www.diguage.com/post/garbage-collection-kpi/" target="_blank" rel="noopener">关键性能指标&lt;/a>。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_如何获取这些_kpi">如何获取这些 KPI？&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>在调优垃圾回收性能时，垃圾回收日志是您最好的朋友。您可以通过 &lt;a href="https://www.diguage.com/post/how-to-do-gc-log-analysis/" target="_blank" rel="noopener">这篇文章&lt;/a> 给出的 JVM 参数在应用程序中启用垃圾回收日志。建议始终开启垃圾回收日志，因为它能提供丰富的信息，有助于预测中断、排除生产问题并帮助进行容量规划。此外，启用垃圾收集不会给应用程序增加任何明显的开销。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>启用垃圾收集日志后，您可以使用免费的垃圾收集日志分析工具，如 &lt;a href="https://gceasy.io/" target="_blank" rel="noopener">GCeasy&lt;/a>、 &lt;a href="https://www.ibm.com/support/pages/java-sdk" target="_blank" rel="noopener">IBM GC &amp;amp; Memory visualizer&lt;/a> 和 &lt;a href="https://github.com/mgm3746/garbagecat" target="_blank" rel="noopener">Google Garbage cat&lt;/a> 等，查看上述关键绩效指标。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在下面这篇文章，教你 &lt;a href="https://www.diguage.com/post/how-to-do-gc-log-analysis/" target="_blank" rel="noopener">如何进行 GC 日志分析&lt;/a>。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_垃圾回收行为基线">垃圾回收行为基线&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>介绍到此为止。让我们回到本文最初的主题。我们在这个流行的应用程序上启用了垃圾回收日志。我们让应用程序运行了 24 小时。然后，我们将生成的 GC 日志文件上传到 GCeasy 工具。该工具提供了具有洞察力的图表和 GC KPI。该应用程序的 GC 吞吐量为 96.176%，平均暂停时间为 12.429 秒。&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/gc-tuning/baselin-KPI.png" alt="基线 GC KPI（由 GCeasy 生成）" width="95%"/>
&lt;/div>
&lt;div class="title">图 1. 基线 GC KPI（由 GCeasy 生成）&lt;/div></description></item><item><title>如何实现 GC 的高吞吐量？</title><link>https://www.diguage.com/post/how-to-aim-for-high-gc-throughput/</link><pubDate>Fri, 05 Jan 2024 09:24:33 +0800</pubDate><guid>https://www.diguage.com/post/how-to-aim-for-high-gc-throughput/</guid><description>&lt;div class="paragraph">
&lt;p>三四十年前，开发人员负责释放在应用程序中创建的对象。业务应用程序相当复杂，有不同的工作流、用例和场景。即使开发人员在某个场景中少释放一个对象，对象也会在内存中累积，造成内存泄漏。Java 于 1995 年推出时，承诺自动进行垃圾回收。它将删除对象的责任从开发人员转移到了 Java 虚拟机（JVM），从而彻底改变了内存管理。整个行业都积极拥抱了这一创新理念，因为开发人员不再需要操心手动内存管理。从那时起，自动垃圾回收已成为所有现代编程语言的默认功能。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在本篇文章中，我们将探讨垃圾回收过程中的一个关键性能指标：&amp;#34;GC 吞吐量&amp;#34;。我们将了解它的含义、在 Java 应用程序中的重要性以及它对整体性能的影响。此外，我们还将深入探讨提高 GC 吞吐量的可行策略，为现代软件开发释放其优势。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_什么是垃圾回收吞吐量">什么是垃圾回收吞吐量？&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>每当运行自动垃圾回收事件时，应用程序都会停顿，以识别内存中未引用的对象并将其释放。在停顿期间，不会处理任何客户请求。垃圾回收吞吐量请求应用程序处理客户请求的时间占多大比例，垃圾回收活动的时间占多大比例。例如，如果有人说他的应用程序的 GC 吞吐量是 98%，这意味着他的应用程序有 98% 的时间用于处理客户请求，其余 2% 的时间用于处理垃圾回收活动。 高 GC 吞吐量是可取的，因为它表明应用程序有效地利用了系统资源，从而减少了停顿，提高了整体性能。相反，GC 吞吐量低会导致垃圾回收停顿时间增加，影响应用程序的响应速度，造成性能瓶颈。监控和优化 GC 吞吐量对于确保应用程序的顺利执行和响应速度至关重要。在下一节中，我们将探讨查找应用程序 GC 吞吐量的方法，并了解如何解释结果以优化 Java 应用程序性能。继续…&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_如何找到应用程序的_gc_吞吐量">如何找到应用程序的 GC 吞吐量？&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>垃圾回收日志是研究 GC 性能的最佳来源。如果你的应用程序运行在 JVM 上，你可以通过 &lt;a href="https://www.diguage.com/post/how-to-do-gc-log-analysis/" target="_blank" rel="noopener">如何进行 GC 日志分析&lt;/a> 文章中提到的 JVM 参数启用 GC 日志。启用 GC 日志后，让应用程序处理流量至少一天，以观察高流量和低流量时段各自的运行情况。之后，可以将生成的 GC 日志文件上传到 GC 日志分析工具，以获得有价值的分析结果。一些常用的 GC 日志分析工具包括 &lt;a href="https://gceasy.io/" target="_blank" rel="noopener">GCeasy&lt;/a>、 &lt;a href="https://www.ibm.com/support/pages/java-sdk" target="_blank" rel="noopener">IBM GC &amp;amp; Memory visualizer&lt;/a> 和 &lt;a href="https://github.com/mgm3746/garbagecat" target="_blank" rel="noopener">Google Garbage cat&lt;/a> 等。这些工具将报告 GC 吞吐量以及其他重要的 GC 指标。下面是 GCeasy 工具的摘录，展示了包括 GC 吞吐量在内的各种 GC 关键性能指标 (KPI) 报告。&lt;/p>
&lt;/div></description></item><item><title>Java ZGC 调优</title><link>https://www.diguage.com/post/java-zgc-algorithm-tuning/</link><pubDate>Wed, 03 Jan 2024 22:19:48 +0800</pubDate><guid>https://www.diguage.com/post/java-zgc-algorithm-tuning/</guid><description>&lt;div class="paragraph">
&lt;p>ZGC 是一种专门的垃圾回收器，主要用于管理大型堆和尽量减少 Java 应用程序中的停顿。它能应对在内存密集型工作负载和一致的响应时间至关重要的情况下的垃圾回收的挑战。ZGC 利用并发处理能力和先进的算法，为优化现代 Java 应用程序的性能提供了有效的解决方案。在本篇文章中，将专门探讨调整 ZGC 以提高性能的技术。不过，如果想了解更多基础知识，可以观看在 JAX 伦敦会议上发表的 &lt;a href="https://www.youtube.com/watch?v=6G0E4O5yxks" target="_blank" rel="noopener">垃圾回收调优&lt;/a> 讲座。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_如何启用_zgc">如何启用 ZGC？&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>确保使用的 Java 版本支持 ZGC。OpenJDK 从 JDK11 开始支持 ZGC。在启动应用程序时添加以下 JVM 参数，这样就可以在 Java 应用程序中启用 ZGC 垃圾收集器：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="bash">&lt;span class="c"># D瓜哥 · &lt;a href="https://www.digauge.com" target="_blank">https://www.digauge.com&lt;/a>&lt;/span>
&lt;span class="nt">-XX&lt;/span>:+UseZGC &lt;span class="nt">-XX&lt;/span>:+ZGenerational &lt;i class="conum" data-value="1">&lt;/i>&lt;b>(1)&lt;/b>&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="colist arabic">
&lt;table>
&lt;tbody>&lt;tr>
&lt;td>&lt;i class="conum" data-value="1">&lt;/i>&lt;b>1&lt;/b>&lt;/td>
&lt;td>D瓜哥注：分代 ZGC 从 OpenJDK 21+ 开始支持。&lt;/td>
&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_何时使用_zgc">何时使用 ZGC？&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>如果应用符合其中任何一项要求，就可以考虑使用 ZGC：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;strong>堆大小较大&lt;/strong>：ZGC 特别适合堆容量较大的应用程序，堆容量通常在数十 GB 或更大。如果应用需要大量内存，ZGC 的低延迟特性将使其成为一个令人信服的选择。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>低延迟要求&lt;/strong>：当应用需要一致的响应时间和低延迟性能时，ZGC 将大显身手。在需要最大限度缩短垃圾回收暂停时间的情况下，ZGC 表现出色，特别适合交互式应用和实时性应用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>具有不同工作负载的应用&lt;/strong>：ZGC 专为处理不同的工作负载而设计，因此适用于内存使用模式不可预测的应用。无论应用程序经历的是周期性的，突发性的，还是富有变化性的负载，ZGC 都能有效地适应这些调整。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_zgc_调优参数">ZGC 调优参数&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>ZGC 是 Java 中的一种垃圾收集器，它采用了一种不同的调优方法：将暴露的 JVM 参数数量降至最低。与需要细粒度调整的传统垃圾收集器不同，ZGC 专注于优化大型堆的管理，同时以最小的配置开销提供高效的垃圾收集。这种精简的方法允许开发人员主要关注一个关键的 JVM 调整参数：堆大小。&lt;/p>
&lt;/div></description></item><item><title>Java 虚拟机操作码探秘：常量指令</title><link>https://www.diguage.com/post/jvm-bytecode-constant/</link><pubDate>Sat, 03 Sep 2022 16:17:34 +0800</pubDate><guid>https://www.diguage.com/post/jvm-bytecode-constant/</guid><description>&lt;div class="paragraph">
&lt;p>在 &lt;a href="https://www.diguage.com/post/jvm-instruction-set/" target="_blank" rel="noopener">Java 虚拟机指令(操作码)集&lt;/a> 中给出了一个操作码的列表。针对所有的指令，仅仅给出了一个大概介绍，对理解来说可以说毫无助力。为了弥补这个短板，这里也学习 &lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/" target="_blank" rel="noopener">“Hessian 协议解释与实战”系列&lt;/a> 那样，来一个详细解释和实战，配合实例来做个深入分析和讲解。这是这个系列的第一篇文章，就以列表中第一部分“常量”指令开始。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>从 &lt;a href="https://www.diguage.com/post/jvm-instruction-set/" target="_blank" rel="noopener">Java 虚拟机指令(操作码)集&lt;/a> 列表上来看，一共 21 个指令；按照处理数据的类型，合并同类项后，剩下有 &lt;code>nop&lt;/code>、 &lt;a href="#aconst_null">&lt;code>aconst_null&lt;/code>&lt;/a>、 &lt;a href="#iconst">&lt;code>iconst_&amp;lt;i&amp;gt;&lt;/code>&lt;/a>、 &lt;a href="#lconst">&lt;code>lconst_&amp;lt;l&amp;gt;&lt;/code>&lt;/a>、 &lt;a href="#fconst">&lt;code>fconst_&amp;lt;f&amp;gt;&lt;/code>&lt;/a>、 &lt;a href="#dconst">&lt;code>dconst_&amp;lt;d&amp;gt;&lt;/code>&lt;/a>、 &lt;a href="#bipush">&lt;code>bipush&lt;/code>&lt;/a>、 &lt;a href="#sipush">&lt;code>sipush&lt;/code>&lt;/a>、 &lt;a href="#ldc">&lt;code>ldc&lt;/code>&lt;/a> 和 &lt;a href="#ldc2_w">&lt;code>ldc2_w&lt;/code>&lt;/a> 等几个指令。下面，按照顺序，对其进行一一讲解。&lt;/p>
&lt;/div>
&lt;div class="admonitionblock note">
&lt;table>
&lt;tbody>&lt;tr>
&lt;td class="icon">
&lt;i class="fa icon-note" title="Note">&lt;/i>
&lt;/td>
&lt;td class="content">
&lt;div class="paragraph">
&lt;p>操作码助记符的首字母一般是有特殊含义的，表示操作码所作用的数据类型： &lt;code>i&lt;/code> 代表对 &lt;code>int&lt;/code> 类型的数据操作； &lt;code>l&lt;/code> 代表 &lt;code>long&lt;/code>； &lt;code>s&lt;/code> 代表 &lt;code>short&lt;/code>； &lt;code>b&lt;/code> 代表 &lt;code>byte&lt;/code>；&lt;code>c&lt;/code> 代表 &lt;code>char&lt;/code>；&lt;code>f&lt;/code> 代表 &lt;code>float&lt;/code>， &lt;code>d&lt;/code> 代表 &lt;code>double&lt;/code>； &lt;code>a&lt;/code> 代表 reference。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>尖括号之间的字母指定了指令隐含操作数的数据类型，&lt;code>&amp;lt;n&amp;gt;&lt;/code> 代表非负的整数； &lt;code>&amp;lt;i&amp;gt;&lt;/code> 代表是 &lt;code>int&lt;/code> 类型数据； &lt;code>&amp;lt;l&amp;gt;&lt;/code> 代表 &lt;code>long&lt;/code> 类型； &lt;code>&amp;lt;f&amp;gt;&lt;/code> 代表 &lt;code>float&lt;/code> 类型； &lt;code>&amp;lt;d&amp;gt;&lt;/code> 代表 &lt;code>double&lt;/code> 类型。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>另外还需要指出一点：这种指令表示法在整个 Java 虚拟机规范之中都是通用的。&lt;/p>
&lt;/div>
&lt;/td>
&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_nop">&lt;code>nop&lt;/code>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>根据 &lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.nop" target="_blank" rel="noopener">Chapter 6. The Java Virtual Machine Instruction Set：nop&lt;/a> 来看，就是“Do nothing”，暂时没有找到使用方法。就不做多介绍，后续看到相关资料，再做补充。&lt;/p>
&lt;/div></description></item><item><title>Java 虚拟机指令(操作码)集</title><link>https://www.diguage.com/post/jvm-instruction-set/</link><pubDate>Wed, 31 Aug 2022 13:00:44 +0800</pubDate><guid>https://www.diguage.com/post/jvm-instruction-set/</guid><description>&lt;div class="paragraph">
&lt;p>最近在研究 Java 虚拟机字节码。在 &lt;a href="https://book.douban.com/subject/26418340/" target="_blank" rel="noopener">《Java虚拟机规范》&lt;/a> 看到一个整理完整的 Java 虚拟机指令集（也叫操作码）列表。转载过来，方便查阅。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>关于 Java 虚拟机指令(操作码)，准备写一个“探秘”系列：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/jvm-bytecode-constant/" target="_blank" rel="noopener">Java 虚拟机操作码探秘：常量指令&lt;/a> — 重点介绍一下关于“常量”指令。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;table class="tableblock frame-all grid-all stripes-even stretch">
&lt;colgroup>
&lt;col style="width: 7%;"/>
&lt;col style="width: 7%;"/>
&lt;col style="width: 7%;"/>
&lt;col style="width: 12%;"/>
&lt;col style="width: 67%;"/>
&lt;/colgroup>
&lt;thead>
&lt;tr>
&lt;th class="tableblock halign-center valign-middle">分类&lt;/th>
&lt;th class="tableblock halign-center valign-middle" colspan="2">操作码&lt;/th>
&lt;th class="tableblock halign-center valign-middle">助记符&lt;/th>
&lt;th class="tableblock halign-center valign-middle">指令含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle" rowspan="21">&lt;p class="tableblock">常量&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">0&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x00&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.nop" target="_blank" rel="noopener">nop&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">什么都不做&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">1&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x01&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.aconst_null" target="_blank" rel="noopener">aconst_null&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 null 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">2&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x02&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iconst_i" target="_blank" rel="noopener">iconst_m1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 int 类型 -1 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">3&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x03&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iconst_i" target="_blank" rel="noopener">iconst_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 int 类型 0 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">4&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x04&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iconst_i" target="_blank" rel="noopener">iconst_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 int 类型 1 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">5&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x05&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iconst_i" target="_blank" rel="noopener">iconst_2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 int 类型 2 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">6&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x06&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iconst_i" target="_blank" rel="noopener">iconst_3&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 int 类型 3 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">7&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x07&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iconst_i" target="_blank" rel="noopener">iconst_4&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 int 类型 4 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">8&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x08&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iconst_i" target="_blank" rel="noopener">iconst_5&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 int 类型 5 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">9&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x09&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lconst_l" target="_blank" rel="noopener">lconst_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 long 类型 0 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">10&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x0a&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lconst_l" target="_blank" rel="noopener">lconst_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 long 类型 1 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">11&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x0b&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fconst_f" target="_blank" rel="noopener">fconst_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 float 类型 0 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">12&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x0c&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fconst_f" target="_blank" rel="noopener">fconst_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 float 类型 1 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">13&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x0d&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fconst_f" target="_blank" rel="noopener">fconst_2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 float 类型 2 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">14&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x0e&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dconst_d" target="_blank" rel="noopener">dconst_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 double 类型 0 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">15&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x0f&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dconst_d" target="_blank" rel="noopener">dconst_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 double 类型 1 推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">16&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x10&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.bipush" target="_blank" rel="noopener">bipush&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将单字节的常量值(-128 ~ 127)推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">17&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x11&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.sipush" target="_blank" rel="noopener">sipush&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将一个短整类型常量值(-32,768 ~ 32,767)推送栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">18&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x12&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ldc" target="_blank" rel="noopener">ldc&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 int、 float 或 String 类型常量值从常量池中推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">19&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x13&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ldc_w" target="_blank" rel="noopener">ldc_w&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将int、 float 或 String 类型常量值从常量池中推送栈顶(宽索引)&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">20&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x14&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ldc2_w" target="_blank" rel="noopener">ldc2_w&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 long 或 double 类型常量值从常量池中推送至栈(宽索引)&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle" rowspan="33">&lt;p class="tableblock">加载&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">21&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;code>0x15&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iload" target="_blank" rel="noopener">iload&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将指定的 int 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">22&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x16&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lload" target="_blank" rel="noopener">lload&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将指定的 long 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">23&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x17&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fload" target="_blank" rel="noopener">fload&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将指定的 float 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">24&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x18&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dload" target="_blank" rel="noopener">dload&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将指定的 double 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">25&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x19&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.aload" target="_blank" rel="noopener">aload&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将指定的引用类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">26&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x1a&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iload_n" target="_blank" rel="noopener">iload_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 1 个 int 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">27&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x1b&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iload_n" target="_blank" rel="noopener">iload_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 2 个 int 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">28&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x1c&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iload_n" target="_blank" rel="noopener">iload_2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 3 个 int 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">29&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x1d&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iload_n" target="_blank" rel="noopener">iload_3&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 4 个 int 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">30&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x1e&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lload_n" target="_blank" rel="noopener">lload_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 1 个 long 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">31&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x1f&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lload_n" target="_blank" rel="noopener">lload_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 2 个 long 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">32&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x20&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lload_n" target="_blank" rel="noopener">lload_2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 3 个 long 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">33&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x21&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lload_n" target="_blank" rel="noopener">lload_3&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 4 个 long 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">34&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x22&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fload_n" target="_blank" rel="noopener">fload_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 1 个 float 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">35&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x23&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fload_n" target="_blank" rel="noopener">fload_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 2 个 float 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">36&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x24&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fload_n" target="_blank" rel="noopener">fload_2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 3 个 float 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">37&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x25&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fload_n" target="_blank" rel="noopener">fload_3&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 4 个 float 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">38&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x26&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dload_n" target="_blank" rel="noopener">dload_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 1 个 double 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">39&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x27&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dload_n" target="_blank" rel="noopener">dload_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 2 个 double 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">40&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x28&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dload_n" target="_blank" rel="noopener">dload_2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 3 个 double 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">41&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x29&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dload_n" target="_blank" rel="noopener">dload_3&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 4 个 double 类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">42&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x2a&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.aload_n" target="_blank" rel="noopener">aload_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 1 个引用类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">43&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x2b&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.aload_n" target="_blank" rel="noopener">aload_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 2 个引用类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">44&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x2c&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.aload_n" target="_blank" rel="noopener">aload_2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 3 个引用类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">45&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x2d&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.aload_n" target="_blank" rel="noopener">aload_3&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将第 4 个引用类型本地变量推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">46&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x2e&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iaload" target="_blank" rel="noopener">iaload&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 int 类型数组的指定元素推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">47&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x2f&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.laload" target="_blank" rel="noopener">laload&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 long 类型数组的指定元素推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">48&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x30&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.faload" target="_blank" rel="noopener">faload&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 float 类型数组的指定元素推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">49&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x31&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.daload" target="_blank" rel="noopener">daload&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 double 类型数组的指定元素推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">50&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x32&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.aaload" target="_blank" rel="noopener">aaload&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将引用类型数组的指定元素推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">51&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x33&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.baload" target="_blank" rel="noopener">baload&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 boolean 或 byte 类型数组的指定元素推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">52&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x34&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.caload" target="_blank" rel="noopener">caload&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 char 类型数组的指定元素推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">53&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x35&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.saload" target="_blank" rel="noopener">saload&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 short 类型数组的指定元素推送至栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle" rowspan="33">&lt;p class="tableblock">存储&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">54&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;code>0x36&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.istore" target="_blank" rel="noopener">istore&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 int 类型数值存入指定本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">55&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x37&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lstore" target="_blank" rel="noopener">lstore&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 long 类型数值存入指定本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">56&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x38&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fstore" target="_blank" rel="noopener">fstore&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 float 类型数值存入指定本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">57&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x39&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dstore" target="_blank" rel="noopener">dstore&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 double 类型数值存入指定本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">58&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x3a&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.astore" target="_blank" rel="noopener">astore&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶引用类型数值存入指定本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">59&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x3b&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.istore_n" target="_blank" rel="noopener">istore_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 int 类型数值存入第 1 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">60&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x3c&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.istore_n" target="_blank" rel="noopener">istore_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 int 类型数值存入第 2 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">61&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x3d&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.istore_n" target="_blank" rel="noopener">istore_2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 int 类型数值存入第 3 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">62&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x3e&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.istore_n" target="_blank" rel="noopener">istore_3&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 int 类型数值存入第 4 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">63&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x3f&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lstore_n" target="_blank" rel="noopener">lstore_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 long 类型数值存入第 1 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">64&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x40&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lstore_n" target="_blank" rel="noopener">lstore_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 long 类型数值存入第 2 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">65&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x41&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lstore_n" target="_blank" rel="noopener">lstore_2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 long 类型数值存入第 3 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">66&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x42&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lstore_n" target="_blank" rel="noopener">lstore_3&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 long 类型数值存入第 4 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">67&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x43&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fstore_n" target="_blank" rel="noopener">fstore_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 float 类型数值存入第 1 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">68&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x44&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fstore_n" target="_blank" rel="noopener">fstore_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 float 类型数值存入第 2 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">69&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x45&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fstore_n" target="_blank" rel="noopener">fstore_2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 float 类型数值存入第 3 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">70&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x46&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fstore_n" target="_blank" rel="noopener">fstore_3&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 float 类型数值存入第 4 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">71&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x47&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dstore_n" target="_blank" rel="noopener">dstore_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 double 类型数值存入第 1 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">72&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x48&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dstore_n" target="_blank" rel="noopener">dstore_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 double 类型数值存入第 2 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">73&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x49&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dstore_n" target="_blank" rel="noopener">dstore_2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 double 类型数值存入第 3 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">74&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x4a&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dstore_n" target="_blank" rel="noopener">dstore_3&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 double 类型数值存入第 4 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">75&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x4b&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.astore_n" target="_blank" rel="noopener">astore_0&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶引用类型数值存入第 1 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">76&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x4c&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.astore_n" target="_blank" rel="noopener">astore_1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶引用类型数值存入第 2 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">77&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x4d&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.astore_n" target="_blank" rel="noopener">astore_2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶引用类型数值存入第 3 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">78&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x4e&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.astore_n" target="_blank" rel="noopener">astore_3&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶引用类型数值存入第 4 个本地变量&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">79&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x4f&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iastore" target="_blank" rel="noopener">iastore&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 int 类型数值存入指定数组的指定索引位置&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">80&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x50&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lastore" target="_blank" rel="noopener">lastore&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 long 类型数值存入指定数组的指定索引位置&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">81&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x51&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fastore" target="_blank" rel="noopener">fastore&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 float 类型数值存入指定数组的指定索引位置&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">82&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x52&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dastore" target="_blank" rel="noopener">dastore&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 double 类型数值存入指定数组的指定索引位置&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">83&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x53&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.aastore" target="_blank" rel="noopener">aastore&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶引用类型数值存入指定数组的指定索引位置&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">84&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x54&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.bastore" target="_blank" rel="noopener">bastore&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 boolean 或 byte 类型数值存入指定数组的指定索引位置&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">85&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x55&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.castore" target="_blank" rel="noopener">castore&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 char 类型数值存入指定数组的指定索引位置&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">86&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x56&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.sastore" target="_blank" rel="noopener">sastore&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 short 类型数值存入指定数组的指定索引位置&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle" rowspan="9">&lt;p class="tableblock">栈&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">87&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;code>0x57&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.pop" target="_blank" rel="noopener">pop&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶数值弹出(数值不能是 long 或 double 类型的)&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">88&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x58&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.pop2" target="_blank" rel="noopener">pop2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶的一个 long 或 double 类型的数值或两个其他类型的数值弹出&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">89&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x59&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dup" target="_blank" rel="noopener">dup&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">复制栈顶数值并将复制值压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">90&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x5a&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dup_x1" target="_blank" rel="noopener">dup_x1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">复制栈顶值并将其插入栈顶那两个值的下面&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">91&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x5b&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dup_x2" target="_blank" rel="noopener">dup_x2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">复制栈顶值并将其插入栈顶那两个或三个值的下面&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">92&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x5c&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dup2" target="_blank" rel="noopener">dup2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">复制栈顶的一个 long 或 double 类型的值，或两个其他类型的值，并将其压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">93&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x5d&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dup2_x1" target="_blank" rel="noopener">dup2_x1&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">复制栈顶的一个或两个值，并将其插入栈顶那两个或三个值的下面&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">94&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x5e&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dup2_x2" target="_blank" rel="noopener">dup2_x2&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">复制栈顶的一个或两个值，并将其插入栈顶那两个、三个或四个值的下面&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">95&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x5f&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.swap" target="_blank" rel="noopener">swap&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶的两个数值互换(数值不能是 long 或 double 类型的)&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle" rowspan="37">&lt;p class="tableblock">数学&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">96&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;code>0x60&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iadd" target="_blank" rel="noopener">iadd&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 int 类型数值相加并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">97&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x61&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ladd" target="_blank" rel="noopener">ladd&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 1ong 类型数值相加并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">98&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x62&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fadd" target="_blank" rel="noopener">fadd&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 float 类型数值相加并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">99&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x63&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dadd" target="_blank" rel="noopener">dadd&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 double 类型数值相加并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">100&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x64&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.isub" target="_blank" rel="noopener">isub&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 int 类型数值相减并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">101&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x65&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lsub" target="_blank" rel="noopener">lsub&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 long 类型数值相减并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">102&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x66&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fsub" target="_blank" rel="noopener">fsub&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 float 类型数值相减并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">103&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x67&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dsub" target="_blank" rel="noopener">dsub&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 double 类型数值相减并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">104&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x68&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.imul" target="_blank" rel="noopener">imul&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 int 类型数值相乘并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">105&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x69&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lmul" target="_blank" rel="noopener">lmul&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 long 类型数值相乘并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">106&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x6a&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fmul" target="_blank" rel="noopener">fmul&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 float 类型数值相乘并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">107&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x6b&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dmul" target="_blank" rel="noopener">dmul&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 double 类型数值相乘并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">108&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x6с&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.idiv" target="_blank" rel="noopener">idiv&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 int 类型数值相除并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">109&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x6d&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ldiv" target="_blank" rel="noopener">ldiv&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 long 类型数值相除并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">110&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x6e&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fdiv" target="_blank" rel="noopener">fdiv&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 float 类型数值相除并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">111&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x6f&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ddiv" target="_blank" rel="noopener">ddiv&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 double 类型数值相除并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">112&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x70&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.irem" target="_blank" rel="noopener">irem&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 int 类型数值作取模运算并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">113&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x71&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lrem" target="_blank" rel="noopener">lrem&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 long 类型数值作取模运算并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">114&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x72&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.frem" target="_blank" rel="noopener">frem&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 float 类型数值作取模运算并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">115&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x73&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.drem" target="_blank" rel="noopener">drem&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 double 类型数值作取模运算并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">116&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x74&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ineg" target="_blank" rel="noopener">ineg&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 int 类型数值取负并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">117&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x75&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lneg" target="_blank" rel="noopener">lneg&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 long 类型数值取负并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">118&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x76&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fneg" target="_blank" rel="noopener">fneg&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 float 类型数值取负并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">119&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x77&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dneg" target="_blank" rel="noopener">dneg&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 double 类型数值取负并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">120&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x78&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ishl" target="_blank" rel="noopener">ishl&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 int 类型数值左移位指定位数并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">121&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x79&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lshl" target="_blank" rel="noopener">lshl&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 long 类型数值左移位指定位数并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">122&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x7a&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ishr" target="_blank" rel="noopener">ishr&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 int 类型数值(有符号)右移位指定位数并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">123&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x7b&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lshr" target="_blank" rel="noopener">lshr&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 long 类型数值(有符号)右移位指定位数并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">124&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">0x7c&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iushr" target="_blank" rel="noopener">iushr&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 int 类型数值(无符号)右移位指定位数并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">125&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x7d&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lushr" target="_blank" rel="noopener">lushr&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将 long 类型数值(无符号)右移位指定位数并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">126&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x7e&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iand" target="_blank" rel="noopener">iand&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 int 类型数值作“按位与”并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">127&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x7f&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.land" target="_blank" rel="noopener">land&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 long 类型数值作“按位与”并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">128&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x80&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ior" target="_blank" rel="noopener">ior&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 int 类型数值作“按位或”并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">129&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">0x81&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lor" target="_blank" rel="noopener">lor&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 long 类型数值作“按位或”并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">130&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x82&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ixor" target="_blank" rel="noopener">ixor&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 int 类型数值作“按位异或”并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">131&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x83&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lxor" target="_blank" rel="noopener">lxor&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶两 long 类型数值作“按位异或”并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">132&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x84&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.iinc" target="_blank" rel="noopener">iinc&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将指定 int 类型变量增加指定值(&lt;code>i++&lt;/code>，&lt;code>i--&lt;/code>，&lt;code>i += 2&lt;/code>)&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle" rowspan="15">&lt;p class="tableblock">转换&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">133&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;code>0x85&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.i2l" target="_blank" rel="noopener">i2l&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 int 类型数值强制转换成 long 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">134&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x86&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.i2f" target="_blank" rel="noopener">i2f&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 int 类型数值强制转换成 float 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">135&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x87&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.i2d" target="_blank" rel="noopener">i2d&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 int 类型数值强制转换成 double 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">136&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x88&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.l2i" target="_blank" rel="noopener">l2i&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 long 类型数值强制转换成 int 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">137&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x89&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.l2f" target="_blank" rel="noopener">l2f&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 long 类型数值强制转换成 float 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">138&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x8a&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.l2d" target="_blank" rel="noopener">l2d&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 long 类型数值强制转换成 double 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">139&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x8b&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.f2i" target="_blank" rel="noopener">f2i&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 float 类型数值强制转换成 int 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">140&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x8c&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.f2l" target="_blank" rel="noopener">f2l&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 float 类型数值强制转换成 long 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">141&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x8d&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.f2d" target="_blank" rel="noopener">f2d&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 float 类型数值强制转换成 double 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">142&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x8e&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.d2i" target="_blank" rel="noopener">d2i&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 double 类型数值强制转换成 int 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">143&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x8f&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.d2l" target="_blank" rel="noopener">d2l&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 double 类型数值强制转换成 long 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">144&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x90&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.d2f" target="_blank" rel="noopener">d2f&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 double 类型数值强制转换成 float 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">145&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x91&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.i2b" target="_blank" rel="noopener">i2b&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 int 类型数值强制转换成 byte 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">146&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x92&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.i2c" target="_blank" rel="noopener">i2c&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 int 类型数值强制转换成 char 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">147&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x93&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.i2s" target="_blank" rel="noopener">i2s&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶 int 类型数值强制转换成 short 类型数值并将结果压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle" rowspan="19">&lt;p class="tableblock">比较&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">148&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;code>0x94&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lcmp" target="_blank" rel="noopener">lcmp&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">比较栈顶两 long 类型数值大小，并将结果(1，0，-1)压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">149&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x95&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fcmp_op" target="_blank" rel="noopener">fcmpl&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">比较栈顶两 float 类型数值大小，并将结果(1，0，-1)压入栈顶；当其中一个数值为“NaN”时，将 -1 压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">150&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x96&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.fcmp_op" target="_blank" rel="noopener">fcmpg&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">比较栈顶两 float 类型数值大小，并将结果(1，0，-1)压入栈顶；当其中一个数值为“NaN”时，将1压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">151&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x97&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dcmp_op" target="_blank" rel="noopener">dcmpl&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">比较栈顶两 double 类型数值大小，并将结果(1，0，-1)压入栈顶；当其中一个数值为“NaN”时，将-1压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">152&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x98&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dcmp_op" target="_blank" rel="noopener">dcmpg&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">比较栈顶两 double 类型数值大小，并将结果(1，0，-1)压入栈顶；当其中一个数值为“NaN”时，将1压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">153&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x99&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_cond" target="_blank" rel="noopener">ifeq&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">当栈顶 int 类型数值等于 0 时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">154&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x9a&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_cond" target="_blank" rel="noopener">ifne&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">当栈顶 int 类型数值不等于 0 时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">155&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x9b&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_cond" target="_blank" rel="noopener">iflt&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">当栈顶 int 类型数值小于 0 时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">156&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x9c&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_cond" target="_blank" rel="noopener">ifge&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">当栈顶 int 类型数值大于等于 0 时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">157&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x9d&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_cond" target="_blank" rel="noopener">ifgt&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">当栈顶 int 类型数值大于 0 时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">158&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x9e&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_cond" target="_blank" rel="noopener">ifle&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">当栈顶 int 类型数值小于等于 0 时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">159&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0x9f&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_icmp_cond" target="_blank" rel="noopener">if_icmpeq&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">比较栈顶两 int 类型数值大小，当前者等于后者时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">160&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xa0&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_icmp_cond" target="_blank" rel="noopener">if_icmpne&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">比较栈顶两 int 类型数值大小，当前者不等于后者时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">161&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xa1&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_icmp_cond" target="_blank" rel="noopener">if_icmplt&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">比较栈顶两 int 类型数值大小，当前者小于后者时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">162&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xa2&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_icmp_cond" target="_blank" rel="noopener">if_icmpge&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">比较栈顶两 int 类型数值大小，当前者大于等于后者时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">163&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xa3&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_icmp_cond" target="_blank" rel="noopener">if_icmpgt&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">比较栈顶两 int 类型数值大小，当前者大于后者时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">164&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xa4&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_icmp_cond" target="_blank" rel="noopener">if_icmple&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">比较栈顶两 int 类型数值大小，当前者小于等于后者时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">165&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xa5&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_acmp_cond" target="_blank" rel="noopener">if_acmpeq&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">比较栈顶两引用类型数值，当结果相等时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">166&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xa6&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.if_acmp_cond" target="_blank" rel="noopener">ifacmpne&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">比较栈顶两引用类型数值，当结果不相等时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle" rowspan="11">&lt;p class="tableblock">控制&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">167&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;code>0xa7&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.goto" target="_blank" rel="noopener">goto&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">无条件跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">168&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xa8&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.jsr" target="_blank" rel="noopener">jsr&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">跳转至指定 16 位 offset 位置，并将 jsr 下一条指令地址压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">169&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xa9&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ret" target="_blank" rel="noopener">ret&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">返回至由指定的局部变量所给出的指令位置(一般与 jsr、jsr_w 联合使用)&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">170&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xaa&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.tableswitch" target="_blank" rel="noopener">tableswitch&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">用于 switch 条件跳转，case 值连续(变长指令)&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">171&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xab&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lookupswitch" target="_blank" rel="noopener">lookupswitch&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">用于 switch 条件跳转，case 值不连续(变长指令)&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">172&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xac&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ireturn" target="_blank" rel="noopener">ireturn&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">从当前方法返回 int&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">173&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>Oxad&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.lreturn" target="_blank" rel="noopener">lreturn&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">从当前方法返回 long&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">174&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xae&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.freturn" target="_blank" rel="noopener">freturn&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">从当前方法返回 float&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">175&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xaf&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.dreturn" target="_blank" rel="noopener">dreturn&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">从当前方法返回 double&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">176&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xb0&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.areturn" target="_blank" rel="noopener">areturn&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">从当前方法返回对象引用&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">177&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xb1&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.return" target="_blank" rel="noopener">return&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">从当前方法返回void&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle" rowspan="18">&lt;p class="tableblock">引用&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">178&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;code>0xb2&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.getstatic" target="_blank" rel="noopener">getstatic&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">获取指定类的静态字段，并将其值压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">179&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xb3&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.putstatic" target="_blank" rel="noopener">putstatic&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">为指定类的静态字段赋值&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">180&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xb4&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.getfield" target="_blank" rel="noopener">getfield&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">获取指定类的实例字段，并将其值压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">181&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xb5&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.putfield" target="_blank" rel="noopener">putfield&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">为指定类的实例字段赋值&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">182&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xb6&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.invokevirtual" target="_blank" rel="noopener">invokevirtual&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">调用实例方法&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">183&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xb7&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.invokespecial" target="_blank" rel="noopener">invokespecial&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">调用父类方法、实例初始化方法、私有方法&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">184&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xb8&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.invokestatic" target="_blank" rel="noopener">invokestatic&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">调用静态方法&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">185&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xb9&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.invokeinterface" target="_blank" rel="noopener">invokeinterface&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">调用接口方法&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">186&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xba&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.invokedynamic" target="_blank" rel="noopener">invokedynamic&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">调用动态链接方法&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">187&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xbb&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.new" target="_blank" rel="noopener">new&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">创建一个对象，并将其引用值压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">188&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xbc&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.newarray" target="_blank" rel="noopener">newarray&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">创建一个指定原始类型(如int、float 、char等)的数组，并将其引用值压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">189&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xbd&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.anewarray" target="_blank" rel="noopener">anewarray&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">创建一个引用型(如类、接口、数组)的数组，并将其引用值压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">190&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xbe&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.arraylength" target="_blank" rel="noopener">arraylength&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">获得数组的长度值并压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">191&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xbf&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.athrow" target="_blank" rel="noopener">athrow&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">将栈顶的异常抛出&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">192&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">0xcO&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.checkcast" target="_blank" rel="noopener">checkcast&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">检验类型转换，检验未通过将抛出 ClassCastException&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">193&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">0xc1&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.instanceof" target="_blank" rel="noopener">instanceof&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">检验对象是否是指定类的实例。如果是，就将 1 压入栈顶，否则将 0 压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">194&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xc2&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.monitorenter" target="_blank" rel="noopener">monitorenter&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">获得对象的锁，用于实现同步块&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">195&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xc3&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.monitorexit" target="_blank" rel="noopener">monitorexit&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">释放对象的锁，用于实现同步块&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle" rowspan="6">&lt;p class="tableblock">扩展&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">196&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;code>0xc4&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.wide" target="_blank" rel="noopener">wide&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">扩展本地变量索引的宽度&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">197&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xс5&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.multianewarray" target="_blank" rel="noopener">multianewarray&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">创建指定类型和指定维度的多维数组(执行该指令时，操作栈中必须包含各维度的长度值)，并将其引用值压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">198&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xc6&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ifnull" target="_blank" rel="noopener">ifnull&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">为nu11时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">199&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xc7&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.ifnonnull" target="_blank" rel="noopener">ifnonnull&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">不为nu11时跳转&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">200&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xc8&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.goto_w" target="_blank" rel="noopener">goto_w&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">无条件跳转(宽索引)&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">201&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xc9&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html#jvms-6.5.jsr_w" target="_blank" rel="noopener">jsr_w&lt;/a>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">跳转至指定 32 位 offset 位置，并将 jsr_w 下一条指令地址压入栈顶&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle" rowspan="3">&lt;p class="tableblock">保留指令&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">202&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">&lt;code>Оxca&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">breakpoint&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">调试时的断点标记&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">254&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>Oxfe&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">impdep1&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">为特定软件面预留的语言后门&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">255&lt;/p>&lt;/td>
&lt;td class="tableblock halign-center valign-middle">&lt;p class="tableblock">&lt;code>0xff&lt;/code>&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">impdep2&lt;/p>&lt;/td>
&lt;td class="tableblock halign-left valign-top">&lt;p class="tableblock">为特定硬件面预留的语言后门&lt;/p>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="sect1">
&lt;h2 id="_参考资料">参考资料&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-6.html" target="_blank" rel="noopener">Chapter 6. The Java Virtual Machine Instruction Set&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Java_bytecode" target="_blank" rel="noopener">Java bytecode&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/List_of_Java_bytecode_instructions" target="_blank" rel="noopener">List of Java bytecode instructions&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Avro、ProtoBuf、Thrift 的模式演进之法【翻译】</title><link>https://www.diguage.com/post/schema-evolution-in-avro-protobuf-thrift/</link><pubDate>Sat, 27 Aug 2022 08:30:43 +0800</pubDate><guid>https://www.diguage.com/post/schema-evolution-in-avro-protobuf-thrift/</guid><description>&lt;div class="sidebarblock">
&lt;div class="content">
&lt;div class="paragraph">
&lt;p>前面系统研究了 Hessian 序列化协议。并以此为契机，顺带实例对比了 Hessian、MessagePack 和 JSON 的序列化。早在 2012 年，Martin Kleppmann 就写了一篇文章 &lt;a href="https://martin.kleppmann.com/2012/12/05/schema-evolution-in-avro-protocol-buffers-thrift.html" target="_blank" rel="noopener">《Schema evolution in Avro, Protocol Buffers and Thrift》&lt;/a>，也是基于实例，对比了 Avro、ProtoBuf、Thrift 的差别。现在翻译出来，方便做系列研究。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>整个“序列化系列”目录如下：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a> — Hessian 序列化协议的中文翻译版。根据后面的“协议解释与实战”系列文章，增加了协议内容错误提示。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/" target="_blank" rel="noopener">Hessian 协议解释与实战（一）：布尔、日期、浮点数与整数&lt;/a> — 介绍布尔型数据、日期类型、浮点类型数据和整数类型数据等四种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-2/" target="_blank" rel="noopener">Hessian 协议解释与实战（二）：长整型、二进制数据与 Null&lt;/a> — 介绍长整数类型数据、二进制数据和 &lt;code>null&lt;/code> 等三种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-3/" target="_blank" rel="noopener">Hessian 协议解释与实战（三）：字符串&lt;/a> — 专门介绍了关于字符串的处理。由于字符串需要铺垫的基础知识比较多，处理细节也有繁琐，所以单独成篇来介绍。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-source-analysis-for-java/" target="_blank" rel="noopener">Hessian 源码分析（Java）&lt;/a> — 开始第四篇分析之前，先来介绍一下 Hessian 的源码实现。方便后续展开说明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-4/" target="_blank" rel="noopener">Hessian 协议解释与实战（四）：数组与集合&lt;/a> — 铺垫了一些关于实例对象的处理，重点介绍关于数组和集合的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-5/" target="_blank" rel="noopener">Hessian 协议解释与实战（五）：对象与映射&lt;/a> — 重点介绍关于对象与映射的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-vs-msgpack-vs-json/" target="_blank" rel="noopener">Hessian、Msgpack 和 JSON 实例对比&lt;/a> — 用实例对比 JSON、Hessian 和 MessagePack 的区别。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/schema-evolution-in-avro-protobuf-thrift" target="_blank" rel="noopener">Avro、ProtoBuf、Thrift 的模式演进之路&lt;/a> — 翻译的 Martin Kleppmann 的文章，重点对比了 Avro、ProtoBuf、Thrift 的序列化处理思路。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Hessian、Msgpack 和 JSON 实例对比</title><link>https://www.diguage.com/post/hessian-vs-msgpack-vs-json/</link><pubDate>Fri, 05 Aug 2022 11:28:03 +0800</pubDate><guid>https://www.diguage.com/post/hessian-vs-msgpack-vs-json/</guid><description>&lt;div class="paragraph">
&lt;p>前段时间，翻译了 Hessian 2.0 的序列化协议，发布在了 &lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a>。但是，其中有很多言语不详之处。所以，接下来会用几篇文章来详细解释并实践一下 Hessian 序列化协议，以求做到知其然知其所以然。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>目录如下：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a> — Hessian 序列化协议的中文翻译版。根据后面的“协议解释与实战”系列文章，增加了协议内容错误提示。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/" target="_blank" rel="noopener">Hessian 协议解释与实战（一）：布尔、日期、浮点数与整数&lt;/a> — 介绍布尔型数据、日期类型、浮点类型数据和整数类型数据等四种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-2/" target="_blank" rel="noopener">Hessian 协议解释与实战（二）：长整型、二进制数据与 Null&lt;/a> — 介绍长整数类型数据、二进制数据和 &lt;code>null&lt;/code> 等三种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-3/" target="_blank" rel="noopener">Hessian 协议解释与实战（三）：字符串&lt;/a> — 专门介绍了关于字符串的处理。由于字符串需要铺垫的基础知识比较多，处理细节也有繁琐，所以单独成篇来介绍。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-source-analysis-for-java/" target="_blank" rel="noopener">Hessian 源码分析（Java）&lt;/a> — 开始第四篇分析之前，先来介绍一下 Hessian 的源码实现。方便后续展开说明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-4/" target="_blank" rel="noopener">Hessian 协议解释与实战（四）：数组与集合&lt;/a> — 铺垫了一些关于实例对象的处理，重点介绍关于数组和集合的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-5/" target="_blank" rel="noopener">Hessian 协议解释与实战（五）：对象与映射&lt;/a> — 重点介绍关于对象与映射的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-vs-msgpack-vs-json/" target="_blank" rel="noopener">Hessian、Msgpack 和 JSON 实例对比&lt;/a> — 用实例对比 JSON、Hessian 和 MessagePack 的区别。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/schema-evolution-in-avro-protobuf-thrift" target="_blank" rel="noopener">Avro、ProtoBuf、Thrift 的模式演进之路&lt;/a> — 翻译的 Martin Kleppmann 的文章，重点对比了 Avro、ProtoBuf、Thrift 的序列化处理思路。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;hr/>
&lt;div class="paragraph">
&lt;p>本文用实际来对比一下 JSON、Hessian 和 MessagePack 的区别。&lt;/p>
&lt;/div></description></item><item><title>Hessian 协议解释与实战（五）：对象与映射</title><link>https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-5/</link><pubDate>Tue, 31 May 2022 16:02:13 +0800</pubDate><guid>https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-5/</guid><description>&lt;div class="paragraph">
&lt;p>前段时间，翻译了 Hessian 2.0 的序列化协议，发布在了 &lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a>。但是，其中有很多言语不详之处。所以，接下来会用几篇文章来详细解释并实践一下 Hessian 序列化协议，以求做到知其然知其所以然。目录如下：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a> — Hessian 序列化协议的中文翻译版。根据后面的“协议解释与实战”系列文章，增加了协议内容错误提示。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/" target="_blank" rel="noopener">Hessian 协议解释与实战（一）：布尔、日期、浮点数与整数&lt;/a> — 介绍布尔型数据、日期类型、浮点类型数据和整数类型数据等四种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-2/" target="_blank" rel="noopener">Hessian 协议解释与实战（二）：长整型、二进制数据与 Null&lt;/a> — 介绍长整数类型数据、二进制数据和 &lt;code>null&lt;/code> 等三种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-3/" target="_blank" rel="noopener">Hessian 协议解释与实战（三）：字符串&lt;/a> — 专门介绍了关于字符串的处理。由于字符串需要铺垫的基础知识比较多，处理细节也有繁琐，所以单独成篇来介绍。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-source-analysis-for-java/" target="_blank" rel="noopener">Hessian 源码分析（Java）&lt;/a> — 开始第四篇分析之前，先来介绍一下 Hessian 的源码实现。方便后续展开说明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-4/" target="_blank" rel="noopener">Hessian 协议解释与实战（四）：数组与集合&lt;/a> — 铺垫了一些关于实例对象的处理，重点介绍关于数组和集合的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-5/" target="_blank" rel="noopener">Hessian 协议解释与实战（五）：对象与映射&lt;/a> — 重点介绍关于对象与映射的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-vs-msgpack-vs-json/" target="_blank" rel="noopener">Hessian、Msgpack 和 JSON 实例对比&lt;/a> — 用实例对比 JSON、Hessian 和 MessagePack 的区别。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/schema-evolution-in-avro-protobuf-thrift" target="_blank" rel="noopener">Avro、ProtoBuf、Thrift 的模式演进之路&lt;/a> — 翻译的 Martin Kleppmann 的文章，重点对比了 Avro、ProtoBuf、Thrift 的序列化处理思路。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;hr/>
&lt;div class="paragraph">
&lt;p>在上一篇文章 &lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-4/" target="_blank" rel="noopener">Hessian 协议解释与实战（四）：数组与集合&lt;/a> 中研究了数组和集合的处理方式。接下来介绍对象和映射的处理。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_基础工具方法">基础工具方法&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>基础工具方法就不再赘述，请直接参考 &lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/#helper-methods" target="_blank" rel="noopener">Hessian 协议解释与实战（一）：基础工具方法&lt;/a> 中提到的几个方法。&lt;/p>
&lt;/div></description></item><item><title>Hessian 协议解释与实战（四）：数组与集合</title><link>https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-4/</link><pubDate>Thu, 26 May 2022 18:01:43 +0800</pubDate><guid>https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-4/</guid><description>&lt;div class="paragraph">
&lt;p>前段时间，翻译了 Hessian 2.0 的序列化协议，发布在了 &lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a>。但是，其中有很多言语不详之处。所以，接下来会用几篇文章来详细解释并实践一下 Hessian 序列化协议，以求做到知其然知其所以然。目录如下：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a> — Hessian 序列化协议的中文翻译版。根据后面的“协议解释与实战”系列文章，增加了协议内容错误提示。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/" target="_blank" rel="noopener">Hessian 协议解释与实战（一）：布尔、日期、浮点数与整数&lt;/a> — 介绍布尔型数据、日期类型、浮点类型数据和整数类型数据等四种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-2/" target="_blank" rel="noopener">Hessian 协议解释与实战（二）：长整型、二进制数据与 Null&lt;/a> — 介绍长整数类型数据、二进制数据和 &lt;code>null&lt;/code> 等三种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-3/" target="_blank" rel="noopener">Hessian 协议解释与实战（三）：字符串&lt;/a> — 专门介绍了关于字符串的处理。由于字符串需要铺垫的基础知识比较多，处理细节也有繁琐，所以单独成篇来介绍。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-source-analysis-for-java/" target="_blank" rel="noopener">Hessian 源码分析（Java）&lt;/a> — 开始第四篇分析之前，先来介绍一下 Hessian 的源码实现。方便后续展开说明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-4/" target="_blank" rel="noopener">Hessian 协议解释与实战（四）：数组与集合&lt;/a> — 铺垫了一些关于实例对象的处理，重点介绍关于数组和集合的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-5/" target="_blank" rel="noopener">Hessian 协议解释与实战（五）：对象与映射&lt;/a> — 重点介绍关于对象与映射的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-vs-msgpack-vs-json/" target="_blank" rel="noopener">Hessian、Msgpack 和 JSON 实例对比&lt;/a> — 用实例对比 JSON、Hessian 和 MessagePack 的区别。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/schema-evolution-in-avro-protobuf-thrift" target="_blank" rel="noopener">Avro、ProtoBuf、Thrift 的模式演进之路&lt;/a> — 翻译的 Martin Kleppmann 的文章，重点对比了 Avro、ProtoBuf、Thrift 的序列化处理思路。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;hr/>
&lt;div class="paragraph">
&lt;p>在上一篇文章 &lt;a href="https://www.diguage.com/post/hessian-source-analysis-for-java/" target="_blank" rel="noopener">Hessian 源码分析（Java）&lt;/a> 对 Hessian 的 Java 实现做了一个概要的分析，对处理流程以及整体架构做了一个简单的分析。接下来，回到主题，继续来解释 Hessian 序列化协议。这篇文章，我们来重点分析一下数组与集合相关的操作。&lt;/p>
&lt;/div></description></item><item><title>Hessian 源码分析（Java）</title><link>https://www.diguage.com/post/hessian-source-analysis-for-java/</link><pubDate>Sat, 21 May 2022 09:39:44 +0800</pubDate><guid>https://www.diguage.com/post/hessian-source-analysis-for-java/</guid><description>&lt;div class="paragraph">
&lt;p>前面通过几篇文章，解释并实践了一下 Hessian 的序列化协议。文章目录如下：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a> — Hessian 序列化协议的中文翻译版。根据后面的“协议解释与实战”系列文章，增加了协议内容错误提示。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/" target="_blank" rel="noopener">Hessian 协议解释与实战（一）：布尔、日期、浮点数与整数&lt;/a> — 介绍布尔型数据、日期类型、浮点类型数据和整数类型数据等四种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-2/" target="_blank" rel="noopener">Hessian 协议解释与实战（二）：长整型、二进制数据与 Null&lt;/a> — 介绍长整数类型数据、二进制数据和 &lt;code>null&lt;/code> 等三种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-3/" target="_blank" rel="noopener">Hessian 协议解释与实战（三）：字符串&lt;/a> — 专门介绍了关于字符串的处理。由于字符串需要铺垫的基础知识比较多，处理细节也有繁琐，所以单独成篇来介绍。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-source-analysis-for-java/" target="_blank" rel="noopener">Hessian 源码分析（Java）&lt;/a> — 开始第四篇分析之前，先来介绍一下 Hessian 的源码实现。方便后续展开说明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-4/" target="_blank" rel="noopener">Hessian 协议解释与实战（四）：数组与集合&lt;/a> — 铺垫了一些关于实例对象的处理，重点介绍关于数组和集合的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-5/" target="_blank" rel="noopener">Hessian 协议解释与实战（五）：对象与映射&lt;/a> — 重点介绍关于对象与映射的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-vs-msgpack-vs-json/" target="_blank" rel="noopener">Hessian、Msgpack 和 JSON 实例对比&lt;/a> — 用实例对比 JSON、Hessian 和 MessagePack 的区别。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/schema-evolution-in-avro-protobuf-thrift" target="_blank" rel="noopener">Avro、ProtoBuf、Thrift 的模式演进之路&lt;/a> — 翻译的 Martin Kleppmann 的文章，重点对比了 Avro、ProtoBuf、Thrift 的序列化处理思路。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;hr/>
&lt;div class="paragraph">
&lt;p>该系列第四篇文章准备详细介绍一下 Hessian 对对象、链表以及 &lt;code>Map&lt;/code> 等处理。但是，越调试代码，越发觉得应该先对 Hessian 的实现做一个源码分析。于是，就有了本文。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>这里有几点需要声明一下：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>在上面“解释与实战”系列文章中提到的代码就不再重复说明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过“解释与实战”系列文章，大家应该可以领略到，处理序列化有大量的细节。但是，本文并不打算涉及。本文重点是介绍 Hessian 的 Java 实现的架构蓝图。相当于给指明一条路，沿着这条路，大家就可以探索 Hessian 的各种细节。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本文的介绍，全部基于 Hessian 4.0.60 的源码。由于没有找到 Hessian 的仓库，D瓜哥从 Hessian 的网站下，下载了源码包，解压后发布在了 GitHub 上： &lt;a href="https://github.com/diguage/hessian" target="_blank" rel="noopener">Hessian — The source code of Hessian Library.&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Hessian 协议解释与实战（三）：字符串</title><link>https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-3/</link><pubDate>Wed, 04 May 2022 16:09:05 +0000</pubDate><guid>https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-3/</guid><description>&lt;div class="paragraph">
&lt;p>前段时间，翻译了 Hessian 2.0 的序列化协议，发布在了 &lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a>。但是，其中有很多言语不详之处。所以，接下来会用几篇文章来详细解释并实践一下 Hessian 序列化协议，以求做到知其然知其所以然。目录如下：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a> — Hessian 序列化协议的中文翻译版。根据后面的“协议解释与实战”系列文章，增加了协议内容错误提示。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/" target="_blank" rel="noopener">Hessian 协议解释与实战（一）：布尔、日期、浮点数与整数&lt;/a> — 介绍布尔型数据、日期类型、浮点类型数据和整数类型数据等四种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-2/" target="_blank" rel="noopener">Hessian 协议解释与实战（二）：长整型、二进制数据与 Null&lt;/a> — 介绍长整数类型数据、二进制数据和 &lt;code>null&lt;/code> 等三种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-3/" target="_blank" rel="noopener">Hessian 协议解释与实战（三）：字符串&lt;/a> — 专门介绍了关于字符串的处理。由于字符串需要铺垫的基础知识比较多，处理细节也有繁琐，所以单独成篇来介绍。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-source-analysis-for-java/" target="_blank" rel="noopener">Hessian 源码分析（Java）&lt;/a> — 开始第四篇分析之前，先来介绍一下 Hessian 的源码实现。方便后续展开说明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-4/" target="_blank" rel="noopener">Hessian 协议解释与实战（四）：数组与集合&lt;/a> — 铺垫了一些关于实例对象的处理，重点介绍关于数组和集合的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-5/" target="_blank" rel="noopener">Hessian 协议解释与实战（五）：对象与映射&lt;/a> — 重点介绍关于对象与映射的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-vs-msgpack-vs-json/" target="_blank" rel="noopener">Hessian、Msgpack 和 JSON 实例对比&lt;/a> — 用实例对比 JSON、Hessian 和 MessagePack 的区别。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/schema-evolution-in-avro-protobuf-thrift" target="_blank" rel="noopener">Avro、ProtoBuf、Thrift 的模式演进之路&lt;/a> — 翻译的 Martin Kleppmann 的文章，重点对比了 Avro、ProtoBuf、Thrift 的序列化处理思路。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;hr/>
&lt;div class="paragraph">
&lt;p>在上一篇文章 &lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-2/" target="_blank" rel="noopener">Hessian 协议解释与实战（二）：长整型、二进制数据与 Null&lt;/a> 中研究了长整型、二进制数据与 &lt;code>null&lt;/code> 等三种数据类型的处理方式。接下来，我们再来介绍字符串的处理情况。&lt;/p>
&lt;/div></description></item><item><title>Hessian 协议解释与实战（二）：长整型、二进制数据与 Null</title><link>https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-2/</link><pubDate>Tue, 03 May 2022 16:09:15 +0800</pubDate><guid>https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-2/</guid><description>&lt;div class="paragraph">
&lt;p>前段时间，翻译了 Hessian 2.0 的序列化协议，发布在了 &lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a>。但是，其中有很多言语不详之处。所以，接下来会用几篇文章来详细解释并实践一下 Hessian 序列化协议，以求做到知其然知其所以然。目录如下：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a> — Hessian 序列化协议的中文翻译版。根据后面的“协议解释与实战”系列文章，增加了协议内容错误提示。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/" target="_blank" rel="noopener">Hessian 协议解释与实战（一）：布尔、日期、浮点数与整数&lt;/a> — 介绍布尔型数据、日期类型、浮点类型数据和整数类型数据等四种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-2/" target="_blank" rel="noopener">Hessian 协议解释与实战（二）：长整型、二进制数据与 Null&lt;/a> — 介绍长整数类型数据、二进制数据和 &lt;code>null&lt;/code> 等三种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-3/" target="_blank" rel="noopener">Hessian 协议解释与实战（三）：字符串&lt;/a> — 专门介绍了关于字符串的处理。由于字符串需要铺垫的基础知识比较多，处理细节也有繁琐，所以单独成篇来介绍。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-source-analysis-for-java/" target="_blank" rel="noopener">Hessian 源码分析（Java）&lt;/a> — 开始第四篇分析之前，先来介绍一下 Hessian 的源码实现。方便后续展开说明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-4/" target="_blank" rel="noopener">Hessian 协议解释与实战（四）：数组与集合&lt;/a> — 铺垫了一些关于实例对象的处理，重点介绍关于数组和集合的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-5/" target="_blank" rel="noopener">Hessian 协议解释与实战（五）：对象与映射&lt;/a> — 重点介绍关于对象与映射的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-vs-msgpack-vs-json/" target="_blank" rel="noopener">Hessian、Msgpack 和 JSON 实例对比&lt;/a> — 用实例对比 JSON、Hessian 和 MessagePack 的区别。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/schema-evolution-in-avro-protobuf-thrift" target="_blank" rel="noopener">Avro、ProtoBuf、Thrift 的模式演进之路&lt;/a> — 翻译的 Martin Kleppmann 的文章，重点对比了 Avro、ProtoBuf、Thrift 的序列化处理思路。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;hr/>
&lt;div class="paragraph">
&lt;p>在上一篇文章 &lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/" target="_blank" rel="noopener">Hessian 协议解释与实战（一）&lt;/a> 中研究了布尔型数据、日期类型、浮点类型数据、整数类型数据等四种数据类型的处理方式。接下来，我们再来介绍长整数类型数据、二进制数据和 &lt;code>null&lt;/code> 的处理情况。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_基础工具方法">基础工具方法&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>基础工具方法就不再赘述，请直接参考 &lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/#helper-methods" target="_blank" rel="noopener">Hessian 协议解释与实战（一）：布尔、日期、浮点数与整数：基础工具方法&lt;/a> 中提到的几个方法。&lt;/p>
&lt;/div></description></item><item><title>Hessian 协议解释与实战（一）：布尔、日期、浮点数与整数</title><link>https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/</link><pubDate>Mon, 02 May 2022 17:22:01 +0800</pubDate><guid>https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/</guid><description>&lt;div class="paragraph">
&lt;p>前段时间，翻译了 Hessian 2.0 的序列化协议，发布在了 &lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a>。但是，其中有很多言语不详之处。所以，接下来会用几篇文章来详细解释并实践一下 Hessian 序列化协议，以求做到知其然知其所以然。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>目录如下：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a> — Hessian 序列化协议的中文翻译版。根据后面的“协议解释与实战”系列文章，增加了协议内容错误提示。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/" target="_blank" rel="noopener">Hessian 协议解释与实战（一）：布尔、日期、浮点数与整数&lt;/a> — 介绍布尔型数据、日期类型、浮点类型数据和整数类型数据等四种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-2/" target="_blank" rel="noopener">Hessian 协议解释与实战（二）：长整型、二进制数据与 Null&lt;/a> — 介绍长整数类型数据、二进制数据和 &lt;code>null&lt;/code> 等三种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-3/" target="_blank" rel="noopener">Hessian 协议解释与实战（三）：字符串&lt;/a> — 专门介绍了关于字符串的处理。由于字符串需要铺垫的基础知识比较多，处理细节也有繁琐，所以单独成篇来介绍。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-source-analysis-for-java/" target="_blank" rel="noopener">Hessian 源码分析（Java）&lt;/a> — 开始第四篇分析之前，先来介绍一下 Hessian 的源码实现。方便后续展开说明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-4/" target="_blank" rel="noopener">Hessian 协议解释与实战（四）：数组与集合&lt;/a> — 铺垫了一些关于实例对象的处理，重点介绍关于数组和集合的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-5/" target="_blank" rel="noopener">Hessian 协议解释与实战（五）：对象与映射&lt;/a> — 重点介绍关于对象与映射的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-vs-msgpack-vs-json/" target="_blank" rel="noopener">Hessian、Msgpack 和 JSON 实例对比&lt;/a> — 用实例对比 JSON、Hessian 和 MessagePack 的区别。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/schema-evolution-in-avro-protobuf-thrift" target="_blank" rel="noopener">Avro、ProtoBuf、Thrift 的模式演进之路&lt;/a> — 翻译的 Martin Kleppmann 的文章，重点对比了 Avro、ProtoBuf、Thrift 的序列化处理思路。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;hr/>
&lt;div class="sect1">
&lt;h2 id="helper-methods">基础工具方法&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>Hessian 序列化之后的数据，都是字节数组，为了方便查看字节数组的二进制形式和十六进制形式，在正式开始之前，先介绍一下期间用到的辅助工具方法。闲言少叙，直接上代码：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight nowrap">&lt;code data-lang="java">&lt;span class="cm">/**
 * 创建 Hessian2Output 对象，以便用于序列化
 *
 * @author D瓜哥 · &lt;a href="https://www.diguage.com/" target="_blank">https://www.diguage.com/&lt;/a>
 */&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="nc">Hessian2Output&lt;/span> &lt;span class="nf">getHessian2Output&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">OutputStream&lt;/span> &lt;span class="n">stream&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nc">SerializerFactory&lt;/span> &lt;span class="n">serializerFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nc">SerializerFactory&lt;/span>&lt;span class="o">();&lt;/span>
 &lt;span class="n">serializerFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAllowNonSerializable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="nc">Hessian2Output&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nc">Hessian2Output&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSerializerFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">serializerFactory&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>

&lt;span class="cm">/**
 * 打印字节数组
 *
 * @author D瓜哥 · &lt;a href="https://www.diguage.com/" target="_blank">https://www.diguage.com/&lt;/a>
 */&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">printBytes&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">byte&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nc">String&lt;/span> &lt;span class="n">bitx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toBinaryString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">Byte&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toUnsignedInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">));&lt;/span>
 &lt;span class="nc">String&lt;/span> &lt;span class="n">zbits&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">format&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;%8s&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">bitx&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">replace&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="sc">&amp;#39; &amp;#39;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="sc">&amp;#39;0&amp;#39;&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nc">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;%4d 0x%02X %8s %c %n&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">zbits&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nc">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;%4d 0x%02X %8s %n&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">zbits&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>

&lt;span class="cm">/**
 * 将 long 转化成二进制字符串（前面补0）
 *
 * @author D瓜哥 · &lt;a href="https://www.diguage.com/" target="_blank">https://www.diguage.com/&lt;/a>
 */&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="nc">String&lt;/span> &lt;span class="nf">getBinaryString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nc">String&lt;/span> &lt;span class="n">bits&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">Long&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toBinaryString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="kt">char&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">chars&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">format&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;%64s&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">bits&lt;/span>&lt;span class="o">)&lt;/span>
 &lt;span class="o">.&lt;/span>&lt;span class="na">replace&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="sc">&amp;#39; &amp;#39;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="sc">&amp;#39;0&amp;#39;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">toCharArray&lt;/span>&lt;span class="o">();&lt;/span>
 &lt;span class="nc">StringBuilder&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nc">StringBuilder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">64&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">chars&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">chars&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]);&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">7&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">chars&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;,&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>

&lt;span class="cm">/**
 * 将 int 转化成二进制字符串（前面补0）
 *
 * @author D瓜哥 · &lt;a href="https://www.diguage.com/" target="_blank">https://www.diguage.com/&lt;/a>
 */&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="nc">String&lt;/span> &lt;span class="nf">getBinaryString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="nc">String&lt;/span> &lt;span class="n">bits&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toBinaryString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="kt">char&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">chars&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">format&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;%32s&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">bits&lt;/span>&lt;span class="o">)&lt;/span>
 &lt;span class="o">.&lt;/span>&lt;span class="na">replace&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="sc">&amp;#39; &amp;#39;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="sc">&amp;#39;0&amp;#39;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">toCharArray&lt;/span>&lt;span class="o">();&lt;/span>
 &lt;span class="nc">StringBuilder&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nc">StringBuilder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">64&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">chars&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">chars&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]);&lt;/span>
 &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">7&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">chars&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
 &lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;,&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="o">}&lt;/span>
 &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>Hessian 2.0 序列化协议（中文版）</title><link>https://www.diguage.com/post/hessian-serialization-protocol/</link><pubDate>Wed, 20 Apr 2022 17:30:08 +0800</pubDate><guid>https://www.diguage.com/post/hessian-serialization-protocol/</guid><description>&lt;div class="paragraph">
&lt;p>公司在微服务系统中，序列化协议大多数使用 &lt;a href="https://msgpack.org/" target="_blank" rel="noopener">MessagePack&lt;/a>。但是，由于 MessagePack 设计限制，导致微服务接口在增减参数时，只能在最后操作。但是，由于个人操作，难免失误，结果造成因为增减字段导致的事故层出不穷。最近，一些条件成熟，准备推动部门将序列化协议切换到 Hessian。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>原以为，切换到 Hessian 就可以万事大吉。但是，在和同事的沟通中发现，同事反馈，Hessian 本身也有一些限制。为了对 Hessian 有一个更深入的了解，干脆就把 Hessian 序列化协议读一遍。看协议，文字不多，干脆就把协议完整翻译一遍。闲言少叙，正文开始。&lt;/p>
&lt;/div>
&lt;hr/>
&lt;div class="sect1 text-center">
&lt;h2 id="_hessian_2_0_序列化协议">&lt;span class="big">&lt;strong>Hessian 2.0 序列化协议&lt;/strong>&lt;/span>&lt;/h2>
&lt;div class="sectionbody">

&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_协议解释">协议解释&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>针对该协议有很多言语不详，甚至模糊不清之处，专门做了一些解释和实践，叙述系列文章，用于辅助消化理解。目录如下：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-serialization-protocol/" target="_blank" rel="noopener">Hessian 2.0 序列化协议（中文版）&lt;/a> — Hessian 序列化协议的中文翻译版。根据后面的“协议解释与实战”系列文章，增加了协议内容错误提示。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/" target="_blank" rel="noopener">Hessian 协议解释与实战（一）：布尔、日期、浮点数与整数&lt;/a> — 介绍布尔型数据、日期类型、浮点类型数据和整数类型数据等四种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-2/" target="_blank" rel="noopener">Hessian 协议解释与实战（二）：长整型、二进制数据与 Null&lt;/a> — 介绍长整数类型数据、二进制数据和 &lt;code>null&lt;/code> 等三种类型的数据的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-3/" target="_blank" rel="noopener">Hessian 协议解释与实战（三）：字符串&lt;/a> — 专门介绍了关于字符串的处理。由于字符串需要铺垫的基础知识比较多，处理细节也有繁琐，所以单独成篇来介绍。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-source-analysis-for-java/" target="_blank" rel="noopener">Hessian 源码分析（Java）&lt;/a> — 开始第四篇分析之前，先来介绍一下 Hessian 的源码实现。方便后续展开说明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-4/" target="_blank" rel="noopener">Hessian 协议解释与实战（四）：数组与集合&lt;/a> — 铺垫了一些关于实例对象的处理，重点介绍关于数组和集合的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-5/" target="_blank" rel="noopener">Hessian 协议解释与实战（五）：对象与映射&lt;/a> — 重点介绍关于对象与映射的相关处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/hessian-vs-msgpack-vs-json/" target="_blank" rel="noopener">Hessian、Msgpack 和 JSON 实例对比&lt;/a> — 用实例对比 JSON、Hessian 和 MessagePack 的区别。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.diguage.com/post/schema-evolution-in-avro-protobuf-thrift" target="_blank" rel="noopener">Avro、ProtoBuf、Thrift 的模式演进之路&lt;/a> — 翻译的 Martin Kleppmann 的文章，重点对比了 Avro、ProtoBuf、Thrift 的序列化处理思路。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>日志最佳实践探究</title><link>https://www.diguage.com/post/logging-best-practices/</link><pubDate>Wed, 14 Jul 2021 10:52:58 +0800</pubDate><guid>https://www.diguage.com/post/logging-best-practices/</guid><description>&lt;div class="paragraph">
&lt;p>加入公司以来，参与了很多个项目的开发维护；也排查处理过很多线上问题；为了写 Mock 测试，也专门去日志系统上扒拉过不少日志等等。在整个过程中，对日志的认识有了不少更深刻的认识和体会。也发现不少问题。这里先从存在的问题展开论述。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_日志存在的问题">日志存在的问题&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>从个人的眼光上来看，当前的系统存在如下问题：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>必要日志没有打印出来，导致在追踪问题或测试代码时，带来不必要的麻烦。比如查看一个接口的返回值用于 Mock 测试；再比如 RPC 调用报错，返回值以及错误信息没有打印到日志中，不知道具体错误原因是什么。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>日志抽取中日志路径配置错误，导致日志重复收集，带来不必要的处理和存储成本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>日志代码不规范，导致不必要的性能消耗；或者大促时，日志降级不生效。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>日志框架繁多，造成造成冲突，遗漏部分日志。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>日志配置不规范，不利于日志的采集和清洗。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>日志和调用链路物理隔离，查看一个请求的整个调用链路上的日志非常不方便，不利于问题的快速排查和定位。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="paragraph">
&lt;p>&lt;em>大家的系统中，存在什么样的日志问题？欢迎留言交流讨论。&lt;/em>&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>针对这些问题，我觉得有些地方值得发力一下。然后，做了一些探索，总结一下，以备后续使用。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_日志最佳实践探索">日志最佳实践探索&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>对于日志的使用，相信所有的开发人员都比较清楚，网上也有大量资料，相关日志框架的官方文档，也写的非常详尽，这里就不再赘述。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>本文从一个角度对日志规范进行探究：&lt;strong>在排查问题时，能否通过日志来尽快地了解系统运行状态，定位问题原因？&lt;/strong>另外，由于 Java 的日志框架特别多，有一些比较容易迷惑的问题，尝试做出一点总结。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>系统运行后，不严格地说，再去观察系统运行状态，就类似于在黑夜中行走。此时，向你扔过来一块板砖🧱，那么，事后如何追责呢？&lt;/p>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/logging/throw-bug.jpg" alt="throw bug" width="95%"/>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>请问：你能否成功躲开这块叫做 Bug 的板砖🧱？&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>日志用来记录用户操作、系统运行状态等，是一个系统的重要组成部分。然而，由于日志通常不属于系统的核心功能，但是在日志对于排查问题，有无可替代的作用，理应得到所有开发人员的重视（不重视，怎么甩锅？！）！&lt;/p>
&lt;/div>
&lt;div class="quoteblock">
&lt;blockquote>
&lt;div class="paragraph">
&lt;p>If dog is a man’s best friend, &lt;br/>
logs are software engineer’s best friend.&lt;/p>
&lt;/div>
&lt;/blockquote>
&lt;div class="attribution">
— Geshan Manandhar&lt;br/>
&lt;cite>Logging best practices&lt;/cite>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>好的日志可以帮助系统的开发和运维人员：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>了解线上系统的运行状态&lt;/p>
&lt;/li>
&lt;li>
&lt;p>快速准确定位线上问题&lt;/p>
&lt;/li>
&lt;li>
&lt;p>发现系统瓶颈&lt;/p>
&lt;/li>
&lt;li>
&lt;p>预警系统潜在风险&lt;/p>
&lt;/li>
&lt;li>
&lt;p>挖掘产品最大价值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以将一个流程完整串起来（比如orderId）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>……&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/logging/bug-goto-land.jpg" alt="bug goto land" width="95%"/>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>不好的日志导致：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>对系统的运行状态一知半解，甚至一无所知&lt;/p>
&lt;/li>
&lt;li>
&lt;p>系统出现问题无法定位，或者需要花费巨大的时间和精力&lt;/p>
&lt;/li>
&lt;li>
&lt;p>无法发现系统瓶颈，不知优化从何做起&lt;/p>
&lt;/li>
&lt;li>
&lt;p>无法基于日志对系统运行过程中的错误和潜在风险进行监控和报警&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对挖掘用户行为和提升产品价值毫无帮助&lt;/p>
&lt;/li>
&lt;li>
&lt;p>……&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>分布式锁之 Apache Curator InterProcessReadWriteLock</title><link>https://www.diguage.com/post/distributed-lock-apache-curator-interprocessreadwritelock/</link><pubDate>Wed, 22 Jul 2020 10:45:44 +0800</pubDate><guid>https://www.diguage.com/post/distributed-lock-apache-curator-interprocessreadwritelock/</guid><description>&lt;div class="paragraph">
&lt;p>在上一篇文章 &lt;a href="https://www.diguage.com/post/distributed-lock-apache-curator-interprocessmutex/">分布式锁之 Apache Curator InterProcessMutex&lt;/a> 中介绍了基于 ZooKeeper 实现的互斥锁。除此之外，还可以实现读写锁。这篇文章就来简要介绍一下 &lt;code>InterProcessReadWriteLock&lt;/code> 的实现原理。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>老规矩，先看看类的注释：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight">&lt;code data-lang="java">&lt;span class="cm">/**
 * &amp;lt;p&amp;gt;
 * A re-entrant read/write mutex that works across JVMs. Uses Zookeeper to hold the lock. All processes
 * in all JVMs that use the same lock path will achieve an inter-process critical section. Further, this mutex is
 * &amp;#34;fair&amp;#34; - each user will get the mutex in the order requested (from ZK&amp;#39;s point of view).
 * &amp;lt;/p&amp;gt;
 *
 * &amp;lt;p&amp;gt;
 * A read write lock maintains a pair of associated locks, one for read-only operations and one
 * for writing. The read lock may be held simultaneously by multiple reader processes, so long as
 * there are no writers. The write lock is exclusive.
 * &amp;lt;/p&amp;gt;
 *
 * &amp;lt;p&amp;gt;
 * &amp;lt;b&amp;gt;Reentrancy&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;
 * This lock allows both readers and writers to reacquire read or write locks in the style of a
 * re-entrant lock. Non-re-entrant readers are not allowed until all write locks held by the
 * writing thread/process have been released. Additionally, a writer can acquire the read lock, but not
 * vice-versa. If a reader tries to acquire the write lock it will never succeed.&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
 *
 * &amp;lt;b&amp;gt;Lock downgrading&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;
 * Re-entrancy also allows downgrading from the write lock to a read lock, by acquiring the write
 * lock, then the read lock and then releasing the write lock. However, upgrading from a read
 * lock to the write lock is not possible.
 * &amp;lt;/p&amp;gt;
 */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">InterProcessReadWriteLock&lt;/span>
&lt;span class="o">{&lt;/span>&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>分布式锁之 Apache Curator InterProcessMutex</title><link>https://www.diguage.com/post/distributed-lock-apache-curator-interprocessmutex/</link><pubDate>Tue, 21 Jul 2020 10:13:21 +0800</pubDate><guid>https://www.diguage.com/post/distributed-lock-apache-curator-interprocessmutex/</guid><description>&lt;div class="paragraph">
&lt;p>对分布式锁耳熟能详。不过，一直关注的是基于 Redis 实现的分布式锁。知道 ZooKeeper 也可以实现分布式锁。但是，原来的想法是把 Redis 那个思路切换到 ZooKeeper 上来实现就好。今天了解到 Apache Curator 内置了分布式锁的实现： &lt;code>InterProcessMutex&lt;/code>。查看了一下源码实现，发现跟基于 Redis 实现的源码相比，在思路上还是有很大不同的。所以，特别作文记录一下。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>先来看一下，整体流程：&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>&lt;span class="image">&lt;img src="https://www.diguage.com/images/distributed-system/InterProcessMutex-process.png" alt="InterProcessMutex process" width="95%"/>&lt;/span>&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>结合流程图和源码，加锁的过程是这样的：&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>先判断本地是否有锁数据，如果有则对锁定次数自增一下，然后返回 &lt;code>true&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果没有锁数据，则尝试获取锁：&lt;/p>
&lt;div class="olist loweralpha">
&lt;ol class="loweralpha" type="a">
&lt;li>
&lt;p>在指定路径下创建临时顺序节点&lt;/p>
&lt;/li>
&lt;li>
&lt;p>获取指定路径下，所有节点，检查自身是否是序号最小的节点：&lt;/p>
&lt;div class="olist lowerroman">
&lt;ol class="lowerroman" type="i">
&lt;li>
&lt;p>如果自身序号最小，则获得锁；否则&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果自身不是序号最小的节点，则通过 &lt;code>while&lt;/code> 自旋 + &lt;code>wait(times)&lt;/code> 不断尝试获取锁，直到成功。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>获得锁后，把锁信息缓存在本地 &lt;code>ConcurrentMap&amp;lt;Thread, LockData&amp;gt; threadData&lt;/code> 变量中，方便计算重入。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在 ZooKeeper 中的结构大致如下：&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>&lt;span class="image">&lt;img src="https://www.diguage.com/images/distributed-system/InterProcessMutex-structure.png" alt="InterProcessMutex structure" width="95%"/>&lt;/span>&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>下面我们逐个方法进行分析说明。先来看一下 &lt;code>InterProcessMutex&lt;/code> 的注释：&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="rouge highlight">&lt;code data-lang="java">&lt;span class="cm">/**
 * A re-entrant mutex that works across JVMs. Uses Zookeeper to hold the lock. All processes in all JVMs that
 * use the same lock path will achieve an inter-process critical section. Further, this mutex is
 * &amp;#34;fair&amp;#34; - each user will get the mutex in the order requested (from ZK&amp;#39;s point of view)
 */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">InterProcessMutex&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="nc">InterProcessLock&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nc">Revocable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nc">InterProcessMutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>在世界读书日，推荐书单</title><link>https://www.diguage.com/post/books-on-book-day/</link><pubDate>Thu, 23 Apr 2020 20:15:14 +0800</pubDate><guid>https://www.diguage.com/post/books-on-book-day/</guid><description>&lt;div class="paragraph">
&lt;p>今天是世界读书日，各种人都在推荐书单。D瓜哥也凑个热闹，水一篇文章，推荐一些书籍。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在前一段时间，D瓜哥已经写了一个书单： &lt;a href="https://www.diguage.com/post/java-concurrent-books/">推荐几本 Java 并发编程的书&lt;/a>。为了避免重复，上一个书单中推荐过的书籍，这次就不再重复推荐了。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>每年十二个月，D瓜哥就推荐 12 本书，每个月读一本想必压力也不算大。&lt;/p>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_如何阅读一本书">&lt;a href="https://book.douban.com/subject/1013208/" target="_blank" rel="noopener">如何阅读一本书？&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/books/how-to-read-a-book.jpg" alt="how to read a book" width="60%"/>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>D瓜哥在年初的时候，刚刚再次重读了这本书。而且，还写了一篇读书笔记： &lt;a href="https://www.diguage.com/post/how-to-read-a-book/">《如何阅读一本书？》之读书笔记&lt;/a>。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>如果喜欢读书，那么这本书绝对应该是首先阅读的第一本书。一句话总结一下：&lt;strong>用检视阅读的方法来快速筛选出你关注主题的书籍；用分析阅读的方法来吸收一本书的精华；用主题阅读的办法来对多本同一主题的书去伪存真，加工再输出。&lt;/strong>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_远见">&lt;a href="https://book.douban.com/subject/27609489/" target="_blank" rel="noopener">远见&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/books/the-long-view.jpg" alt="the long view" width="60%"/>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>D瓜哥在去年年末写的年终总结 &lt;a href="https://www.diguage.com/post/goodbye-2019-hello-2020/">“告别 2019，迎接 2020”&lt;/a> 中提到了这本书。考虑这本书的实用性和对自身发展的指导意义，所以决定再次推荐这本书。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在这本书中，作者将职业生涯分为：强势开局、聚焦长板和实现持续的影响力三个阶段。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在强势开局阶段，就像要开始一个汽车拉力赛，要努力加添燃料。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在聚焦长板阶段，要努力提高自己的核心竞争力，创造自己的制高点。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>在实现持续的影响力阶段，则要优化长尾效应，让自己持续保持领先。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>对于职业生涯有追求的小伙伴，尤其是在读大学生，一定要去尽早认真读一读这本书。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_思考快与慢">&lt;a href="https://book.douban.com/subject/10785583/" target="_blank" rel="noopener">思考，快与慢&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/books/thinking-fast-and-slow.jpg" alt="thinking fast and slow" width="60%"/>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>这是一本有关心理学方面的书籍。作者丹尼尔•卡尼曼因其与阿莫斯•特沃斯基在决策制定上的研究而荣获了 2002 年度的诺贝尔经济学奖。所以，这本书质量上肯定是有保证的。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>这本书主要是介绍认知心理学的。作者在书中，把人的认知分为系统一和系统二。系统一是那种不需要思考的，已经固化在我们基因中的反应，比如看见危险会跑路等；而系统二，则是需要深入思考才能有所收获的事情，比如在新税法下，计算个人应该缴纳的个人所得税。两个系统相辅相成，时刻影响着我们的生活，但我们却有些熟视无睹。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_穷查理宝典">&lt;a href="https://book.douban.com/subject/26831789/" target="_blank" rel="noopener">穷查理宝典&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/books/poor-charlies-almanack.jpg" alt="poor charlies almanack" width="60%"/>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>提起查理·芒格，也许有些人不知道是谁。（看这篇文章的读者估计都了解）但是，他的搭档估计是人尽皆知，那就是世界股神沃伦·巴菲特。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>虽然这本书不是查理·芒格书写的，里面的精华部分，却都是查理的演讲稿。通过这些演讲，你可以看到一个睿智的老人，如何在循循善诱地向你传授他的思维方法。查理给我们介绍了他的思维模型：逆向思维，多元思维模型，打造自己的核心圈，避免嫉妒效应，内部积分卡（用我们古人的话说就是反求诸己）等等。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_社会性动物">&lt;a href="https://book.douban.com/subject/2328458/" target="_blank" rel="noopener">社会性动物&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/books/the-social-animal.jpg" alt="the social animal" width="60%"/>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>D瓜哥是去年开始读这本书的，非常抱歉目前还没有读完。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>这本书是讲述社会心理学的，讲述在这个社会中，人与人之间是如何相互影响的。举一个典型的例子：你思考过吗，什么样的广告最能打动你吗？&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_事实">&lt;a href="https://book.douban.com/subject/33385402/" target="_blank" rel="noopener">事实&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/books/factfulness.jpg" alt="factfulness" width="60%"/>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>比尔·盖茨也推荐了这本书。我也是最近刚刚开始读这本书。还没有读完。就不做过多评价了。用一个问题，勾引一下你的兴趣：&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>问题：在全世界所有的低收入国家里面，有多少百分比的女孩能够上完小学？&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>选项：A. 20% B. 40% C. 60%&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>想知道答案，就快点去读这本书吧。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>最近更新：D瓜哥终于把这本书读完了：https://www.diguage.com/post/factfulness/[《事实》之读书笔记^]。&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="_人类简史">&lt;a href="https://book.douban.com/subject/26953606/" target="_blank" rel="noopener">人类简史&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="imageblock text-center">
&lt;div class="content">
&lt;img src="https://www.diguage.com/images/books/a-brief-history-of-humankind.jpg" alt="a brief history of humankind" width="60%"/>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>坦白讲，这本书D瓜哥才读了一半。但是，作者最近发表的一篇文章： &lt;a href="http://www.ruanyifeng.com/blog/2020/03/the-world-after-coronavirus.html">尤瓦尔·赫拉利《冠状病毒之后的世界》&lt;/a>，一个史学家站在历史发展的角度去看待疫情对世界发展的影响。由此可对赫拉利的思想窥得一斑。那么，如果感兴趣，他的成名大作《人类简史》就不得不读了。&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>最近因为疫情影响，在网上看到各种五毛的无脑言论，怼天怼地，仿佛中国要征服世界，征服宇宙一样，真是让人呵呵…&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>未来几十年时间里，中国未来寻求自身发展，还需要融入到整个世界经济中，在全世界产业链中，力争上游，占领高附加值的产业，比如芯片，5G，大飞机等等。怼这个，怼那个，只能让自己像二战时期的纳粹德国和日本，让自己四面树敌，最后被全世界群殴。&lt;/p>
&lt;/div></description></item></channel></rss>