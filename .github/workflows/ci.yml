name: GitHub Pages
on:
  push:
    branches:
      - master
jobs:
  deploy:
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idruns-on
    runs-on: ubuntu-latest
    steps:
      # https://github.com/actions/setup-node
      - name: Setup Node.js üï∏
        uses: actions/setup-node@v4
        with:
          # https://github.com/nvm-sh/nvm#long-term-support
          node-version: 'lts/*'

      # https://github.com/actions/checkout
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      # https://github.com/peaceiris/actions-hugo
      - name: Setup Hugo üêØ
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: '0.134.3'
          extended: true

      # https://github.com/ruby/setup-ruby
      - name: Setup Ruby üíé
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.4

      - name: Install AsciiDoctor üê∂
        run: |
          gem install asciidoctor
          gem install asciidoctor-diagram
          gem install asciidoctor-comment-links
          gem install rouge

#      - name: Install Graphviz üê∞
#        run: |
#          sudo apt update -y -m
#          sudo apt install -y python3-pip
#          # https://graphviz.org/
#          sudo apt install -y graphviz
#          # http://blockdiag.com/en/seqdiag/index.html
#          pip3 install seqdiag
#          # http://blockdiag.com/en/blockdiag/index.html
#          pip3 install blockdiag
#          # http://blockdiag.com/en/actdiag/index.html
#          pip3 install actdiag
#          # http://blockdiag.com/en/nwdiag/index.html
#          pip3 install nwdiag
#          # https://github.com/Deep-Symmetry/bytefield-svg
#          npm install -g bytefield-svg
#          # https://github.com/gtudan/bpmn-js-cmd
#          npm install -g bpmn-js-cmd
#          # Â±ïÁ§∫‰∏çÈúÄË¶Å PlantUMLÔºåÊ≥®ÈáäÊéâÔºåÂä†Âø´ÊûÑÂª∫ÈÄüÂ∫¶
#          # sudo apt -y install plantuml

#      - name: Install font üéÉ
#        run: |
#          mkdir $HOME/.fonts
#          cd $HOME/.fonts
#          wget https://github.com/diguage/open-fonts/releases/download/latest/SourceHanSerifSC-Regular.otf 1>/dev/null 2>&1 &
#          wget https://github.com/diguage/open-fonts/releases/download/latest/SourceHanSansSC-Regular.otf 1>/dev/null 2>&1 &
#          wget https://github.com/diguage/open-fonts/releases/download/latest/SourceCodePro-Regular.otf 1>/dev/null 2>&1 &
#          wget https://github.com/diguage/open-fonts/releases/download/latest/SourceCodePro-It.otf 1>/dev/null 2>&1 &
#          wget https://github.com/diguage/open-fonts/releases/download/latest/SourceCodePro-Bold.otf 1>/dev/null 2>&1 &
#          wget https://github.com/diguage/open-fonts/releases/download/latest/SourceCodePro-BoldIt.otf 1>/dev/null 2>&1 &
#          echo -e "[seqdiag]\nfontpath = $HOME/.fonts/SourceHanSerifSC-Regular.otf" > $HOME/.blockdiagrc
#          echo -e "\n[blockdiag]\nfontpath = $HOME/.fonts/SourceHanSerifSC-Regular.otf" >> $HOME/.blockdiagrc
#          echo -e "\n[actdiag]\nfontpath = $HOME/.fonts/SourceHanSerifSC-Regular.otf" >> $HOME/.blockdiagrc
#          echo -e "\n[nwdiag]\nfontpath = $HOME/.fonts/SourceHanSerifSC-Regular.otf" >> $HOME/.blockdiagrc
#          # Check result
#          echo "$(date +%T) wait for downloading fonts"
#          wait
#          echo "$(date +%T) finish downloading fonts"
#          ls -lh $HOME/.fonts
#          cat $HOME/.blockdiagrc

      - name: Run Hugo üèó
        run: |
          hugo --minify

      - name: Compress Style üç≠
        run: |
          npm install clean-css-cli -g
          cd public/css
          for f in `ls *.css`;
          do
            fn="${f%.*}.min.css";
            cleancss -o $fn $f
            rm -rf $f;
            mv $fn $f
          done

      # https://github.com/marketplace/actions/docker-setup-docker
      - name: Setup Docker üê≥
        uses: docker/setup-docker-action@v4

      - name: Add Watermark to Images üéñ
        run: |
          docker pull dpokidov/imagemagick
          
          cd public/images
          wget https://github.com/diguage/open-fonts/releases/download/latest/SourceCodePro-Semibold.otf
          BASEDIR=$( pwd )/
          
          # ÂºÇÊ≠•Âä†Ê∞¥Âç∞
          # JPG
          echo " "
          echo -e "\n\n$(date +%T) start to add watermark to JPG"
          find . -type f -name "*.jpg" | grep -v "goodbye-2019-hello-2020\|wx-jikerizhi-qrcode.jpg\|wx-jikerizhi.jpg\|wxpay.jpg\|avatar.jpg" | sed "s/.jpg$//g" | xargs -I {} docker run -v ${BASEDIR}:/imgs dpokidov/imagemagick -compress JPEG2000 -strip -thumbnail "1200x>" -quality 75 -font /imgs/SourceCodePro-Semibold.otf -pointsize 30 -gravity southeast -fill "#DE282A" -draw 'text 15,18 "https://www.diguage.com"' /imgs/{}.jpg /imgs/{}-mark.jpg 1>/dev/null 2>&1 &
          
          wait
          echo -e "$(date +%T) finish adding watermark to JPG...\n\n"
          echo " "
          find . -type f -name "*.jpg" | xargs ls -l -h
          echo " "
          echo -e "\n\n$(date +%T) --start to replace JPG----------------------"
          for f in `find . -type f -name "*-mark.jpg"`;
          do
            name=`echo $f | sed "s/-mark.jpg//g"`
            echo "replace ${f} to ${name}.jpeg"
            rm -rf "${name}.jpg"
            mv "${f}" "${name}.jpg"
          done
          echo -e "$(date +%T) --finish replacing JPG----------------------\n\n"
          echo " "
          find . -type f -name "*.jpg" | xargs ls -l -h
          
          # JPEG
          echo " "
          echo -e "\n\n$(date +%T) start to add watermark to JPEG"
          find . -type f -name "*.jpeg" | sed "s/.jpeg$//g" | xargs -I {} docker run -v ${BASEDIR}:/imgs dpokidov/imagemagick -compress JPEG2000 -strip -thumbnail "1200x>" -quality 75 -font /imgs/SourceCodePro-Semibold.otf -pointsize 30 -gravity southeast -fill "#DE282A" -draw 'text 15,18 "https://www.diguage.com"' /imgs/{}.jpeg /imgs/{}-mark.jpeg 1>/dev/null 2>&1 &
          
          wait
          echo -e "$(date +%T) finish adding watermark to JPEG...\n\n"
          echo " "
          find . -type f -name "*.jpeg" | xargs ls -l -h
          echo " "
          echo -e "\n\n$(date +%T) --start to replace JPEG----------------------"
          for f in `find . -type f -name "*-mark.jpeg"`;
          do
            name=`echo $f | sed "s/-mark.jpeg//g"`
            echo "replace ${f} to ${name}.jpeg"
            rm -rf "${name}.jpeg"
            mv "${f}" "${name}.jpeg"
          done
          echo -e "$(date +%T) --finish replacing JPEG----------------------\n\n"
          echo " "
          find . -type f -name "*.jpeg" | xargs ls -l -h

#          # PNG
#          echo " "
#          echo -e "\n\n$(date +%T) start to add watermark to PNG"
#          find . -type f -name "*.png" | grep -v "alipay.png\|wxpay.png" | sed "s/.png$//g" | xargs -I {} docker run -v ${BASEDIR}:/imgs dpokidov/imagemagick -strip -resize 1200x -define png:compression-level=9 -define png:exclude-chunk=all -define png:filter-type=1 -font /imgs/SourceCodePro-Semibold.otf -pointsize 30 -gravity southeast -fill "#DE282A" -draw 'text 15,18 "https://www.diguage.com"' /imgs/{}.png /imgs/{}-mark.png 1>/dev/null 2>&1 &
#
#          wait
#          echo -e "$(date +%T) finish adding watermark to PNG...\n\n"
#          echo " "
#          find . -type f -name "*.png" | xargs ls -l -h
#          echo " "
#          echo -e "\n\n$(date +%T) --start to replace PNG----------------------"
#          for f in `find . -type f -name "*-mark.png"`;
#          do
#            name=`echo $f | sed "s/-mark.png//g"`
#            echo "replace ${f} to ${name}.png"
#            rm -rf "${name}.png"
#            mv "${f}" "${name}.png"
#          done
#          echo -e "$(date +%T) --finish replacing PNG----------------------\n\n"
#          echo " "
#          find . -type f -name "*.png" | xargs ls -l -h


      - name: Generate Redirect HTML üèì
        run: |
          cd public/archives/
          for i in {1..147} ; do echo "<meta http-equiv=\"refresh\" content=\"0;url=https://wordpress.diguage.com/archives/${i}.html\">" > ${i}.html; done

      # https://github.com/Burnett01/rsync-deployments
      - name: Rsync Deploy üèπ
        uses: Burnett01/rsync-deployments@7.0.1
        with:
          switches: -avzr --delete --exclude 'diagrams'
          path: public/
          remote_path: ${{ secrets.DEPLOY_PATH }}
          remote_host: ${{ secrets.DEPLOY_HOST }}
          remote_port: ${{ secrets.DEPLOY_PORT }}
          remote_user: ${{ secrets.DEPLOY_USER }}
          remote_key: ${{ secrets.DEPLOY_KEY }}

      # https://github.com/appleboy/ssh-action
      - name: Change Files Mod üîê
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          port: ${{ secrets.DEPLOY_PORT }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}
            sudo chmod -R 777 *

      # https://github.com/JamesIves/github-pages-deploy-action
      - name: Deploy üöÄ
        continue-on-error: true
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: public # The folder the action should deploy.
          single-commit: true
